<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A rookie&#39;s road to growth</title>
  
  <subtitle>The blog by Luxiong.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luxiong-github.github.io/"/>
  <updated>2020-06-08T14:08:17.349Z</updated>
  <id>https://luxiong-github.github.io/</id>
  
  <author>
    <name>卢雄</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python3 基础运算</title>
    <link href="https://luxiong-github.github.io/2020/03/05/python/python03/"/>
    <id>https://luxiong-github.github.io/2020/03/05/python/python03/</id>
    <published>2020-03-05T12:50:52.000Z</published>
    <updated>2020-06-08T14:08:17.349Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>包括条件控制<code>if – elif – else</code>、循环语句<code>for</code>和<code>while</code>、迭代器与生成器等内容的介绍与基本操作</p></blockquote><a id="more"></a><h3 id="条件控制-if-–-elif-–-else"><a href="#条件控制-if-–-elif-–-else" class="headerlink" title="条件控制 if – elif – else"></a>条件控制 if – elif – else</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>Python中用<code>elif</code>代替了<code>else if</code>，所以if语句的关键字为：<code>if – elif – else</code>  </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> co<span class="symbol">ndition_1</span>:<span class="attr"># 条件1</span>：co<span class="symbol">ndition_1</span></span><br><span class="line">    stateme<span class="symbol">nt_block_1</span><span class="attr"># 逻辑1</span>：stateme<span class="symbol">nt_block_1</span></span><br><span class="line">elif co<span class="symbol">ndition_2</span>:<span class="attr"># 条件2</span>：co<span class="symbol">ndition_2</span></span><br><span class="line">    stateme<span class="symbol">nt_block_2</span><span class="attr"># 逻辑2</span>：stateme<span class="symbol">nt_block_2</span></span><br><span class="line">else:</span><br><span class="line">    stateme<span class="symbol">nt_block_3</span><span class="attr"># 逻辑3</span>：stateme<span class="symbol">nt_block_3</span></span><br></pre></td></tr></table></figure><ul><li>每个条件后面要使用冒号<code>:</code>，表示接下来是满足条件后要执行的语句块</li><li>使用<strong>缩进</strong>来划分语句块，相同缩进数的语句在一起组成一个语句块</li><li>在Python中没有<code>switch – case</code>语句</li><li>条件为真：1,非零数值,True, 非空字符串,至少有一个元素的容器对象,非None对象        条件为假：0,0.0, False, ‘’(空字符串),[],(),{},set(),None<h4 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h4>在嵌套<code>if</code>语句中，可以把<code>if...elif...else</code>结构放在另外一个<code>if...elif...else</code>结构中<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">num</span>=int(input("输入一个数字："))</span><br><span class="line"><span class="keyword">if</span> num%<span class="attribute">2</span>==0:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="attribute">3</span>==0:</span><br><span class="line">        <span class="builtin-name">print</span> (<span class="string">"你输入的数字可以整除 2 和 3"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="builtin-name">print</span> (<span class="string">"你输入的数字可以整除 2，但不能整除 3"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="attribute">3</span>==0:</span><br><span class="line">        <span class="builtin-name">print</span> (<span class="string">"你输入的数字可以整除 3，但不能整除 2"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="builtin-name">print</span>  (<span class="string">"你输入的数字不能整除 2 和 3"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 test.py </span><br><span class="line">输入一个数字：<span class="number">6</span></span><br><span class="line">你输入的数字可以整除 <span class="number">2</span> 和 <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h3 id="循环语句-for-和-while"><a href="#循环语句-for-和-while" class="headerlink" title="循环语句 for 和 while"></a>循环语句 for 和 while</h3><p>Python中的循环语句有<code>for</code>和<code>while</code></p><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><p>(1)基本用法：计算 1 到 100 的总和(5050):</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">n</span>,<span class="built_in">sum</span>,counter = <span class="number">100</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">while counter &lt;= <span class="symbol">n:</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="built_in">sum</span> + counter</span><br><span class="line">counter += <span class="number">1</span></span><br><span class="line">print(<span class="string">"1 到 %d 之和为: %d"</span> % (<span class="built_in">n</span>,<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><p>(2)while 循环使用 else 语句：<br>在<code>while … else</code>在条件语句为<code>false</code>时执行<code>else</code>的语句块:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">count</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">count</span> &lt; <span class="number">5</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="keyword">count</span>, <span class="string">" 小于 5"</span>)</span><br><span class="line"><span class="keyword">count</span>+=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="keyword">count</span>, <span class="string">" 大于或等于 5"</span>)</span><br></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><p>(1)<code>for</code>循环可以遍历任何序列的项目，如一个列表或者一个字符串，for循环的一般格式如下：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">&lt;variable&gt;</span> <span class="keyword">in</span> <span class="variable">&lt;sequence&gt;</span>:</span><br><span class="line">    <span class="variable">&lt;statements&gt;</span></span><br><span class="line">else:</span><br><span class="line">    <span class="variable">&lt;statements&gt;</span></span><br></pre></td></tr></table></figure><p>(2)<code>for</code>实例中可以使用<code>break</code>语句，<code>break</code>语句用于跳出当前循环体：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sites = [<span class="string">"Baidu"</span>, <span class="string">"Google"</span>,<span class="string">"Runoob"</span>,<span class="string">"Taobao"</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">    <span class="keyword">if</span> site == <span class="string">"Runoob"</span>:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"菜鸟教程!"</span>)</span><br><span class="line">        break</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"循环数据 "</span> + site)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"没有循环数据!"</span>)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"完成循环!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">循环数据 Baidu</span><br><span class="line">循环数据 Google</span><br><span class="line">菜鸟教程!</span><br><span class="line">完成循环!</span><br></pre></td></tr></table></figure><h4 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h4><p>(1)如果需要遍历数字序列，可以使用内置<code>range()</code>函数，它会生成数列：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(5):</span><br><span class="line"><span class="builtin-name">print</span>(i,<span class="attribute">end</span>=<span class="string">' '</span>)# 0 1 2 3 4</span><br></pre></td></tr></table></figure><p>(2)range指定区间的值：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(5,9) :</span><br><span class="line"><span class="builtin-name">print</span>(i,<span class="attribute">end</span>=<span class="string">' '</span>)# 5 6 7 8</span><br></pre></td></tr></table></figure><p>(3)<code>range</code>以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做’步长’)：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,10,3) :</span><br><span class="line"><span class="builtin-name">print</span>(i,<span class="attribute">end</span>=<span class="string">' '</span>)# 0 3 6 9</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(-10,-100,-30) :</span><br><span class="line"><span class="builtin-name">print</span>(i,<span class="attribute">end</span>=<span class="string">' '</span>)# -10 -40 -70</span><br></pre></td></tr></table></figure><p>(4)结合<code>range()</code>和<code>len()</code>函数以遍历一个序列的索引,如下所示：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span> = [<span class="string">'Google'</span>, <span class="string">'Baidu'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>, <span class="string">'QQ'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="built_in">len</span>(<span class="keyword">a</span>)):</span><br><span class="line">print(i, <span class="keyword">a</span>[i],<span class="keyword">end</span>=<span class="string">' | '</span>)<span class="comment"># 0 Google | 1 Baidu | 2 Runoob | 3 Taobao | 4 QQ |</span></span><br></pre></td></tr></table></figure><h4 id="break-和-continue-语句及循环中的-else-子句"><a href="#break-和-continue-语句及循环中的-else-子句" class="headerlink" title="break 和 continue 语句及循环中的 else 子句"></a>break 和 continue 语句及循环中的 else 子句</h4><p>(1)<code>break</code>语句可以跳出<code>for</code>和<code>while</code>的循环体。如果你从<code>for</code>或<code>while</code>循环中终止，任何对应的循环<code>else</code>块将不执行</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">n -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span>(n,<span class="keyword">end</span>=<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'循环结束'</span>)<span class="meta"># <span class="number">4</span> <span class="number">3</span> 循环结束</span></span><br></pre></td></tr></table></figure><p>(2) continue 语句被用来告诉Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">n -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">print</span>(n,<span class="keyword">end</span>=<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'循环结束'</span>)<span class="meta"># <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span> 循环结束</span></span><br></pre></td></tr></table></figure><blockquote><p>循环语句可以有<code>else</code>子句，它在穷尽列表(以for循环)或条件变为<code>false</code>(以while循环)导致循环终止时被执行，但循环被<code>break</code>终止时不执行</p></blockquote><p>(3)冒泡排序：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def maopao_sort(<span class="built_in">li</span>):</span><br><span class="line"><span class="built_in">max</span>=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>('排序前：',<span class="built_in">li</span>)</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> <span class="built_in">range</span>(len(<span class="built_in">li</span>)-<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(len(<span class="built_in">li</span>)-<span class="number">1</span>-i):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">li</span>[j]&gt;<span class="built_in">li</span>[j+<span class="number">1</span>]:</span><br><span class="line"><span class="built_in">max</span>=<span class="built_in">li</span>[j]</span><br><span class="line"><span class="built_in">li</span>[j]=<span class="built_in">li</span>[j+<span class="number">1</span>]</span><br><span class="line"><span class="built_in">li</span>[j+<span class="number">1</span>]=<span class="built_in">max</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">max</span>=<span class="built_in">li</span>[j+<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>('排序后：',<span class="built_in">li</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">li</span>=[<span class="number">41</span>,<span class="number">23344</span>,<span class="number">9353</span>,<span class="number">5554</span>,<span class="number">44</span>,<span class="number">7557</span>,<span class="number">6434</span>,<span class="number">500</span>,<span class="number">2000</span>]</span><br><span class="line">maopao_sort(<span class="built_in">li</span>)</span><br><span class="line"># 排序前： [<span class="number">41</span>, <span class="number">23344</span>, <span class="number">9353</span>, <span class="number">5554</span>, <span class="number">44</span>, <span class="number">7557</span>, <span class="number">6434</span>, <span class="number">500</span>, <span class="number">2000</span>]</span><br><span class="line"># 排序后： [<span class="number">41</span>, <span class="number">44</span>, <span class="number">500</span>, <span class="number">2000</span>, <span class="number">5554</span>, <span class="number">6434</span>, <span class="number">7557</span>, <span class="number">9353</span>, <span class="number">23344</span>]</span><br></pre></td></tr></table></figure><h4 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h4><p>(1) <code>pass</code>是空语句，是为了保持程序结构的完整性，<code>pass</code>不做任何事情，一般用做占位语句</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="symbol">'Runoob</span>': </span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'o'</span>:</span><br><span class="line">      pass</span><br><span class="line">      print (<span class="keyword">end</span>='**pass**')</span><br><span class="line">   print (' 字母 :', letter,<span class="keyword">end</span>=' | ')</span><br><span class="line">print (<span class="string">"循环结束"</span>)# 字母 : <span class="type">R</span> |  字母 : <span class="type">u</span> |  字母 : <span class="type">n</span> | **pass** 字母 : <span class="type">o</span> | **pass** 字母 : <span class="type">o</span> |  字母 : <span class="type">b</span> | 循环结束</span><br></pre></td></tr></table></figure><hr><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>(1)迭代是Python最强大的功能之一，是<strong>访问集合元素</strong>的一种方式，迭代器是一个可以<strong>记住遍历的位置的对象</strong><br>(2)迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束，迭代器<strong>只能往前不会后退</strong><br>(3)迭代器有两个基本的方法：<code>iter()</code>和<code>next()</code>，字符串，列表或元组对象都可用于创建迭代器  </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">it</span> = iter(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">it</span>:</span><br><span class="line">    print( i, <span class="keyword">end</span>=' | ') <span class="comment"># 1 | 2 | 3 | 4 |</span></span><br></pre></td></tr></table></figure><h4 id="创建迭代器"><a href="#创建迭代器" class="headerlink" title="创建迭代器"></a>创建迭代器</h4><p>(1)把一个类作为一个迭代器使用需要在类中实现两个方法<code>__iter__()</code>与<code>__next__()</code><br>(2)<code>__iter__()</code>方法返回一个特殊的迭代器对象， 这个迭代器对象实现了<code>__next__()</code>方法并通过<code>StopIteration</code>异常标识迭代的完成<br>(3)<code>__next__()</code>方法（Python 2 里是<code>next()</code>）会返回下一个迭代器对象  </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumbers</span>:    <span class="comment"># 创建一个返回数字的迭代器，初始值为 1，逐步递增 3</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        x = <span class="keyword">self</span>.a</span><br><span class="line">        <span class="keyword">self</span>.a += <span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">myclass = MyNumbers()</span><br><span class="line">myiter = iter(myclass)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)<span class="symbol">:</span></span><br><span class="line">    print(<span class="string">'第 '</span>, i, <span class="string">' 次迭代值为：'</span>, <span class="keyword">next</span>(myiter))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第  <span class="number">0</span>  次迭代值为： <span class="number">1</span></span><br><span class="line">第  <span class="number">1</span>  次迭代值为： <span class="number">4</span></span><br><span class="line">第  <span class="number">2</span>  次迭代值为： <span class="number">7</span></span><br><span class="line">第  <span class="number">3</span>  次迭代值为： <span class="number">10</span></span><br><span class="line">第  <span class="number">4</span>  次迭代值为： <span class="number">13</span></span><br></pre></td></tr></table></figure><h4 id="StopIteration"><a href="#StopIteration" class="headerlink" title="StopIteration"></a>StopIteration</h4><p>(1)<code>StopIteration</code>异常用于标识迭代的完成，防止出现无限循环的情况，在<code>__next__()</code>方法中我们可以设置在完成指定循环次数后触发<code>StopIteration</code>异常来结束迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumbers</span>:</span>    <span class="comment"># 创建一个返回数字的迭代器，初始值为 1，逐步递增 3, 4次迭代后停止执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a,self.b = <span class="number">1</span>,<span class="number">1</span> <span class="comment"># a为返回值，b为计数器</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.b&lt;<span class="number">20</span>:</span><br><span class="line">            self.b += <span class="number">1</span></span><br><span class="line">            x = self.a</span><br><span class="line">            self.a += <span class="number">3</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">myclass = MyNumbers()</span><br><span class="line">myiter = iter(myclass)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> myiter:</span><br><span class="line">    print(i,end=<span class="string">' | '</span>)  <span class="comment"># 1 | 4 | 7 | 10 | 13 | 16 | 19 |</span></span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>(1)使用了<code>yield</code>的函数被称为生成器<code>generator</code><br>(2)跟普通函数不同的是，生成器是一个返回迭代器的函数，<strong>只能用于迭代操作</strong>，更简单点理解生成器就是一个迭代器<br>(3)在调用生成器运行的过程中，每次遇到<code>yield</code>时函数会暂停并保存当前所有的运行信息，返回<code>yield</code>的值, 并在下一次执行<code>next()</code>方法时从当前位置继续运行<br>(4)调用一个生成器函数，返回的是一个迭代器对象，如下斐波那契数列打印使用和不使用<code>yield</code>进行比较<br><strong>使用yield：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n, w=<span class="number">0</span>)</span>:</span>  <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a <span class="comment"># 使用yield</span></span><br><span class="line">        print(<span class="string">'a = '</span>, a, end=<span class="string">' | '</span>)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        print(<span class="string">'a = '</span>, a, <span class="string">' b = '</span>, b)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">f = fibonacci(<span class="number">10</span>, <span class="number">0</span>)  <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(next(f), end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>a =  <span class="number">0</span> | a =  <span class="number">1</span>  b =  <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span>a =  <span class="number">1</span> | a =  <span class="number">1</span>  b =  <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span>a =  <span class="number">1</span> | a =  <span class="number">2</span>  b =  <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span>a =  <span class="number">2</span> | a =  <span class="number">3</span>  b =  <span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span>a =  <span class="number">3</span> | a =  <span class="number">5</span>  b =  <span class="number">8</span></span><br><span class="line"><span class="symbol">5 </span>a =  <span class="number">5</span> | a =  <span class="number">8</span>  b =  <span class="number">13</span></span><br><span class="line"><span class="symbol">8 </span>a =  <span class="number">8</span> | a =  <span class="number">13</span>  b =  <span class="number">21</span></span><br><span class="line"><span class="symbol">13 </span>a =  <span class="number">13</span> | a =  <span class="number">21</span>  b =  <span class="number">34</span></span><br><span class="line"><span class="symbol">21 </span>a =  <span class="number">21</span> | a =  <span class="number">34</span>  b =  <span class="number">55</span></span><br><span class="line"><span class="symbol">34 </span>a =  <span class="number">34</span> | a =  <span class="number">55</span>  b =  <span class="number">89</span></span><br><span class="line"><span class="symbol">55 </span>a =  <span class="number">55</span> | a =  <span class="number">89</span>  b =  <span class="number">144</span></span><br></pre></td></tr></table></figure><p><strong>不使用yield：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n, w=<span class="number">0</span>)</span>:</span>  <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># yield a   # 不使用yield，函数只是简单执行，没有返回迭代器f</span></span><br><span class="line">        print(<span class="string">'a = '</span>, a, end=<span class="string">' | '</span>)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        print(<span class="string">'a = '</span>, a, <span class="string">' b = '</span>, b)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">f = fibonacci(<span class="number">10</span>, <span class="number">0</span>)  <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(next(f), end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a =  <span class="number">0</span> | a =  <span class="number">1</span>  b =  <span class="number">1</span></span><br><span class="line">a =  <span class="number">1</span> | a =  <span class="number">1</span>  b =  <span class="number">2</span></span><br><span class="line">a =  <span class="number">1</span> | a =  <span class="number">2</span>  b =  <span class="number">3</span></span><br><span class="line">a =  <span class="number">2</span> | a =  <span class="number">3</span>  b =  <span class="number">5</span></span><br><span class="line">a =  <span class="number">3</span> | a =  <span class="number">5</span>  b =  <span class="number">8</span></span><br><span class="line">a =  <span class="number">5</span> | a =  <span class="number">8</span>  b =  <span class="number">13</span></span><br><span class="line">a =  <span class="number">8</span> | a =  <span class="number">13</span>  b =  <span class="number">21</span></span><br><span class="line">a =  <span class="number">13</span> | a =  <span class="number">21</span>  b =  <span class="number">34</span></span><br><span class="line">a =  <span class="number">21</span> | a =  <span class="number">34</span>  b =  <span class="number">55</span></span><br><span class="line">a =  <span class="number">34</span> | a =  <span class="number">55</span>  b =  <span class="number">89</span></span><br><span class="line">a =  <span class="number">55</span> | a =  <span class="number">89</span>  b =  <span class="number">144</span></span><br></pre></td></tr></table></figure><p>(5)yield使用场景：<br>一个函数<code>fab</code>，<code>fab</code>返回一个<code>list</code>，这个<code>list</code>是<strong>动态计算</strong>出来的，并且这个<code>list</code>会很大（无论是固定很大还是随着输入参数的增大而增大），这个时候，我们希望每次调用这个函数并使用迭代器进行循环的时候<strong>一个一个的得到每个<code>list</code>元素</strong>而不是<strong>直接得到一个完整的<code>list</code></strong>来<strong>节省内存</strong>，这个时候<code>yield</code>就很有用<br>以斐波那契函数为例，我们一般希望从<code>n</code>返回一个<code>n</code>个数的<code>list</code></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def fab(<span class="built_in">max</span>): <span class="comment"># 简单输出斐波那契数列前 max 个数</span></span><br><span class="line">    n, <span class="keyword">a</span>, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> </span><br><span class="line">    L = [] </span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>: </span><br><span class="line">        L.append(b) </span><br><span class="line">        <span class="keyword">a</span>, b = b, <span class="keyword">a</span> + b </span><br><span class="line">        n = n + <span class="number">1</span> </span><br><span class="line">    <span class="literal">return</span> L</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fab(<span class="number">100</span>): </span><br><span class="line">    print n</span><br></pre></td></tr></table></figure><p><code>fab</code>函数从参数<code>max</code>返回一个有<code>max</code>个元素的<code>list</code>，当这个<code>max</code>很大的时候，会非常的占用内存<br>如果使用<code>list</code>的迭代器。那么我们可以让这个函数<code>fab</code>每次只返回一个迭代器(一个计算结果)，而不是一个完整的<code>list</code>，运行方式是每次的调用都在<code>yield</code>处中断并返回一个结果，然后再次调用的时候再恢复中断继续运行：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def fab(<span class="built_in">max</span>): <span class="comment"># 简单输出斐波那契数列前 max 个数</span></span><br><span class="line">    n, <span class="keyword">a</span>, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> </span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>: </span><br><span class="line">        yield b </span><br><span class="line">        <span class="comment"># print b </span></span><br><span class="line">        <span class="keyword">a</span>, b = b, <span class="keyword">a</span> + b </span><br><span class="line">        n = n + <span class="number">1</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fab(<span class="number">100</span>): </span><br><span class="line">    print n</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;包括条件控制&lt;code&gt;if – elif – else&lt;/code&gt;、循环语句&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;、迭代器与生成器等内容的介绍与基本操作&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://luxiong-github.github.io/categories/Python/"/>
    
      <category term="Study" scheme="https://luxiong-github.github.io/categories/Python/Study/"/>
    
    
      <category term="python" scheme="https://luxiong-github.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python3 基本数据类型</title>
    <link href="https://luxiong-github.github.io/2020/03/03/python/python02/"/>
    <id>https://luxiong-github.github.io/2020/03/03/python/python02/</id>
    <published>2020-03-03T07:55:51.000Z</published>
    <updated>2020-06-02T08:03:26.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建;<br>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型</p></blockquote><a id="more"></a><h3 id="Python-变量类型"><a href="#Python-变量类型" class="headerlink" title="Python 变量类型"></a>Python 变量类型</h3><p>(1)变量存储在内存中的值，这就意味着在创建变量时会在内存中开辟一个空间<br>(2)基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中<br>(3)因此，变量可以<strong>指定不同的数据类型</strong>，这些变量可以存储整数，小数或字符</p><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>(1)Python 中的<strong>变量赋值不需要类型声明</strong><br>(2)每个变量在<strong>内存中创建</strong>，都包括变量的<strong>标识</strong>，<strong>名称</strong>和<strong>数据</strong>这些信息<br>(3)每个变量在使用前都<strong>必须赋值</strong>，变量<strong>赋值以后该变量才会被创建</strong><br>(4)等号<code>=</code>用来给变量赋值<br>(5)等号<code>=</code>运算符左边是一个<strong>变量名</strong>,等号<code>=</code>运算符右边是<strong>存储在变量中的值</strong></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">100</span> <span class="meta"># 赋值整型变量</span></span><br><span class="line">miles = <span class="number">1000.0</span> <span class="meta"># 浮点型</span></span><br><span class="line">name = <span class="string">"John"</span> <span class="meta"># 字符串</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">"整数："</span>+<span class="keyword">str</span>(counter))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">"浮点数："</span>+<span class="keyword">str</span>(miles))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">"字符串："</span>+<span class="keyword">str</span>(name))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">整数：<span class="number">100</span></span><br><span class="line">浮点数：<span class="number">1000.0</span></span><br><span class="line">字符串：John</span><br></pre></td></tr></table></figure><hr><h3 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h3><p>(1)Python允许你同时为多个变量赋值，例如：创建一个整型对象，值为1，三个变量被分配到相同的内存空间上</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; a = b = c = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(a+b+c)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>(2)多个对象指定多个变量，例如：两个整型对象<code>1</code>和<code>2</code>分别分配给变量<code>a</code>和<code>b</code>，字符串对象<code>john</code>分配给变量<code>c</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"john"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(str(a)+str(b)+c)</span><br><span class="line"><span class="number">12</span>john</span><br></pre></td></tr></table></figure><hr><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>(1)Python3定义了<strong>*六个标准数据类型</strong>，用于存储各种类型的数据：</p><ul><li>Numbers（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）   # Python3以下版本无此数据类型</li><li>Dictionary（字典）</li></ul><p>(2)</p><ul><li><strong>不可变数据</strong>（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据</strong>（3 个）：List（列表）、Dictionary（字典）、Set（集合）</li><li><strong>有序</strong>：列表list、字典dict(python3.6之后)、Tuple（元组）、Number（数字）、String（字符串）</li><li><strong>无序</strong>：字典dict(python3.6之前)、集合set</li></ul><hr><h3 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h3><p>(1)<code>Python3</code>支持<code>int、float、bool、complex</code>（复数）<br>(2)<code>在Python3</code>里，只有一种整数类型<code>int</code>，表示为长整型，没有<code>python2</code>中的<code>Long</code><br>(3)像大多数语言一样，数值类型的赋值和计算都是很直观的<br>(4)内置的<code>type()</code>函数可以用来查询变量所指的对象类型  </p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="type">True</span>, <span class="number">4</span>+<span class="number">3</span>j</span><br><span class="line">&gt;&gt;&gt; print(<span class="class"><span class="keyword">type</span>(<span class="title">a</span>), <span class="keyword">type</span>(<span class="title">b</span>), <span class="keyword">type</span>(<span class="title">c</span>), <span class="keyword">type</span>(<span class="title">d</span>))</span></span><br><span class="line">&lt;<span class="keyword">class</span> 'int'&gt; &lt;<span class="keyword">class</span> 'float'&gt; &lt;<span class="keyword">class</span> 'bool'&gt; &lt;<span class="keyword">class</span> 'complex'&gt;</span><br></pre></td></tr></table></figure><p>(5)此外还可以用<code>isinstance</code>来判断类型</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span>,<span class="selector-tag">b</span> = <span class="number">111</span>,<span class="string">'111'</span></span><br><span class="line">&gt;&gt;&gt; print(<span class="string">'a是不是整型：'</span>,isinstance(<span class="selector-tag">a</span>, int),<span class="string">'b是不是整型：'</span>,isinstance(<span class="selector-tag">b</span>, int))</span><br><span class="line">a是不是整型： True b是不是整型： False</span><br></pre></td></tr></table></figure><p>(6)<code>isinstance</code>和<code>type</code>的区别在于：</p><ul><li><code>type()</code>不会认为子类是一种父类类型。</li><li><code>isinstance()</code>会认为子类是一种父类类型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(A(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(A()) == A </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(B(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(B()) == A</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：在<code>Python2</code>中是没有布尔型的，它用数字<code>0</code>表示<code>False</code>，用<code>1</code>表示<code>True</code>。到<code>Python3</code>中，把<code>True</code>和<code>False</code>定义成关键字了，但它们的值还是<code>1</code>和<code>0</code>，它们可以和数字相加<br>(7)使用del语句删除一些对象引用，del语句的语法是：</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> <span class="built_in">var1</span>[,var2[,var3[....,varN]]]   # <span class="built_in">del</span>语语法</span><br><span class="line"><span class="built_in">del</span> <span class="built_in">var</span>                             # <span class="built_in">del</span>语句删除单个对象</span><br><span class="line"><span class="built_in">del</span> var_a, var_b                    # <span class="built_in">del</span>语句删除多个对象</span><br></pre></td></tr></table></figure><h4 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">5</span> + <span class="number">4</span>  # 加法</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">4.3</span> - <span class="number">2</span> # 减法</span><br><span class="line"><span class="number">2.3</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">3</span> * <span class="number">7</span>  # 乘法</span><br><span class="line"><span class="number">21</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">2</span> / <span class="number">4</span>  # 除法，得到一个浮点数</span><br><span class="line"><span class="number">0.5</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">17</span> <span class="comment">// 3# 除法，得到一个整数</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">17</span> % <span class="number">3</span> # 取余 </span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">2</span> ** <span class="number">5</span> # 乘方</span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><ul><li>Python可以同时为多个变量赋值，如a, b = 1, 2</li><li>一个变量可以通过赋值指向不同类型的对象</li><li>数值的除法包含两个运算符<code>/</code>返回一个浮点数，<code>//</code>返回一个整数</li><li>在混合计算时，Python会把整型转换成为浮点数</li></ul><h4 id="数值类型实例"><a href="#数值类型实例" class="headerlink" title="数值类型实例"></a>数值类型实例</h4><table><thead><tr><th>int</th><th align="center">float</th><th align="right">complex</th></tr></thead><tbody><tr><td>10</td><td align="center">0.0</td><td align="right">3.14j</td></tr><tr><td>100</td><td align="center">15.20</td><td align="right">45.j</td></tr><tr><td>-786</td><td align="center">-21.9</td><td align="right">9.322e-36j</td></tr><tr><td>080</td><td align="center">32.3e+18</td><td align="right">.876j</td></tr><tr><td>-0490</td><td align="center">-90.</td><td align="right">-.6545+0J</td></tr><tr><td>-0x260</td><td align="center">-32.54e100</td><td align="right">3e+26J</td></tr><tr><td>0x69</td><td align="center">70.2E-12</td><td align="right">4.53e-7j</td></tr></tbody></table><blockquote><p>Python还支持复数，复数由实数部分和虚数部分构成，可以用<code>a + bj</code>,或者<code>complex(a,b)</code>表示，复数的实部a和虚部b都是浮点型</p></blockquote><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">math</span></span><br><span class="line">import <span class="built_in">random</span></span><br><span class="line"></span><br><span class="line">x,y = <span class="number">10</span>,<span class="number">20</span></span><br><span class="line">list1=[<span class="number">9</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"># 数学函数</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'abs(-10):'</span>,<span class="built_in">abs</span>(<span class="number">-10</span>))# 返回数字的绝对值，如<span class="built_in">abs</span>(<span class="number">-10</span>) 返回 <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'math.fabs(-10):'</span>,<span class="built_in">math</span>.fabs(<span class="number">-10</span>))# 返回数字的绝对值，如<span class="built_in">math</span>.fabs(<span class="number">-10</span>) 返回<span class="number">10.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'max(list1):'</span>,<span class="built_in">max</span>(list1))# 返回给定参数的最大值，参数可以为序列(列表等)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'min(list1):'</span>,<span class="built_in">min</span>(list1))# 返回给定参数的最小值，参数可以为序列(列表等)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'(x&gt;y)-(x&lt;y):'</span>,(x&gt;y)-(x&lt;y))# 如果 x &lt; y 返回 <span class="number">-1</span>, 如果 x == y 返回 <span class="number">0</span>, 如果 x &gt; y 返回 <span class="number">1</span>。 Python <span class="number">3</span> 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'math.exp(1):'</span>,<span class="built_in">math</span>.<span class="built_in">exp</span>(<span class="number">1</span>))# 返回e的x次幂(ex),如<span class="built_in">math</span>.<span class="built_in">exp</span>(<span class="number">1</span>) 返回<span class="number">2.718281828459045</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'math.ceil(4.1):'</span>,<span class="built_in">math</span>.<span class="built_in">ceil</span>(<span class="number">4.1</span>))# 返回数字的上入整数，如<span class="built_in">math</span>.<span class="built_in">ceil</span>(<span class="number">4.1</span>) 返回 <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'math.floor(4.9):'</span>,<span class="built_in">math</span>.<span class="built_in">floor</span>(<span class="number">4.9</span>))# 返回数字的下舍整数，如<span class="built_in">math</span>.<span class="built_in">floor</span>(<span class="number">4.9</span>)返回 <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">"math.pow(2, 4):"</span>, <span class="built_in">math</span>.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">4</span>))# x**y 运算后的值，<span class="built_in">math</span>.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">4</span>)返回<span class="number">16.0</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">"round(70.23456):"</span>, round(<span class="number">70.23456</span>,<span class="number">4</span>))# 返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数，其实准确的说是保留值将保留到离上一位更近的一端</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"math.sqrt(100): "</span>, <span class="built_in">math</span>.<span class="built_in">sqrt</span>(<span class="number">100</span>))# 返回数字x的平方根，<span class="built_in">math</span>.<span class="built_in">sqrt</span>(<span class="number">100</span>)返回<span class="number">10.0</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">"math.modf(100.12): "</span>, <span class="built_in">math</span>.<span class="built_in">modf</span>(<span class="number">100.12</span>))# 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'math.log(32,2):'</span>,<span class="built_in">math</span>.<span class="built_in">log</span>(<span class="number">32</span>,<span class="number">2</span>))# <span class="built_in">log</span>() 方法返回x的自然对数，如<span class="built_in">math</span>.<span class="built_in">log</span>(<span class="built_in">math</span>.e)返回<span class="number">1.0</span>,<span class="built_in">math</span>.<span class="built_in">log</span>(<span class="number">32</span>,<span class="number">2</span>)返回<span class="number">5.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'math.log10(10000):'</span>,<span class="built_in">math</span>.<span class="built_in">log10</span>(<span class="number">10000</span>))# 返回以<span class="number">10</span>为基数的x的对数，如<span class="built_in">math</span>.<span class="built_in">log10</span>(<span class="number">10000</span>)返回 <span class="number">4.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 随机数函数(随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性)</span><br><span class="line"># <span class="built_in">random</span>.choice(seq)函数：从序列(可以是一个列表，元组或字符串)的元素中随机挑选一个元素，比如<span class="built_in">random</span>.choice(range(<span class="number">10</span>))，从<span class="number">0</span>到<span class="number">9</span>中随机挑选一个整数</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"从 range(100) 返回一个随机数 : "</span>,<span class="built_in">random</span>.choice(range(<span class="number">100</span>)))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"从列表中 [1, 2, 3, 5, 9]) 返回一个随机元素 : "</span>, <span class="built_in">random</span>.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"从字符串中 'Runoob' 返回一个随机字符 : "</span>, <span class="built_in">random</span>.choice(<span class="string">'Runoob'</span>))</span><br><span class="line"># <span class="built_in">random</span>.randrange ([start,] stop [,step])：从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">"randrange(1,100, 2) : "</span>, <span class="built_in">random</span>.randrange(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>))# 从 <span class="number">1</span><span class="number">-100</span> 中选取一个奇数</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"randrange(100) : "</span>, <span class="built_in">random</span>.randrange(<span class="number">100</span>))# 从 <span class="number">0</span><span class="number">-99</span> 选取一个随机数</span><br><span class="line"># <span class="built_in">random</span>.<span class="built_in">random</span>()：随机生成下一个实数，它在[<span class="number">0</span>,<span class="number">1</span>)范围内</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random() : "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())# 随机生成一个[<span class="number">0</span>,<span class="number">1</span>)的实数</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random() : "</span>, (<span class="built_in">random</span>.<span class="built_in">random</span>()*<span class="number">10</span>+<span class="number">1</span>))# 随机生成一个[<span class="number">0</span>,<span class="number">10</span>]的实数</span><br><span class="line"># <span class="built_in">random</span>.seed ( [x] ): 方法改变随机数生成器的种子，可以在调用其他随机模块函数之前调用此函数.</span><br><span class="line"># 预先使用 <span class="built_in">random</span>.seed(x) 设定好种子之后，其中的 x 可以是任意数字，如<span class="number">10</span>，这个时候，先调用它的情况下，使用 <span class="built_in">random</span>() 生成的随机数将会是同一个</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"使用整数 10 种子生成随机数："</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())# 产生一个随机数</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"使用整数 10 种子生成随机数："</span>, <span class="built_in">random</span>.<span class="built_in">random</span>()) # 和上一个随机数一致</span><br><span class="line"># <span class="built_in">random</span>.shuffle (lst)：将序列的所有元素随机排序，lst为列表，函数返回 None</span><br><span class="line"><span class="built_in">random</span>.shuffle(list1);# 随机排序列表</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"随机排序列表1 : "</span>, list1)</span><br><span class="line"><span class="built_in">random</span>.shuffle(list1)# 随机排序列表</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"随机排序列表3 : "</span>, list1)</span><br><span class="line"># <span class="built_in">random</span>.uniform(x, y)：随机生成下一个实数，它在[x,y]范围内，返回一个浮点数 N，取值范围为如果 x&lt;y 则 x &lt;= N &lt;= y，如果 y&lt;x 则y &lt;= N &lt;= x</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"uniform(5, 10) 的随机浮点数 : "</span>,  <span class="built_in">random</span>.uniform(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"生成两位小数的浮点数 : "</span>,  round(<span class="built_in">random</span>.uniform(<span class="number">5</span>, <span class="number">10</span>), <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 三角函数</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"cos(0) : "</span>,  <span class="built_in">math</span>.<span class="built_in">cos</span>(<span class="number">0</span>))# 返回x的弧度的余弦值返回x的弧度的余弦值,<span class="number">-1</span> 到 <span class="number">1</span> 之间</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"acos(1) : "</span>,  <span class="built_in">math</span>.<span class="built_in">acos</span>(<span class="number">1</span>))# 返回x的反余弦弧度值x为<span class="number">-1</span>到<span class="number">1</span>之间的数值。如果x是大于<span class="number">1</span>，会产生一个错误</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"sin(math.pi/2) : "</span>,  <span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="built_in">math</span>.<span class="built_in">pi</span>/<span class="number">2</span>))# 返回的x弧度的正弦值返回的x弧度的正弦值，数值在 <span class="number">-1</span> 到 <span class="number">1</span> 之间</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"asin(0) : "</span>,  <span class="built_in">math</span>.<span class="built_in">asin</span>(<span class="number">0</span>))# 返回x的反正弦弧度值x为<span class="number">-1</span>到<span class="number">1</span>之间的数值。如果x是大于<span class="number">1</span>，会产生一个错误</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"tan(0) : "</span>,  <span class="built_in">math</span>.<span class="built_in">tan</span>(<span class="number">0</span>))# 返回x弧度的正切值返回的x弧度的正弦值，数值在 <span class="number">-1</span> 到 <span class="number">1</span> 之间</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"atan(0.64) : "</span>,  <span class="built_in">math</span>.<span class="built_in">atan</span>(<span class="number">0.64</span>))# 返回x的反正切弧度值</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"atan2(5,5) : "</span>,  <span class="built_in">math</span>.<span class="built_in">atan2</span>(<span class="number">5</span>,<span class="number">5</span>))# 返回给定的 X 及 Y 坐标值的反正切值</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"hypot(0, 2) : "</span>,  <span class="built_in">math</span>.hypot(<span class="number">0</span>, <span class="number">2</span>))# 返回欧几里德范数 <span class="built_in">sqrt</span>(x*x + y*y)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"degrees(math.pi/2) : "</span>,  <span class="built_in">math</span>.degrees(<span class="built_in">math</span>.<span class="built_in">pi</span>/<span class="number">2</span>))# 将弧度转换为角度,如degrees(<span class="built_in">math</span>.<span class="built_in">pi</span>/<span class="number">2</span>) ， 返回<span class="number">90.0</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">"radians(math.pi/2) : "</span>,  <span class="built_in">math</span>.radians(<span class="built_in">math</span>.<span class="built_in">pi</span>/<span class="number">2</span>))# 将角度转换为弧度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数学常量</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'pi：'</span>,<span class="built_in">math</span>.<span class="built_in">pi</span>)# 数学常量 <span class="built_in">pi</span>（圆周率，一般以π来表示）</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'e：'</span>,<span class="built_in">math</span>.e)# 数学常量 e，e即自然常数（自然常数）</span><br></pre></td></tr></table></figure><hr><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><p>(1)Python中的字符串用单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来，同时使用反斜杠<code>\</code>转义特殊字符<br>(2)索引值以<code>0</code>为开始值，<code>-1</code>为从末尾的开始位置<br><img src="https://i.ibb.co/TcCMqt5/python2.png" alt="Python 字符串索引"><br>(3)加号<code>+</code>是字符串的连接符，星号<code>*</code>表示复制当前字符串，与之结合的数字为复制的次数<br>(4)Python使用反斜杠<code>\</code>转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个<code>r</code>，表示原始字符串  </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;str = <span class="string">'Runoob'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (str)          <span class="comment"># 输出字符串</span></span><br><span class="line">Runoob</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (str[<span class="number">0</span><span class="symbol">:-</span><span class="number">1</span>])    <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line">Runoo</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (str[<span class="number">0</span>])       <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line">R</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (str[<span class="number">2</span><span class="symbol">:</span><span class="number">5</span>])     <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line">noo</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (str[<span class="number">2</span><span class="symbol">:</span>])      <span class="comment"># 输出从第三个开始的后的所有字符</span></span><br><span class="line">noob</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (str * <span class="number">2</span>)      <span class="comment"># 输出字符串两次，也可以写成 print (2 * str) </span></span><br><span class="line">RunoobRunoob</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (str + <span class="string">"TEST"</span>) <span class="comment"># 连接字符串</span></span><br><span class="line">RunoobTEST</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (<span class="string">'Ru\noob'</span>) <span class="comment"># 反斜杠 \ 转义特殊字符</span></span><br><span class="line">Ru</span><br><span class="line">oob</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (r<span class="string">'Ru\noob'</span>) <span class="comment"># 字符串前面添加一个 r，表示原始字符串，不让反斜杠发生转义</span></span><br><span class="line">Ru \n oob</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;inputStr = <span class="string">'123 456 789'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;inputStr=inputStr[-<span class="number">1</span><span class="symbol">:</span><span class="symbol">:-</span><span class="number">1</span>]<span class="comment"># 字符串逆置</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print(inputStr)</span><br><span class="line"><span class="number">987</span> <span class="number">654</span> <span class="number">321</span></span><br></pre></td></tr></table></figure><p>(5)Python<strong>没有单独的字符类型</strong>，一个字符就是长度为1的字符串<br>(6)Python字符串<strong>不能被改变</strong>，向一个索引位置赋值，比如<code>word[0]</code>=<code>&#39;m&#39;</code>会导致错误</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">word</span> = <span class="string">'Python'</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="keyword">word</span>[<span class="number">0</span>], <span class="keyword">word</span>[<span class="number">5</span>])</span><br><span class="line">P n</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="keyword">word</span>[<span class="number">-1</span>], <span class="keyword">word</span>[<span class="number">-6</span>])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><h4 id="Python字符串格式化"><a href="#Python字符串格式化" class="headerlink" title="Python字符串格式化"></a>Python字符串格式化</h4><p>(1)Python支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符<code>%s</code>的字符串中</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (<span class="string">"我叫 %s 今年 %d 岁!"</span> % (<span class="string">'小明'</span>, <span class="number">10</span>))</span><br><span class="line">我叫 小明 今年 <span class="number">10</span> 岁!</span><br></pre></td></tr></table></figure><p>(2)Python字符串格式化符号</p><table><thead><tr><th>int</th><th align="center">float</th></tr></thead><tbody><tr><td>%c</td><td align="center">格式化字符及其ASCII码</td></tr><tr><td>%d</td><td align="center">格式化字符串</td></tr><tr><td>%d</td><td align="center">格式化整数</td></tr><tr><td>%u</td><td align="center">格式化无符号整型</td></tr><tr><td>%o</td><td align="center">格式化无符号八进制数</td></tr><tr><td>%x</td><td align="center">格式化无符号十六进制数</td></tr><tr><td>%X</td><td align="center">格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td align="center">格式化浮点数字，可指定小数点后的精度</td></tr><tr><td>%e</td><td align="center">用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td align="center">作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%g</td><td align="center">%f和%e的简写</td></tr><tr><td>%G</td><td align="center">%f 和 %E 的简写</td></tr><tr><td>%p</td><td align="center">用十六进制数格式化变量的地址</td></tr></tbody></table><h4 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a>f-string</h4><p>(1)<code>f-string</code>是<code>python3.6</code>之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法,之前我们习惯用百分号<code>(%)</code><br>(2)<code>f-string</code>格式化字符串以<code>f</code>开头，后面跟着字符串，字符串中的表达式用大括号<code>{}</code>包起来，它会将变量或表达式计算后的值替换进去，实例如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; name = <span class="string">'Runoob'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Hello %s'</span> % name</span><br><span class="line"><span class="string">'Hello Runoob'</span></span><br></pre></td></tr></table></figure><p>(3)用了<code>f-string</code>方式显得更简单，不用再去判断使用<code>%s</code>，还是<code>%d</code><br>(4)在<code>Python 3.8</code>的版本中可以使用 = 符号来拼接运算表达式与结果</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(f<span class="string">'&#123;x+1&#125;'</span>)   <span class="comment"># Python 3.6</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(f<span class="string">'&#123;x+1=&#125;'</span>)   <span class="comment"># Python 3.8</span></span><br><span class="line"><span class="string">'x+1=2'</span></span><br></pre></td></tr></table></figure><h4 id="字符串内建函数"><a href="#字符串内建函数" class="headerlink" title="字符串内建函数"></a>字符串内建函数</h4><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Python 的字符串内建函数，Python 的字符串常用内建函数如下：</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">'Hello World'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># capitalize()：该方法返回一个首字母大写的字符串</span></span><br><span class="line"><span class="meta"># (<span class="number">1</span>)首字符会转换成大写，其余字符会转换成小写</span></span><br><span class="line"><span class="meta"># (<span class="number">2</span>)首字符如果是非字母，首字母不会转换成大写，会转换成小写</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"str.capitalize() : "</span>, <span class="string">'lu XIONG'</span>.capitalize())<span class="meta"># 输出：str.capitalize() :  Lu xiong</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"str.capitalize() : "</span>, <span class="string">'123 Lu XIONG'</span>.capitalize())<span class="meta"># 输出：str.capitalize() :  <span class="number">123</span> lu xiong</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># center(width[, fillchar])：返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格.如果 width 小于字符串宽度直接返回字符串</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"str.center(40, '*') : "</span>, <span class="string">'[runoob]'</span>.center(<span class="number">40</span>, <span class="string">'*'</span>))<span class="meta"># 输出：str.center(<span class="number">40</span>, '*') :  ****************[runoob]****************</span></span><br><span class="line"><span class="meta"># ljust(width[, fillchar])：返回一个原字符串左对齐,并使用空格(fillchar填充字符，默认为空格)填充至指定长度(width)的新字符串，如果指定的长度小于原字符串的长度则返回原字符串</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'大帅哥'</span>.ljust(<span class="number">40</span>, <span class="string">'*'</span>)) <span class="meta"># 输出：大帅哥*************************************</span></span><br><span class="line"><span class="meta"># rjust(width[, fillchar])：返回一个原字符串右对齐,并使用空格(fillchar填充字符，默认为空格)填充至指定长度(width)的新字符串，如果指定的长度小于原字符串的长度则返回原字符串</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'大帅哥'</span>.rjust(<span class="number">40</span>, <span class="string">'*'</span>)) <span class="meta"># 输出：*************************************大帅哥</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># zfill(width)：返回指定长度的字符串，原字符串右对齐，前面填充<span class="number">0</span>(作用同 rjust(width,<span class="meta-string">"0"</span>))</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'大帅哥'</span>.zfill(<span class="number">40</span>)) <span class="meta"># 输出：<span class="number">0000000000000000000000000000000000000</span>大帅哥</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># count(sub, start= <span class="number">0</span>,end=len(string))：返回回子字符串(sub)在字符串中出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"str.count('o') : "</span>, <span class="string">'www.runoob.com'</span>.count(<span class="string">'o'</span>,<span class="number">0</span>,<span class="number">10</span>)) <span class="meta"># 输出：str.count('o') :  <span class="number">2</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta"># find(str, beg=<span class="number">0</span>, end=len(string))：检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回<span class="number">-1</span></span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">"Runoob example....wow!!!"</span>.find(<span class="string">"exam"</span>))      <span class="meta"># 输出：<span class="number">7</span></span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">"Runoob example....wow!!!"</span>.find(<span class="string">"exam"</span>, <span class="number">5</span>))   <span class="meta"># 输出：<span class="number">7</span></span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">"Runoob example....wow!!!"</span>.find(<span class="string">"exam"</span>, <span class="number">10</span>))  <span class="meta"># 输出：<span class="number">-1</span></span></span><br><span class="line"><span class="meta"># rfind(str, beg=<span class="number">0</span> end=len(string))：类似于 find()函数，不过是从右边开始查找.返回字符串str最后一次出现的位置，如果没有匹配项则返回<span class="number">-1</span>(beg-开始查找的位置，默认为<span class="number">0</span>  end-结束查找位置，默认为字符串的长度)</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'abcdefghijklmnopqrstubvwxyz 中 b 最后一次出现在：'</span>,<span class="string">'abcdefghijklmnopqrstubvwxyz'</span>.rfind(<span class="string">'b'</span>,<span class="number">0</span>,<span class="number">20</span>)) <span class="meta"># 输出：aa bb aa bb aa bb aa bb中 bb 最后一次出现在： <span class="number">9</span></span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'abcdefghijklmnopqrstubvwxyz 中 b 最后一次出现在：'</span>,<span class="string">'abcdefghijklmnopqrstubvwxyz'</span>.find(<span class="string">'b'</span>,<span class="number">0</span>,<span class="number">20</span>)) <span class="meta"># 输出：aa bb aa bb aa bb aa bb中 bb 最后一次出现在： <span class="number">3</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># # index(str, beg=<span class="number">0</span>, end=len(string))：跟find()方法一样，只不过如果str不在字符串中会报一个异常</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"Runoob example....wow!!!"</span>.index(<span class="meta-string">"exam"</span>))      # 输出：<span class="number">7</span></span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"Runoob example....wow!!!"</span>.index(<span class="meta-string">"exam"</span>, <span class="number">5</span>))   # 输出：<span class="number">7</span></span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"Runoob example....wow!!!"</span>.index(<span class="meta-string">"exam"</span>, <span class="number">10</span>))  # 输出：ValueError: substring not found</span></span><br><span class="line"><span class="meta"># # rindex(str, beg=<span class="number">0</span>, end=len(string))：类似于 find()函数，不过是从右边开始查找.跟find()方法一样，只不过如果str不在字符串中会报一个异常</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"Runoob example....wow!!!"</span>.rindex(<span class="meta-string">"exam"</span>))      # 输出：<span class="number">7</span></span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"Runoob example....wow!!!"</span>.rindex(<span class="meta-string">"exam"</span>, <span class="number">5</span>))   # 输出：<span class="number">7</span></span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"Runoob example....wow!!!"</span>.rindex(<span class="meta-string">"exam"</span>, <span class="number">10</span>))  # 输出：ValueError: substring not found</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># isalnum()：检测字符串是否由字母和数字组成，如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'runoob2016 是不是都是字母或者数字：'</span>,<span class="string">"runoob2016"</span>.isalnum())             <span class="meta"># 输出：runoob2016 是不是都是字母或者数字： True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'www.runoob.com 是不是都是字母或者数字：'</span>,<span class="string">"www.runoob.com"</span>.isalnum())     <span class="meta"># 输出：www.runoob.com 是不是都是字母或者数字： False</span></span><br><span class="line"><span class="meta"># isalpha()：检测字符串是否只由字母或文字组成，如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'runoob菜鸟教程 是不是都是字母或者文字组成：'</span>, <span class="string">"runoob菜鸟教程"</span>.isalnum())  <span class="meta"># 输出：runoob2016 是不是都是字母或者数字： True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Runoob example....wow!!! 是不是都是字母或者数字：'</span>, <span class="string">"Runoob example....wow!!!"</span>.isalnum())  <span class="meta"># 输出：www.runoob.com 是不是都是字母或者数字： False</span></span><br><span class="line"><span class="meta"># isdigit()：检测字符串是否只由数字组成，如果字符串只包含数字则返回 True 否则返回 False</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'12985 是不是都是数字：'</span>, <span class="string">'12985'</span>.isdigit())  <span class="meta"># 输出：<span class="number">12985</span> 是不是都是数字： True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'runoo 是不是都是数字：'</span>, <span class="string">"runoo"</span>.isdigit())  <span class="meta"># 输出：<span class="number">12985</span> 是不是都是数字： False</span></span><br><span class="line"><span class="meta"># isdecimal()：检测字符串是否只包含十进制字符。这种方法只存在于unicode对象。注：定义一个十进制字符串，只需要在字符串前添加 'u' 前缀即可</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'12985 是不是都是十进制字符：'</span>, <span class="string">'12985'</span>.isdecimal())  <span class="meta"># 输出：<span class="number">12985</span> 是不是都是十进制字符： True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'129ww 是不是都是十进制字符：'</span>, <span class="string">'129ww'</span>.isdecimal())  <span class="meta"># 输出：<span class="number">129</span>ww 是不是都是十进制字符： False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># islower()：检测字符串是否由小写字母组成，如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'12uno1 的字母是不是都是小写字母：'</span>, <span class="string">'12uno1'</span>.islower())   <span class="meta"># 输出：<span class="number">12</span>uno1 的字母是不是小写字母： True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'ruNoo 的字母是不是都是小写字母：'</span>, <span class="string">"ruNoo"</span>.islower())     <span class="meta"># 输出：runoo 的字母是不是都是小写字母： False</span></span><br><span class="line"><span class="meta"># isupper()：检测字符串中所有的字母是否都为大写，如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'12ABC 的字母是不是都是大写字母：'</span>, <span class="string">'12ABC'</span>.isupper())  <span class="meta"># 输出：<span class="number">12</span>ABC 的字母是不是小写字母： True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abCDE 的字母是不是都是大写字母：'</span>, <span class="string">"abCDE"</span>.isupper())  <span class="meta"># 输出：abCDE 的字母是不是都是小写字母： False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># lower()：转换字符串中所有大写字符为小写，返回将字符串中所有大写字符转换为小写后生成的字符串</span></span><br><span class="line"><span class="keyword">print</span>( <span class="string">"Runoob EXAMPLE....WOW!!!"</span>.lower()) <span class="meta"># 输出：runoob example....wow!!!</span></span><br><span class="line"><span class="meta"># upper()：转换字符串中所有大写字符为大写，返回将字符串中所有小写字符转换为大写后生成的字符串</span></span><br><span class="line"><span class="keyword">print</span>( <span class="string">"this is string"</span>.upper()) <span class="meta"># 输出：THIS IS STRING</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># swapcase()：用于对字符串的大小写字母进行转换，返回大小写字母转换后生成的新字符串</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'This Is String'</span>.swapcase())<span class="meta"># 输出：tHIS iS sTRING</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># isnumeric()：测字符串是否只由数字组成，数字可以是： Unicode 数字，全角数字（双字节），罗马数字，汉字数字。指数类似 ² 与分数类似 ½ 也属于数字.如果字符串中只包含数字字符，则返回 True，否则返回 False</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'222666 是不是只包含数字字符：'</span>, <span class="string">'222666'</span>.isnumeric())  <span class="meta"># 输出：<span class="number">222666</span> 是不是只包含数字字符： True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'222abc 是不是只包含数字字符：'</span>, <span class="string">"222abc"</span>.isnumeric())  <span class="meta"># 输出：<span class="number">222</span>abc 是不是只包含数字字符： False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># isspace()：检测字符串是否只由空白字符组成，如果字符串中只包含空格，则返回 True，否则返回 False</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'        '</span>.isspace()) <span class="meta"># 输出：True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'   a    '</span>.isspace()) <span class="meta"># 输出：False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># istitle()：检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写，如果字符串中所有的单词拼写首字母是否为大写，且其他字母为小写则返回 True，否则返回 False</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Hello World'</span>.istitle())  <span class="meta"># 输出：True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Hello world'</span>.istitle())  <span class="meta"># 输出：False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># title()：返回<span class="meta-string">"标题化"</span>的字符串,就是说所有单词的首个字母转化为大写，其余字母均为小写</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'this is string'</span>.title()) <span class="meta"># 输出：This Is String</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># join()：用于将序列中的元素以指定的字符连接生成一个新的字符串，返回通过指定字符连接序列中元素后生成的新字符串</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'-'</span>.join(list(<span class="string">'World'</span>))) <span class="meta"># 输出：W-o-r-l-d</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">' '</span>.join(list(<span class="string">'World'</span>))) <span class="meta"># 输出：W o r l d</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># len()：返回对象（字符、列表、元组等）长度或项目个数</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Hello World 的长度为：'</span>+<span class="keyword">str</span>(len(<span class="string">'Hello World'</span>))) <span class="meta"># 输出：Hello World 的长度为：<span class="number">11</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># lstrip([chars])：用于截掉字符串左边的空格或指定字符(chars)，返回截掉字符串左边的空格或指定字符后生成的新字符串</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'     this is string'</span>.lstrip()) <span class="meta"># 输出：this is string</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'889999988this is string999'</span>.lstrip(<span class="string">'89'</span>)) <span class="meta"># 输出：this is string999</span></span><br><span class="line"><span class="meta"># rstrip([chars])：用于截掉字符串右边的空格或指定字符(chars)，返回截掉字符串右边的空格或指定字符后生成的新字符串</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'this is string     '</span>.rstrip()) <span class="meta"># 输出：this is string</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'889999988this is string889999988'</span>.rstrip(<span class="string">'89'</span>)) <span class="meta"># 输出：<span class="number">889999988</span>this is string</span></span><br><span class="line"><span class="meta"># strip([chars])：用于移除字符串头尾指定的字符（默认为空格）或字符序列。该方法只能删除开头或是结尾的字符，不能删除中间部分的字符(相当于执行 lstrip()和 rstrip())</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'     this is string     '</span>.strip()) <span class="meta"># 输出：this is string</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'889999988this is string889999988'</span>.strip(<span class="string">'89'</span>)) <span class="meta"># 输出：this is string</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># str.maketrans(intab, outtab)：用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标</span></span><br><span class="line"><span class="meta"># 两个字符串的长度必须相同，为一一对应的关系</span></span><br><span class="line"><span class="meta"># Python3<span class="number">.4</span> 已经没有 string.maketrans() 了，取而代之的是内建函数: bytearray.maketrans()、bytes.maketrans()、str.maketrans()</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'在字符串 just do it 中，将abcdefs对应的字符转化为1234567的结果是： '</span>,<span class="string">'just do it'</span>.translate(str.maketrans(<span class="string">'abcdefs'</span>,<span class="string">'1234567'</span>))) <span class="meta"># 输出：在字符串 just do it 中，将abcdefs对应的字符转化为<span class="number">1234567</span>的结果是：  ju7t <span class="number">4</span>o it</span></span><br><span class="line"><span class="meta"># translate(table[, delete])：根据参数table(table:翻译表是通过 maketrans() 方法转换而来)转换字符串的字符,要过滤掉的字符放到 deletechars 参数中</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'在字符串 just do it 中，将abcdefs对应的字符转化为1234567的结果是： '</span>,<span class="string">'just do it'</span>.translate(str.maketrans(<span class="string">'abcdefs'</span>,<span class="string">'1234567'</span>))) <span class="meta"># 输出：在字符串 just do it 中，将abcdefs对应的字符转化为<span class="number">1234567</span>的结果是：  ju7t <span class="number">4</span>o it</span></span><br><span class="line">bytes_tabtrans = bytes.maketrans(b<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>, b<span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>)<span class="meta"># 制作翻译表</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'转换为大写，并删除字母o： '</span>,b<span class="string">'just do it'</span>.translate(bytes_tabtrans, b<span class="string">'o'</span>)) <span class="meta"># 输出：转换为大写，并删除字母o：  b'JUST D IT'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># max(str)：返回字符串中最大的字母</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"最大字符: "</span> + max(<span class="string">'runoob'</span>)) <span class="meta"># 输出：最大字符: u</span></span><br><span class="line"><span class="meta"># min(str)：返回字符串中最小的字母</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"最小字符: "</span> + min(<span class="string">'runoob'</span>)) <span class="meta"># 输出：最小字符: b</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># replace(old, new[, max])：把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'将 aa 替换为 cc ，替换次数不超过3次：'</span>,<span class="string">'aa bb aa bb aa bb aa bb'</span>.replace(<span class="string">"aa"</span>, <span class="string">"cc"</span>, <span class="number">3</span>)) <span class="meta"># 输出：将 aa 替换为 cc ，替换次数不超过<span class="number">3</span>次： cc bb cc bb cc bb aa bb</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># split(str=<span class="meta-string">""</span>, num=string.count(str))：通过指定分隔符(str)对字符串进行切片，如果第二个参数 num 有指定值，则分割为 num+<span class="number">1</span> 个子字符串，返回分割后的字符串列表</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'Google#Runoob#Taobao#Facebook 用#分割俩次结果为：'</span>,<span class="string">"Google#Runoob#Taobao#Facebook"</span>.split(<span class="string">'#'</span>,<span class="number">2</span>)) <span class="meta"># 输出：Google#Runoob#Taobao#Facebook 用#分割俩次结果为： ['Google', 'Runoob', 'Taobao#Facebook']</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># splitlines([keepends])：按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'保留换行符：'</span>,<span class="string">'ab c\n\nde fg\rkl\r\n'</span>.splitlines(True)) <span class="meta"># 输出：保留换行符：['ab c\n', '\n', 'de fg\r', 'kl\r\n']</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'保留换行符：'</span>,<span class="string">'ab c\n\nde fg\rkl\r\n'</span>.splitlines()) <span class="meta"># 输出：保留换行符：['ab c', '', 'de fg', 'kl']</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># startswith(substr, beg=<span class="number">0</span>,end=len(string))：检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'aaa bbb ccc索引为 1~6 的子字符串否以 aa 开头：'</span>,<span class="string">'aaa bbb ccc'</span>.startswith(<span class="string">'aa'</span>,<span class="number">1</span>,<span class="number">6</span>))    <span class="meta"># aaa bbb ccc索引为 <span class="number">1</span>~<span class="number">6</span> 的子字符串否以 aa 开头： True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'aaa bbb ccc是否以 bb 开头：'</span>,<span class="string">'aaa bbb ccc'</span>.startswith(<span class="string">'bb'</span>))    <span class="meta"># 输出：aaa bbb ccc是否以 bb 开头： False</span></span><br><span class="line"><span class="meta"># endswith(suffix[, start[, end]])：判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回 True，否则返回 False。可选参数 <span class="meta-string">"start"</span> 与 <span class="meta-string">"end"</span> 为检索字符串的开始与结束位置</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'aaa bbb ccc索引为 1~6 的子字符串否以 bb 结尾：'</span>,<span class="string">'aaa bbb ccc'</span>.endswith(<span class="string">'bb'</span>,<span class="number">1</span>,<span class="number">6</span>))    <span class="meta"># aaa bbb ccc索引为 <span class="number">1</span>~<span class="number">6</span> 的子字符串否以 bb 结尾 True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'aaa bbb ccc是否以 cc 结尾：'</span>,<span class="string">'aaa bbb ccc'</span>.endswith(<span class="string">'cc'</span>))    <span class="meta"># 输出：aaa bbb ccc是否以 cc 结尾： True</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># expandtabs(tabsize=<span class="number">8</span>)：把字符串中的 tab 符号('\t')转为空格，tab 符号('\t')默认的空格数是 <span class="number">8</span> ，tabsize指定转换字符串中的 tab 符号('\t')转为空格的字符数</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">"原始字符串: "</span> + <span class="string">"this is\tstring example....wow!!!"</span>)      <span class="meta"># 输出：原始字符串: this isstring example....wow!!!</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">"替换 \\t 符号: "</span> + <span class="string">"this is\tstring example....wow!!!"</span>.expandtabs())     <span class="meta"># 输出：替换 \t 符号: this is string example....wow!!!</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">"使用16个空格替换 \\t 符号: "</span> + <span class="string">"this is\tstring example....wow!!!"</span>.expandtabs(<span class="number">16</span>))    <span class="meta"># 输出：使用<span class="number">16</span>个空格替换 \t 符号: this is         string example....wow!!!</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># # decode(encoding=<span class="meta-string">"utf-8"</span>, errors=<span class="meta-string">"strict"</span>)：以指定的编码格式解码 bytes 对象，errors参数可以指定不同的错误处理方案，默认编码为 'utf<span class="number">-8</span>'，该方法返回解码后的字符串</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"UTF-8 编码："</span>, '雄雄雄'.encode('UTF<span class="number">-8</span>')) # 输出：UTF<span class="number">-8</span> 编码： b'\xe5\x8d\xa2\xe9\x9b\x84'</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"GBK 编码："</span>, '雄雄雄'.encode('GBK')) # 输出：GBK 编码： b'\xc2\xac\xd0\xdb'</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"UTF-8 解码："</span>, '雄雄雄'.encode('UTF<span class="number">-8</span>').decode('UTF<span class="number">-8</span>','strict')) # 输出：UTF<span class="number">-8</span> 解码： 雄雄雄</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"GBK 解码："</span>, '雄雄雄'.encode('GBK').decode('GBK','strict')) # 输出：GBK 解码： 雄雄雄</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># # encode(encoding='UTF<span class="number">-8</span>',errors='strict')：以指定的编码格式编码字符串了，errors参数可以指定不同的错误处理方案，该方法返回编码后的字符串，它是一个 bytes 对象</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"UTF-8 编码："</span>, '雄雄雄'.encode('UTF<span class="number">-8</span>'))  # 输出：UTF<span class="number">-8</span> 编码： b'\xe5\x8d\xa2\xe9\x9b\x84'</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"GBK 编码："</span>, '雄雄雄'.encode('GBK'))  # 输出：GBK 编码： b'\xc2\xac\xd0\xdb'</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"UTF-8 解码："</span>, '雄雄雄'.encode('UTF<span class="number">-8</span>').decode('UTF<span class="number">-8</span>', 'strict'))  # 输出：UTF<span class="number">-8</span> 解码： 雄雄雄</span></span><br><span class="line"><span class="meta"># print(<span class="meta-string">"GBK 解码："</span>, '雄雄雄'.encode('GBK').decode('GBK', 'strict'))  # 输出：GBK 解码： 雄雄雄</span></span><br></pre></td></tr></table></figure><hr><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>(1)List（列表）是Python中使用<strong>最频繁</strong>的数据类型，列表可以完成大多数集合类的数据结构实现<br>(2)列表中元素的类型可以不相同，它支持<strong>数字，字符串甚至可以包含列表</strong>（所谓嵌套）<br>(3)列表是写在方括号<code>[]</code>之间、用<strong>逗号分隔开</strong>的元素列表<br>(4)和字符串一样，列表同样可以<strong>被索引和截取</strong>，列表被截取后返回一个包含所需元素的新列表<br><img src="https://i.ibb.co/282RKLZ/python3.png" alt="Python列表截取"><br>(5)加号<code>+</code>是列表连接运算符，星号<code>*</code>是重复操作</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;list = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span> ]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;tinylist = [<span class="number">123</span>, <span class="string">'runoob'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (list)            <span class="comment"># 输出完整列表</span></span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (list[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line">abcd</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (list[<span class="number">1</span><span class="symbol">:</span><span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line">[<span class="number">786</span>, <span class="number">2.23</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (list[<span class="number">2</span><span class="symbol">:</span>])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line">[<span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line">[<span class="number">123</span>, <span class="string">'runoob'</span>, <span class="number">123</span>, <span class="string">'runoob'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;print (list + tinylist) <span class="comment"># 连接列表</span></span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">'runoob'</span>]</span><br></pre></td></tr></table></figure><p>(6)与Python字符串不一样的是，列表中的<strong>元素是可以改变</strong>的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a[<span class="number">2</span><span class="symbol">:</span><span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a[<span class="number">2</span><span class="symbol">:</span><span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 [] </span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>(7)List内置了有很多方法，例如<code>append()</code>、<code>pop()</code>等等，这在后面会讲到</p><ul><li>List写在方括号之间，元素用逗号隔开</li><li>和字符串一样，list可以被索引和切片</li><li>List可以使用+操作符进行拼接</li><li>List中的元素是可以改变的</li></ul><p>(8)Python列表截取可以接收<strong>第三个参数</strong>，参数作用是<strong>截取的步长</strong>，以下实例在索引<code>1</code>到索引<code>4</code>的位置并设置为步长为`2（间隔一个位置）来截取字符串<br><img src="https://i.ibb.co/vd9W1nF/python4.png" alt="Python列表截取"><br>(9)如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(input)</span>:</span> </span><br><span class="line">      </span><br><span class="line">    <span class="comment"># 通过空格将字符串分隔符，把各个单词分隔为列表</span></span><br><span class="line">    inputWords = input.split(<span class="string">" "</span>)</span><br><span class="line">    print(inputWords)<span class="comment"># 输出：['I', 'like', 'runoob']</span></span><br><span class="line">    <span class="comment"># 翻转字符串</span></span><br><span class="line">    <span class="comment"># 假设列表 list = [1,2,3,4],  </span></span><br><span class="line">    <span class="comment"># list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样) </span></span><br><span class="line">    <span class="comment"># inputWords[-1::-1] 有三个参数</span></span><br><span class="line">    <span class="comment"># 第一个参数 -1 表示最后一个元素</span></span><br><span class="line">    <span class="comment"># 第二个参数为空，表示移动到列表末尾</span></span><br><span class="line">    <span class="comment"># 第三个参数为步长，-1 表示逆向</span></span><br><span class="line">    inputWords=inputWords[<span class="number">-1</span>::<span class="number">-1</span>]<span class="comment"># 列表逆置</span></span><br><span class="line">    print(inputWords)</span><br><span class="line">    <span class="comment"># 重新组合字符串</span></span><br><span class="line">    output = <span class="string">' '</span>.join(inputWords)<span class="comment"># 每个元素直接加个空格</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> output </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </span><br><span class="line">    input = <span class="string">'I like runoob'</span></span><br><span class="line">    rw = reverseWords(input) </span><br><span class="line">    print(rw)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'I'</span>, <span class="string">'like'</span>, <span class="string">'runoob'</span>]</span><br><span class="line">[<span class="string">'runoob'</span>, <span class="string">'like'</span>, <span class="string">'I'</span>]</span><br><span class="line">runoob like <span class="symbol">I</span></span><br></pre></td></tr></table></figure><h4 id="Python列表函数-amp-方法"><a href="#Python列表函数-amp-方法" class="headerlink" title="Python列表函数&amp;方法"></a>Python列表函数&amp;方法</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"># Python 列表</span><br><span class="line"></span><br><span class="line">testlist1 = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>]</span><br><span class="line">testlist2 = <span class="keyword">list</span>(<span class="string">'987123645'</span>)</span><br><span class="line">testlist3 = [<span class="string">'我最'</span>, <span class="string">'爱学习'</span>, <span class="string">'python'</span>]</span><br><span class="line"></span><br><span class="line"># Python有<span class="number">6</span>个序列的内置类型，但最常见的是列表和元组</span><br><span class="line"># 序列都可以进行的操作包括索引，切片，加，乘，检查成员</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1：'</span>, testlist1)  # testlist1： [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist2：'</span>, testlist2)  # testlist2： [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"></span><br><span class="line">testlist1[<span class="number">2</span>] = <span class="number">2001</span>  # 更新testlist1第三个元素</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1更新后的第三个元素为 :'</span>, testlist1[<span class="number">2</span>])  # testlist1更新后的第三个元素为 : <span class="number">2001</span></span><br><span class="line">del testlist1[<span class="number">2</span>]  # 删除testlist1第三个元素</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1删除第三个元素后为 :'</span>, testlist1)  # testlist1删除第三个元素后为 : [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">2000</span>]</span><br><span class="line"></span><br><span class="line"># Python列表脚本操作符：列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist2 长度为：'</span>, <span class="built_in">len</span>(testlist2))  # testlist2 长度为： <span class="number">9</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1 和 testlist2 组合后为：'</span>,</span><br><span class="line">      testlist1 + testlist2)  # testlist1 和 testlist2 组合后为： [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">2000</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1 重复输出3次：'</span>,</span><br><span class="line">      testlist1 * <span class="number">3</span>)  # testlist1 重复输出<span class="number">3</span>次： [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">2000</span>, <span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">2000</span>, <span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'3 是否在 testlist2中？'</span>, <span class="number">3</span> in testlist2)  # <span class="number">3</span> 是否在 testlist2中？ False</span><br><span class="line"># <span class="keyword">for</span> <span class="keyword">x</span> in testlist2:</span><br><span class="line"># <span class="keyword">print</span> (<span class="string">'testlist2迭代：'</span>,<span class="keyword">x</span>) # testlist2迭代： <span class="number">1</span>.....</span><br><span class="line"></span><br><span class="line"># Python列表函数&amp;方法</span><br><span class="line"># 函数</span><br><span class="line"># <span class="built_in">len</span>(<span class="keyword">list</span>)：返回列表元素个数</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'range(5) 列表长度为：'</span>, <span class="built_in">len</span>(<span class="built_in">range</span>(<span class="number">5</span>)))  # <span class="built_in">range</span>(<span class="number">5</span>) 列表长度为： <span class="number">5</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist2 列表长度为：'</span>, <span class="built_in">len</span>(testlist2))  # testlist2 列表长度为： <span class="number">9</span></span><br><span class="line"># <span class="built_in">max</span>(<span class="keyword">list</span>)：返回列表元素中的最大值</span><br><span class="line"># <span class="keyword">list</span>元素全部为字符串类型(<span class="built_in">string</span>)时，则比较的是比较的是每个字符串元素的第一个字符的 ASCII 的大小</span><br><span class="line"># <span class="keyword">list</span>元素全部为数字类型时，直接根据值的大小比较</span><br><span class="line"># <span class="keyword">list</span>元素为列表或者元组中的元素为数字类型和字符串类型混杂时，则无法比较</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist2 列表最大值为：'</span>, <span class="built_in">max</span>(testlist2))  # testlist2 列表最大值为： <span class="number">9</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist3 列表最大值为：'</span>, <span class="built_in">max</span>(testlist3))  # testlist3 列表最大值为： 爱学习</span><br><span class="line"># <span class="built_in">min</span>(<span class="keyword">list</span>)：返回列表元素中的最小值</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist2 列表最大值为：'</span>, <span class="built_in">min</span>(testlist2))  # testlist2 列表最大值为： <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist3 列表最大值为：'</span>, <span class="built_in">min</span>(testlist3))  # testlist3 列表最大值为： <span class="keyword">python</span></span><br><span class="line"># <span class="keyword">list</span>(seq)：将元组或字符串转换为列表</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'该元组列表元素为：'</span>, <span class="keyword">list</span>((<span class="number">123</span>, <span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>)))  # 该元组列表元素为： [<span class="number">123</span>, <span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>]</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'range(5) 列表元素为：'</span>, <span class="keyword">list</span>(<span class="built_in">range</span>(<span class="number">5</span>)))  # <span class="built_in">range</span>(<span class="number">5</span>) 列表元素为： [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"># 方法</span><br><span class="line"># <span class="keyword">list</span>.<span class="keyword">append</span>(obj)：在列表末尾添加新的对象，该方法无返回值，但是会修改原来的列表</span><br><span class="line">testlist3.<span class="keyword">append</span>(<span class="string">'aaa'</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist3 更新后为：'</span>, testlist3)  # testlist3 更新后为： [<span class="string">'我最'</span>, <span class="string">'爱学习'</span>, <span class="string">'python'</span>, <span class="string">'aaa'</span>]</span><br><span class="line"># <span class="keyword">list</span>.<span class="built_in">count</span>(obj)：用于统计某个元素在列表中出现的次数</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1 中Runoob出现次数为：'</span>, testlist1.<span class="built_in">count</span>(<span class="string">'Runoob'</span>))  #</span><br><span class="line"># <span class="keyword">list</span>.<span class="built_in">extend</span>(seq)：在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）,seq-元素列表，可以是列表、元组、集合、字典，若为字典,则仅会将键(key)作为元素依次添加至原列表的末尾</span><br><span class="line"># 该方法没有返回值，但会在已存在的列表中添加新的列表内容</span><br><span class="line">testlist1.<span class="built_in">extend</span>(testlist2)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1 和 testlist2 组合后为：'</span>,</span><br><span class="line">      testlist1)  # testlist1 和 testlist2 组合后为： [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"># <span class="keyword">list</span>.<span class="built_in">index</span>(<span class="keyword">x</span>[, start[, end]])：从列表中找出某个值第一个匹配项的索引位置，</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Taobao 索引值为：'</span>, [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>].<span class="built_in">index</span>(<span class="string">'Taobao'</span>))  # Taobao 索引值为 <span class="number">2</span></span><br><span class="line"># <span class="keyword">list</span>.<span class="keyword">insert</span>(<span class="built_in">index</span>, obj)：用于将指定对象插入列表的指定位置</span><br><span class="line"># 该方法没有返回值，但会在列表指定位置插入对象</span><br><span class="line">testlist1.<span class="keyword">insert</span>(<span class="number">1</span>, <span class="string">'Baidu'</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1 插入元素后为：'</span>,</span><br><span class="line">      testlist1)  # testlist1 插入元素后为： [<span class="string">'Google'</span>, <span class="string">'Baidu'</span>, <span class="string">'Runoob'</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"># ：移除列表中的一个元素（默认最后一个元素），并且返回该元素的值，索引值不能超过列表总长度，默认为 <span class="built_in">index</span>=-<span class="number">1</span>，删除最后一个列表值</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1 移除的元素为：'</span>, testlist1.<span class="keyword">pop</span>(<span class="number">1</span>))  # testlist1 移除的元素为： Baidu</span><br><span class="line"># <span class="keyword">list</span>.<span class="built_in">remove</span>(obj)：移除列表中某个值的第一个匹配项</span><br><span class="line"># 该方法没有返回值但是会移除列表中的某个值的第一个匹配项</span><br><span class="line">testlist1.<span class="built_in">remove</span>(<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1 更新后为：'</span>,</span><br><span class="line">      testlist1)  # testlist1 更新后为： [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Runoob'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"># <span class="keyword">list</span>.<span class="built_in">reverse</span>()：用于反向列表中元</span><br><span class="line"># 该方法没有返回值，但是会对列表的元素进行反向排序</span><br><span class="line">testlist1.<span class="built_in">reverse</span>()</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1 反转后为：'</span>, testlist1)  #</span><br><span class="line"># <span class="keyword">list</span>.<span class="keyword">sort</span>( key=None, <span class="built_in">reverse</span>=False)：对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数</span><br><span class="line"># key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序     <span class="built_in">reverse</span> -- 排序规则，<span class="built_in">reverse</span> = True 降序， <span class="built_in">reverse</span> = False 升序（默认）</span><br><span class="line"># 该方法没有返回值，但是会对列表的对象进行排序</span><br><span class="line">testlist2.<span class="keyword">sort</span>(<span class="built_in">reverse</span>=True)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist2 降序排列：'</span>, testlist2)  # testlist2 降序排列： [<span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'6'</span>, <span class="string">'5'</span>, <span class="string">'4'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>, <span class="string">'1'</span>]</span><br><span class="line">testlist2.<span class="keyword">sort</span>()</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist2 升序排列：'</span>, testlist2)  # testlist2 升序排列： [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def takeSecond(elem):  # 获取列表的第二个元素</span><br><span class="line">    <span class="keyword">return</span> elem[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">random = [(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]  # 列表</span><br><span class="line">random.<span class="keyword">sort</span>(key=takeSecond)  # 指定第二个元素排序</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'排序列表：'</span>, random)  # 排序列表： [(<span class="number">4</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"># <span class="keyword">list</span>.clear()：清空列表，类似于 del <span class="keyword">a</span>[:]</span><br><span class="line"># 该方法没有返回值</span><br><span class="line">testlist1.clear()</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist1 列表清空后为：'</span>, testlist1)  # testlist1 列表清空后为： []</span><br><span class="line"># <span class="keyword">list</span>.<span class="keyword">copy</span>()：用于复制列表，类似于 <span class="keyword">a</span>[:]，返回复制后的新列表</span><br><span class="line">testlist4 = testlist2.<span class="keyword">copy</span>()</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist2 后为：'</span>, testlist2)  # testlist2 后为： [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'testlist4 后为：'</span>, testlist4)  # testlist4 后为： [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><p>(1)元组（tuple）与列表类似，不同之处在于<strong>元组的元素不能修改</strong><br>(2)元组写在小括号<code>()</code>里，元素之间用<strong>逗号隔开</strong><br>(3)元组中的元素类型也<strong>可以不相同</strong><br>(4)元组与字符串类似，可以被索引且下标索引从0开始，-1为从末尾开始的位置，也可以进行截取(字符串可以看作一种特殊的元组)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(tup[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(tup[<span class="number">1</span><span class="symbol">:</span><span class="number">5</span>])</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; tup[<span class="number">0</span>] = <span class="number">11</span>  <span class="comment"># 修改元组元素的操作是非法的</span></span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="symbol">TypeError:</span> <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><p>(5)<code>tuple</code>的元素不可改变，但它<strong>可以包含可变的对象</strong>，比如list列表<br>(6)构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tup1</span> = ()    <span class="comment"># 空元组</span></span><br><span class="line"><span class="attr">tup2</span> = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure><p>(7)<code>string</code>、<code>list</code>和<code>tuple</code>都属于<code>sequence</code>（序列）</p><ul><li>与字符串一样，<strong>元组的元素不能修改</strong></li><li>元组也可以被索引和切片，方法一样</li><li>注意构造包含 0 或 1 个元素的元组的<strong>特殊语法规则</strong></li><li>元组也可以使用+操作符进行拼接</li></ul><h4 id="元组运算符与内置函数"><a href="#元组运算符与内置函数" class="headerlink" title="元组运算符与内置函数"></a>元组运算符与内置函数</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 元组与列表类似，不同之处在于元组的元素不能修改</span><br><span class="line"># 元组使用小括号，列表使用方括号。元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可</span><br><span class="line"></span><br><span class="line">tup1 = (<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>)</span><br><span class="line">print(<span class="string">'tup1：'</span>, tup1)  # tup1： (<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>)</span><br><span class="line">tup2 = tuple(<span class="string">'987123645'</span>)</span><br><span class="line">print(<span class="string">'tup2：'</span>, tup2)  # tup2： (<span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'6'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>)</span><br><span class="line">tup3 = <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"g"</span>, <span class="string">"f"</span>, <span class="string">"e"</span>, <span class="string">"h"</span>  # 不需要括号也可以</span><br><span class="line">print(<span class="string">'tup3：'</span>, tup3)  # tup3： (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'g'</span>, <span class="string">'f'</span>, <span class="string">'e'</span>, <span class="string">'h'</span>)</span><br><span class="line">tup4 = ()  # 创建空元组</span><br><span class="line">print(<span class="string">'tup4：'</span>, tup4)  # tup4： ()</span><br><span class="line">tup5 = <span class="number">50</span>,  # 元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用</span><br><span class="line">print(<span class="string">'tup5：'</span>, tup5)  # tup5： (<span class="number">50</span>,)</span><br><span class="line"></span><br><span class="line"># 元组中的元素值是不允许修改的，但我们可以对元组进行连接组合</span><br><span class="line">print(<span class="string">'tup1 + tup2：'</span>,</span><br><span class="line">      tup1 + tup2)  # tup1 + tup2： (<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'6'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"># 元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</span><br><span class="line">print(<span class="string">'tup3[2] is：'</span>, tup3[<span class="number">2</span>])  # tup3[<span class="number">2</span>] is： c</span><br><span class="line"># del tup3    # 删除元组</span><br><span class="line"># print(tup3) # NameError: name <span class="string">'tup'</span> is not defined</span><br><span class="line"></span><br><span class="line"># 元组运算符：元组对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表</span><br><span class="line">print(<span class="string">'tup2 长度为：'</span>, len(tup2))  # tup2 长度为： <span class="number">9</span></span><br><span class="line">print(<span class="string">'tup1 和 tup2 组合后为：'</span>,</span><br><span class="line">      tup1 + tup2)  # tup1 和 tup2 组合后为： (<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'6'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>)</span><br><span class="line">print(<span class="string">'tup1 重复输出3次：'</span>,</span><br><span class="line">      tup1 * <span class="number">3</span>)  # tup1 重复输出<span class="number">3</span>次： (<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>, <span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>, <span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>, <span class="string">'Runoob'</span>)</span><br><span class="line">print(<span class="string">'3 是否在 tup2中？'</span>, <span class="string">'3'</span> <span class="keyword">in</span> tup2)  # <span class="number">3</span> 是否在 tup2中？ <span class="literal">True</span></span><br><span class="line">for x <span class="keyword">in</span> tup2:</span><br><span class="line">    print(<span class="string">'tup2迭代：'</span>, x)  # tup2迭代： <span class="number">9.</span>....</span><br><span class="line"></span><br><span class="line"># 元组内置函数</span><br><span class="line"># len(tuple)：计算元组元素个数</span><br><span class="line">print(<span class="string">'tup1 元素个数为：'</span>, len(tup1))  # tup1 元素个数为： <span class="number">5</span></span><br><span class="line"># max(tuple)：返回元组中元素最大值</span><br><span class="line"># tuple元素全部为字符串类型(string)时，则比较的是比较的是每个字符串元素的第一个字符的 ASCII 的大小</span><br><span class="line"># tuple元素全部为数字类型时，直接根据值的大小比较</span><br><span class="line"># tuple元素为列表或者元组中的元素为数字类型和字符串类型混杂时，则无法比较</span><br><span class="line">print(<span class="string">'tup2 最大值为：'</span>, max(tup2))  # tup2 最大值为： <span class="number">9</span></span><br><span class="line"># min(tuple)：返回元组中元素最小值</span><br><span class="line">print(<span class="string">'tup3 最小值为：'</span>, min(tup3))  # tup3 最小值为： a</span><br><span class="line"># tuple(iterable)：将可迭代系列转换为元组</span><br><span class="line">print(<span class="string">'tup2 ：'</span>, tup2)  # tup2 ： (<span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'6'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"># 关于元组是不可变的：元组的不可变指的是元组所指向的内存中的内容不可变</span><br><span class="line">tup = (<span class="string">'r'</span>, <span class="string">'u'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'b'</span>)</span><br><span class="line">print(<span class="string">'tup：'</span>,tup)#</span><br><span class="line"># tup[<span class="number">0</span>] = <span class="string">'g'</span>     # 不支持修改元素，会报错：TypeError: <span class="string">'tuple'</span> object does not support item assignment</span><br><span class="line">print(<span class="string">'查看内存地址：'</span>,id(tup))     # 查看内存地址： <span class="number">2464144715208</span></span><br><span class="line">tup = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   # 内存地址发生了改变</span><br><span class="line">print(<span class="string">'查看内存地址：'</span>,id(tup))     # 查看内存地址： <span class="number">2464146173240</span></span><br></pre></td></tr></table></figure><hr><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>(1)集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作<strong>元素或是成员</strong><br>(2)基本功能是进行<strong>成员关系测试和删除重复元素</strong><br>(3)可以使用大括号<code>{ }</code>或者<code>set()</code>函数创建集合，注意：创建一个<strong>空集合必须用<code>set()</code></strong>而不是<code>{ }</code>，因为<code>{ }</code>是用来<strong>创建一个空字典</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sites = &#123;<span class="string">'Google'</span>, <span class="string">'Taobao'</span>, <span class="string">'Runoob'</span>, <span class="string">'Facebook'</span>, <span class="string">'Zhihu'</span>, <span class="string">'Baidu'</span>, <span class="string">'Google'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(sites)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Runoob'</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Runoob 在集合中'</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Runoob 不在集合中'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">'alacazam'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'集合a为：'</span>,a,<span class="string">'  集合b为：'</span>,b)</span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;'Taobao', 'Google', 'Facebook', 'Runoob', 'Zhihu', 'Baidu'&#125;</span><br><span class="line">Runoob 在集合中</span><br><span class="line">集合a为： &#123;'b', 'a', 'd', 'r', 'c'&#125;   集合b为： &#123;'c', 'a', 'm', 'l', 'z'&#125;</span><br><span class="line">&#123;'b', 'r', 'd'&#125;</span><br><span class="line">&#123;'b', 'r', 'm', 'l', 'z', 'c', 'd', 'a'&#125;</span><br><span class="line">&#123;'c', 'a'&#125;</span><br><span class="line">&#123;'m', 'b', 'r', 'l', 'z', 'd'&#125;</span><br></pre></td></tr></table></figure><h4 id="集合的基本操作"><a href="#集合的基本操作" class="headerlink" title="集合的基本操作"></a>集合的基本操作</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 集合（set）是一个无序的不重复元素序列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建集合</span><br><span class="line">set1 = &#123;<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>&#125;  # 集合去重功能，去除重复的 apple ;快速判断元素是否在集合内</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>&#125;</span><br><span class="line">print(<span class="string">'orange 在 set1 内吗？：'</span>, <span class="string">'orange'</span> <span class="keyword">in</span> set1)  # orange 在 set1 内吗？： <span class="literal">True</span></span><br><span class="line">set2 = set()  # 创建空集合</span><br><span class="line">print(<span class="string">'set2：'</span>, set2)  # set2： set()</span><br><span class="line"></span><br><span class="line"># 集合的基本操作：添加元素add()、移除元素remove()、计算集合元素个数len()、清空集合clear()、判断元素是否在集合中存在 <span class="keyword">in</span> </span><br><span class="line"># s.add( x )：将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作，该函数没有任何返回值</span><br><span class="line">set1.add(<span class="number">123</span>)</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'orange'</span>, <span class="number">123</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;</span><br><span class="line"># s.update( x )：添加元素，且参数可以是列表，元组，字典等，该函数没有任何返回值</span><br><span class="line">set1.update([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'orange'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line"># s.remove( x )：将元素 x 从集合 s 中移除，如果元素不存在，则会发生KeyError错误，该函数没有任何返回值</span><br><span class="line">set1.remove(<span class="number">123</span>)</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'c'</span>, <span class="string">'banana'</span>, <span class="string">'a'</span>, <span class="string">'apple'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"># s.discard( x )：移除集合中的元素，且如果元素不存在，不会发生错误，该函数没有任何返回值</span><br><span class="line">set1.discard(<span class="number">246</span>)</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'c'</span>, <span class="string">'banana'</span>, <span class="string">'a'</span>, <span class="string">'apple'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"># s.pop()：对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除并返回被删除的元素</span><br><span class="line">print(<span class="string">'set1 移除的元素为：'</span>, set1.pop())  # set1 移除的元素为： banana</span><br><span class="line"></span><br><span class="line"># len(s)：计算集合 s 元素个数</span><br><span class="line">print(<span class="string">'set1 的元素个数为：'</span>, len(set1))  # set1 的元素个数为： <span class="number">6</span></span><br><span class="line"></span><br><span class="line"># s.clear()：清空集合 s，该函数没有任何返回值</span><br><span class="line">set1.clear()</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： set()</span><br></pre></td></tr></table></figure><h4 id="集合的内置方法"><a href="#集合的内置方法" class="headerlink" title="集合的内置方法"></a>集合的内置方法</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"># 创建集合</span><br><span class="line">set1 = &#123;<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>&#125;  # 集合去重功能，去除重复的 apple ;快速判断元素是否在集合内</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>&#125;</span><br><span class="line">print(<span class="string">'orange 在 set1 内吗？：'</span>, <span class="string">'orange'</span> <span class="keyword">in</span> set1)  # orange 在 set1 内吗？： <span class="literal">True</span></span><br><span class="line">set2 = set()  # 创建空集合</span><br><span class="line">print(<span class="string">'set2：'</span>, set2)  # set2： set()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 集合内置方法</span><br><span class="line"># s.add( x )：将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作，该函数没有任何返回值</span><br><span class="line">set1.add(<span class="number">123</span>)</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'orange'</span>, <span class="number">123</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;</span><br><span class="line"># s.update( x )：添加元素，且参数可以是列表，元组，字典等，该函数没有任何返回值</span><br><span class="line">set1.update([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'orange'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="number">123</span>&#125;</span><br><span class="line"># set.copy()：copy() 方法用于拷贝一个集合，该函数没有任何返回值</span><br><span class="line">set2=set1.copy()</span><br><span class="line">print(<span class="string">'set2 拷贝 set1 为：'</span>, set2)  # </span><br><span class="line"></span><br><span class="line"># x.difference(y)：difference() 方法用于返回集合的差集，即返回的集合元素包含在 x 中，但不包含在 y(方法的参数)中</span><br><span class="line">x = &#123;<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"cherry"</span>&#125;</span><br><span class="line">y = &#123;<span class="string">"google"</span>, <span class="string">"microsoft"</span>, <span class="string">"apple"</span>&#125;</span><br><span class="line">print(<span class="string">'集合x和集合y的差集为：'</span>, x.difference(y))  # 集合x和集合y的差集为： &#123;<span class="string">'banana'</span>, <span class="string">'cherry'</span>&#125;</span><br><span class="line">print(<span class="string">'集合x和集合y的差集为：'</span>, x - y)  # 集合x和集合y的差集为： &#123;<span class="string">'banana'</span>, <span class="string">'cherry'</span>&#125;</span><br><span class="line"># x.difference_update(y)：在集合x中移除两个集合中都存在的元素，该函数没有任何返回值</span><br><span class="line">x.difference_update(y)</span><br><span class="line">print(<span class="string">'集合 x 为：'</span>, x)  # 集合 x 为： &#123;<span class="string">'banana'</span>, <span class="string">'cherry'</span>&#125;</span><br><span class="line"></span><br><span class="line"># set.union(set1, set2...)：返回两个或多个集合的并集，即包含了所有集合的元素，重复的元素只会出现一次</span><br><span class="line">x = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">y = set(<span class="string">'alacazam'</span>)</span><br><span class="line">print(<span class="string">'x 和 y 的并集为：'</span>, x.union(y))  # x 和 y 的并集为： &#123;<span class="string">'l'</span>, <span class="string">'z'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'m'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line"></span><br><span class="line"># set.intersection(set1, set2 ... etc)：返回两个或更多集合中都包含的元素，即交集</span><br><span class="line">print(<span class="string">'集合x和集合y的交集为：'</span>, x.intersection(y))  # 集合x和集合y的交集为： &#123;<span class="string">'c'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line">print(<span class="string">'集合x和集合y的交集为：'</span>, x &amp; y)  # 集合x和集合y的交集为： &#123;<span class="string">'c'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line"># set.intersection_update(set1, set2 ... etc)：在集合x中保留所有集合的交集，该函数没有任何返回值</span><br><span class="line">x.intersection_update(y)</span><br><span class="line">print(<span class="string">'集合 x 为：'</span>, x)  # 集合 x 为： &#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"></span><br><span class="line"># x.symmetric_difference(y)：返回两个集合中不重复的元素集合，即会移除两个集合中都存在的元素</span><br><span class="line">x = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">y = set(<span class="string">'alacazam'</span>)</span><br><span class="line">print(<span class="string">'集合x集合y中不同时存在的元素为：'</span>, x.symmetric_difference(y))  # 集合x集合y中不同时存在的元素为： &#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>&#125;</span><br><span class="line">print(<span class="string">'集合x集合y中不同时存在的元素为：'</span>, x ^ y)  # 集合x集合y中不同时存在的元素为： &#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>&#125;</span><br><span class="line"># x.symmetric_difference_update(y)：x集合中存放不重复的元素集合，该函数没有任何返回值</span><br><span class="line">x.symmetric_difference_update(y)</span><br><span class="line">print(<span class="string">'集合 x 为：'</span>, x)  # 集合 x 为： &#123;<span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>&#125;</span><br><span class="line"></span><br><span class="line"># x.isdisjoint(y)：用于判断两个集合是否包含相同的元素，如果没有返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span></span><br><span class="line">x = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">y = set(<span class="string">'alacazam'</span>)</span><br><span class="line">print(<span class="string">'集合x和集合y没有包含相同的元素？：'</span>, x.isdisjoint(y))  # 集合x和集合y没有包含相同的元素？： <span class="literal">False</span></span><br><span class="line"># x.issubset(y)：判断集合x的所有元素是否都包含在指定集合y中(集合x是否是集合y的子集)，如果是则返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span></span><br><span class="line">print(<span class="string">'集合x是否是集合y的子集？：'</span>, x.issubset(y))  # 集合x是否是集合y的子集？： <span class="literal">False</span></span><br><span class="line"># x.issuperset(y)：判断集合y的所有元素是否都包含在集合x中(集合y是否是集合x的子集)，如果是则返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span></span><br><span class="line">print(<span class="string">'集合x和集合y是否包含相同的元素？：'</span>, x.issuperset(y))  # 集合x和集合y是否包含相同的元素？： <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"># s.remove( x )：将元素 x 从集合 s 中移除，如果元素不存在，则会发生KeyError错误，该函数没有任何返回值</span><br><span class="line">set1.remove(<span class="number">123</span>)</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'c'</span>, <span class="string">'banana'</span>, <span class="string">'a'</span>, <span class="string">'apple'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"># s.discard( x )：移除集合中的元素，且如果元素不存在，不会发生错误，该函数没有任何返回值</span><br><span class="line">set1.discard(<span class="number">246</span>)</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： &#123;<span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'c'</span>, <span class="string">'banana'</span>, <span class="string">'a'</span>, <span class="string">'apple'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"># s.pop()：对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除并返回被删除的元素</span><br><span class="line">print(<span class="string">'set1 移除的元素为：'</span>, set1.pop())  # set1 移除的元素为： banana</span><br><span class="line"># s.clear()：清空集合 s，该函数没有任何返回值</span><br><span class="line">set1.clear()</span><br><span class="line">print(<span class="string">'set1：'</span>, set1)  # set1： set()</span><br></pre></td></tr></table></figure><hr><h3 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h3><p>(1)字典（dictionary）是Python中另一个非常有用的内置数据类型<br>(2)列表是有序的对象集合，字典是<strong>无序的对象集合</strong>。两者之间的区别在于：<strong>字典当中的元素是通过键来存取的</strong>，而不是通过偏移存取<br>(3)字典是一种映射类型，字典用<code>{ }</code>标识，它是一个无序的<code>键(key):值(value)</code>的集合<br>(4)键(key)必须使用不可变类型，在同一个字典中，键(key)必须是唯一的  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"1 - 菜鸟教程"</span></span><br><span class="line">dict[2]     = <span class="string">"2 - 菜鸟工具"</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'runoob'</span>,<span class="string">'code'</span>:1, <span class="string">'site'</span>: <span class="string">'www.runoob.com'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (dict[<span class="string">'one'</span>])       <span class="comment"># 输出键为 'one' 的值</span></span><br><span class="line"><span class="built_in">print</span> (dict[2])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> - 菜鸟教程</span><br><span class="line"><span class="number">2</span> - 菜鸟工具</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'runoob'</span>, <span class="string">'code'</span>: <span class="number">1</span>, <span class="string">'site'</span>: <span class="string">'www.runoob.com'</span>&#125;</span><br><span class="line"><span class="function"><span class="title">dict_keys</span><span class="params">([<span class="string">'name'</span>, <span class="string">'code'</span>, <span class="string">'site'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">dict_values</span><span class="params">([<span class="string">'runoob'</span>, <span class="number">1</span>, <span class="string">'www.runoob.com'</span>])</span></span></span><br></pre></td></tr></table></figure><p>(5)构造函数<code>dict()</code>可以直接从键值对序列中构建字典如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; dict([(<span class="string">'Runoob'</span>, <span class="number">1</span>), (<span class="string">'Google'</span>, <span class="number">2</span>), (<span class="string">'Taobao'</span>, <span class="number">3</span>)])</span><br><span class="line">&#123;<span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>, <span class="string">'Taobao'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; &#123;<span class="symbol">x:</span> x**<span class="number">2</span> for x in (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; dict(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>, <span class="string">'Taobao'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>(6)字典类型也有一些内置的函数，例如<code>clear()、keys()、values()</code>等</p><ul><li>字典是一种映射类型，它的元素是键值对</li><li>字典的关键字必须为不可变类型，且不能重复</li><li>创建空字典使用<code>{ }</code></li></ul><h4 id="字典运算符与内置函数"><a href="#字典运算符与内置函数" class="headerlink" title="字典运算符与内置函数"></a>字典运算符与内置函数</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"># 字典是另一种可变容器模型，且可存储任意类型对象</span><br><span class="line"># 字典的每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号(&#123;&#125;)中</span><br><span class="line"># 键必须是唯一的，但值则不必。值可以取任何数据类型，但键必须是不可变的，如字符串，数字或字典</span><br><span class="line"></span><br><span class="line"># 创建字典</span><br><span class="line">dict1 = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;  # 键值对创建字典</span><br><span class="line">print(<span class="string">'dict1：'</span>, dict1)  # dict1： &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line">print(<span class="string">"dict1['Name']: "</span>, dict1[<span class="string">'Name'</span>], <span class="string">"\tdict1['Class']: "</span>,</span><br><span class="line">      dict1[<span class="string">'Class'</span>])  # dict1[<span class="string">'Name'</span>]:  Runoob  dict1[<span class="string">'Class'</span>]:  First</span><br><span class="line">dict2 = dict([(<span class="string">'Runoob'</span>, <span class="number">1</span>), (<span class="string">'Google'</span>, <span class="number">2</span>), (<span class="string">'Taobao'</span>, <span class="number">3</span>)])  # 构造函数 dict() 创建字典</span><br><span class="line">print(<span class="string">'dict2：'</span>, dict2)  # dict2： &#123;<span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>, <span class="string">'Taobao'</span>: <span class="number">3</span>&#125;</span><br><span class="line">dict3 = dict(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)  # 构造函数 dict() 创建字典</span><br><span class="line">print(<span class="string">'dict3：'</span>, dict3)  # dict2： &#123;<span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>, <span class="string">'Taobao'</span>: <span class="number">3</span>&#125;</span><br><span class="line">dict4 = &#123;x: x ** <span class="number">2</span> for x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;  #</span><br><span class="line">print(<span class="string">'dict4：'</span>, dict4)  # dict4： &#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line">dict5 = &#123;&#125;  # 创建空字典</span><br><span class="line">print(<span class="string">'dict5：'</span>, dict5)  # dict4： &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 字典中的元素值是允许修改的，添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</span><br><span class="line">dict1[<span class="string">'Age'</span>] = <span class="number">8</span>  # 更新 Age</span><br><span class="line">dict1[<span class="string">'School'</span>] = <span class="string">"清华大学"</span>  # 添加信息</span><br><span class="line">print(<span class="string">'dict1：'</span>, dict1)  # dict1： &#123;<span class="string">'School'</span>: <span class="string">'清华大学'</span>, <span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">8</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"># 删除字典元素</span><br><span class="line">del dict1[<span class="string">'Name'</span>]  # 删除键 <span class="string">'Name'</span></span><br><span class="line">print(<span class="string">'dict1：'</span>, dict1)  # dict1： &#123;<span class="string">'School'</span>: <span class="string">'清华大学'</span>, <span class="string">'Age'</span>: <span class="number">8</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line">dict1.clear()  # 清空字典</span><br><span class="line">print(<span class="string">'dict1：'</span>, dict1)  # dict1： &#123;&#125;</span><br><span class="line"># del dict1         # 删除字典</span><br><span class="line"># print(<span class="string">'dict1：'</span>, dict1)  # 产生报错：NameError: name <span class="string">'dict1'</span> is not defined</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 字典内置函数&amp;方法</span><br><span class="line"># 内置函数</span><br><span class="line"># len(dict)：计算字典元素个数，即键的总数</span><br><span class="line">print(<span class="string">'dict2 长度为：'</span>, len(dict2))  # dict2 长度为： <span class="number">3</span></span><br><span class="line"># str(dict)：输出字典，以可打印的字符串表示</span><br><span class="line">print(<span class="string">'dict2 为：'</span>, str(dict2))  # dict2 为： &#123;<span class="string">'Taobao'</span>: <span class="number">3</span>, <span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>&#125;</span><br><span class="line"># type(variable)：返回输入的变量类型，如果变量是字典就返回字典类型</span><br><span class="line">print(<span class="string">'dict2 类型为：'</span>, type(dict2))  # dict2 类型为： &lt;<span class="keyword">class</span> <span class="string">'dict'</span>&gt;</span><br><span class="line"></span><br><span class="line"># 内置方法</span><br><span class="line"># dict.clear()：clear() 函数用于删除字典内所有元素，该函数没有任何返回值</span><br><span class="line">dict3.clear()</span><br><span class="line">print(<span class="string">'dict3 为：'</span>, str(dict3))  # dict3 为： &#123;&#125;</span><br><span class="line"># dict.copy()：copy() 函数返回一个字典的浅复制</span><br><span class="line">dict3 = dict2.copy()</span><br><span class="line">print(<span class="string">'dict3 copy dict2 后为：'</span>, dict3)  #</span><br><span class="line"># 直接赋值、浅拷贝和深度拷贝解析</span><br><span class="line">dic1 = &#123;<span class="string">'user'</span>: <span class="string">'runoob'</span>, <span class="string">'num'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">dic2 = dic1  # 浅拷贝: 引用对象</span><br><span class="line">dic3 = dic1.copy()  # 浅拷贝：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span><br><span class="line">dic1[<span class="string">'user'</span>] = <span class="string">'root'</span>  # 修改 dic1 数据</span><br><span class="line">dic1[<span class="string">'num'</span>].remove(<span class="number">1</span>)  # 修改 dic1 数据</span><br><span class="line"># dict2 其实是 dict1 的引用（别名），所以输出结果都是一致的，dict3 父对象进行了深拷贝，不会随dict1 修改而修改，子对象是浅拷贝所以随 dict1 的修改而修改</span><br><span class="line">print(<span class="string">'dic1 为：'</span>, dic1)  # dic1 为： &#123;<span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="string">'user'</span>: <span class="string">'root'</span>&#125;</span><br><span class="line">print(<span class="string">'dic2 为：'</span>, dic2)  # dic2 为： &#123;<span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="string">'user'</span>: <span class="string">'root'</span>&#125;</span><br><span class="line">print(<span class="string">'dic3 为：'</span>, dic3)  # dic3 为： &#123;<span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="string">'user'</span>: <span class="string">'runoob'</span>&#125;</span><br><span class="line"></span><br><span class="line"># dict.fromkeys(seq[, value])： fromkeys() 函数用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值(默认为None)，该方法返回一个新字典</span><br><span class="line">print(<span class="string">'dict 为：'</span>, dict.fromkeys((<span class="string">'k1'</span>, <span class="string">'k2'</span>, <span class="string">'k3'</span>), <span class="string">'a'</span>))  # dict 为： &#123;<span class="string">'k3'</span>: <span class="string">'a'</span>, <span class="string">'k2'</span>: <span class="string">'a'</span>, <span class="string">'k1'</span>: <span class="string">'a'</span>&#125;</span><br><span class="line"># dict.get(key, default=None)：get() 函数返回指定键的值，如果值不在字典中返回默认值(默认为None)</span><br><span class="line">print(<span class="string">'dict2 的 Google 为：'</span>, dict2.get(<span class="string">'Google'</span>))  # dict2 的 Google 为： <span class="number">2</span></span><br><span class="line"># print(<span class="string">'dict2 的 abc 为：'</span>, dict2[<span class="string">'abc'</span>])# abc对应的值不存在，返回错误：KeyError: <span class="string">'abc'</span></span><br><span class="line"># key <span class="keyword">in</span> dict：<span class="keyword">in</span> 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回 true，否则返回 false，not <span class="keyword">in</span> 操作符刚好相反</span><br><span class="line">print(<span class="string">'Google 在 dict2 中：'</span>, <span class="string">'Google'</span> <span class="keyword">in</span> dict2)  # Google 在 dict2 中： <span class="literal">True</span></span><br><span class="line"># dict.items()：items() 方法以列表返回可遍历的(键, 值) 元组数组</span><br><span class="line">print(<span class="string">'dict2 为：'</span>, dict2.items())  #</span><br><span class="line"># dict.keys()：keys() 方法返回一个可迭代对象，可以使用 list() 来转换为列表</span><br><span class="line">print(<span class="string">'dict2 的keys为：'</span>, dict2.keys())  # dict2 的keys为： dict_keys([<span class="string">'Runoob'</span>, <span class="string">'Google'</span>, <span class="string">'Taobao'</span>])</span><br><span class="line">print(<span class="string">'dict2 的keys为：'</span>, list(dict2.keys()))  # dict2 的keys为： [<span class="string">'Runoob'</span>, <span class="string">'Google'</span>, <span class="string">'Taobao'</span>]</span><br><span class="line"># dict.values()：values() 方法返回一个迭代器，可以使用 list() 来转换为列表，列表为字典中的所有值</span><br><span class="line">print(<span class="string">'dict2 的values为：'</span>, dict2.values())  # dict2 的values为： dict_values([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line">print(<span class="string">'dict2 的values为：'</span>, list(dict2.values()))  # dict2 的values为： [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"># dict.setdefault(key, default=None)： setdefault() 方法和 get()方法 类似, 如果键(key)不已经存在于字典中，将会添加键并将值设为默认值(default),如果 key 在 字典中，返回对应的值</span><br><span class="line">print(<span class="string">'dict2 的 Google 为：'</span>, dict2.setdefault(<span class="string">'Google'</span>, <span class="number">888</span>))  # dict2 的 Google 为： <span class="number">2</span></span><br><span class="line">print(<span class="string">'dict2 的 abc 为：'</span>, dict2.setdefault(<span class="string">'abc'</span>, <span class="number">666</span>))  # dict2 的 abc 为： <span class="number">666</span></span><br><span class="line"># dict.pop(key[,default])：  pop() 方法删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值，如key不存在且无default只，会报错KeyError: <span class="number">3</span></span><br><span class="line">print(<span class="string">'dict2 被删除的值为：'</span>, dict2.pop(<span class="string">'Google'</span>, <span class="number">888</span>))  # dict2 被删除的值为： <span class="number">2</span></span><br><span class="line">print(<span class="string">'dict2 被删除的值为：'</span>, dict2.pop(<span class="string">'abc'</span>, <span class="number">666</span>))  # dict2 被删除的值为： <span class="number">666</span></span><br><span class="line"># dict.popitem()：popitem() 方法随机返回并删除字典中的最后一对键和值。返回一个键值对(key,value)形式，如果字典已经为空，却调用了此方法，就报出KeyError异常</span><br><span class="line">print(<span class="string">'dict4 为：'</span>, dict4)  # dict4 为： &#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line">print(<span class="string">'dict4 popitem 后为：'</span>, dict4.popitem())  # dict4 popitem 后为： (<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">print(<span class="string">'dict4 为：'</span>, dict4)  # dict4 为： &#123;<span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"># dict.update(dict2)： update() 函数把字典参数 dict2 的 key/value(键/值) 对更新到字典 dict 里，该方法没有任何返回值</span><br><span class="line">dict1 = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">'Age'</span>: <span class="string">'88'</span>, <span class="string">'School'</span>: <span class="string">'清华大学'</span>&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line">print(<span class="string">'dict1 更新后为：'</span>, dict1)  # dict1 更新后为： &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'School'</span>: <span class="string">'清华大学'</span>, <span class="string">'Age'</span>: <span class="string">'88'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="直接赋值、浅拷贝和深度拷贝解析"><a href="#直接赋值、浅拷贝和深度拷贝解析" class="headerlink" title="直接赋值、浅拷贝和深度拷贝解析"></a>直接赋值、浅拷贝和深度拷贝解析</h4><p><img src="https://i.ibb.co/M7pPcXm/python5.png" alt="直接赋值、浅拷贝和深度拷贝解析"></p><hr><h3 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h3><p>(1)<br>(2)</p><pre><code>函数            |     描述--              |   :--: </code></pre><p>int(x [,base])             |     将 x 转换为一个整数(x为<strong>字符串或数字</strong>，base为<strong>进制数，默认十进制</strong>)<br>float(x)                 |     将 x 转换到一个浮点数(x为<strong>整数或字符串</strong>)<br>complex(real [,imag])    |    创建一个复数(real为<strong>int, long, float或字符串</strong>，imag为<strong>int, long, float</strong>)<br>str(x)                     |     将对象 x 转换为字符串(x为<strong>object对象</strong>)<br>repr(x)                    |    将对象 x 转换为表达式字符串(x为<strong>object对象</strong>)<br>eval(str)                |    用来计算在字符串中的有效<strong>Python字符串表达式</strong>,并返回一个对象<br>tuple(s)                |    将序列 s 转换为一个元组(s为要转换为元组的<strong>可迭代序列</strong>)<br>list(s)                    |    将序列 s 转换为一个列表(s为要转换为列表的<strong>元组或字符串</strong>)<br>set(s)                    |    转换为可变集合(s为要转换为元组的<strong>可迭代序列</strong>)<br>dict(d)                    |    创建一个字典，d 必须是一个<strong>(key, value)元组序列</strong><br>frozenset(s)            |    转换为不可变集合(s为<strong>可迭代序列</strong>，比如列表、字典、元组等等)<br>chr(x)                    |    将一个整数转换为一个字符(x可以是<strong>10进制</strong>也可以是<strong>16进制</strong>的形式的整数，范围在<strong>0～255</strong>之内)<br>ord(x)                    |    将一个字符转换为它的整数值(x为字符，返回对应的<strong>ASCII数值</strong>，或者<strong>Unicode</strong>数值)<br>hex(x)                    |    将一个整数转换为一个十六进制字符串(x为<strong>10进制整数</strong>)<br>oct(x)                    |    将一个整数转换为一个八进制字符串(x为<strong>整数</strong>)<br>函数具体用法可参考：<a href="https://www.runoob.com/python/python-built-in-functions.html" target="_blank" rel="noopener">Python 内置函数</a></p><hr><h3 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h3><p>(1)<br>(2)<br>  运算符                    |     描述<br>    –                      |   :–:<br>**                            |    指数 (最高优先级)<br>~ + -                        |    按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</p><ul><li>/ % //                    |    乘，除，求余数和取整除</li></ul><ul><li><ul><li>|    加法减法<blockquote><blockquote><p>&lt;&lt;                        |    右移，左移运算符<br>&amp;                            |    位 ‘AND’<br>^ |                            |    位运算符<br>&lt;= &lt; &gt; &gt;=                    |    比较运算符<br>== !=                        |    等于运算符<br>= %= /= //= -= += <em>= *</em>=    |    赋值运算符<br>is is not                    |    身份运算符<br>in not in                    |    成员运算符<br>not and or                    |    逻辑运算符</p></blockquote></blockquote></li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建;&lt;br&gt;在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://luxiong-github.github.io/categories/Python/"/>
    
      <category term="Study" scheme="https://luxiong-github.github.io/categories/Python/Study/"/>
    
    
      <category term="python" scheme="https://luxiong-github.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python3基础语法</title>
    <link href="https://luxiong-github.github.io/2020/03/01/python/python01/"/>
    <id>https://luxiong-github.github.io/2020/03/01/python/python01/</id>
    <published>2020-03-01T15:11:38.000Z</published>
    <updated>2020-06-02T07:59:05.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>python学习第一章，简单介绍了python的一些基础语法…</p></blockquote><a id="more"></a><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>(1)默认情况下，<code>Python 3</code>源码文件以<code>UTF-8</code>编码，所有字符串都是<code>unicode</code>字符串。 当然你也可以为源码文件指定不同的编码:</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*- coding: cp-1252 -*-</span></span><br></pre></td></tr></table></figure><p>上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语</p><hr><h3 id="Python-标识符"><a href="#Python-标识符" class="headerlink" title="Python 标识符"></a>Python 标识符</h3><p>(1)在 Python 里，标识符由<code>字母、数字、下划线</code>组成。<br>(2)在 Python 中，所有标识符可以包括<code>英文、数字以及下划线(_)</code>，但<code>不能以数字</code>开头。<br>(3)Python 中的标识符是<code>区分大小写</code>的。<br>(4)以下划线开头的标识符是有特殊意义的。以单下划线开头 <code>_foo</code>   的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <code>from xxx import *</code>而导入。<br>(5)以双下划线开头的 <code>__foo</code> 代表类的私有成员，以双下划线开头和结尾的 <code>__foo__</code> 代表 <code>Python</code> 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。<br>(6)<code>Python</code> 可以同一行显示多条语句，方法是用分号<code>;</code>分开，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">'hello'</span>);<span class="keyword">print</span> (<span class="string">'runoob'</span>);</span><br><span class="line">hello</span><br><span class="line">runoob</span><br></pre></td></tr></table></figure><hr><h3 id="Python-保留字符"><a href="#Python-保留字符" class="headerlink" title="Python 保留字符"></a>Python 保留字符</h3><p>(1)python2保留字：下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。<br>所有 Python 的关键字只包含<strong>小写字母</strong><br>and           |     exec    |    not<br>    –  |   :–:    |   –:<br>assert    |     finally    |    or<br>break    |    for        |    pass<br>class    |    from    |    print<br>continue|    global    |    raise<br>def        |    if        |    return<br>del        |    import    |    try<br>elif    |    in        |    while<br>else    |    is        |    with<br>except    |    lambda    |    yield<br>(2)python3保留字：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import keyword</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; keyword.kwlist</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="行和缩进"><a href="#行和缩进" class="headerlink" title="行和缩进"></a>行和缩进</h3><p>(1)Python 的代码块不使用大括号<code>{}</code>来控制类，函数以及其他逻辑判断<br>(2)python 最具特色的就是<strong>用缩进来写模块</strong><br>(3)缩进的空白数量是<strong>可变</strong>的，但是所有代码块语句<strong>必须包含相同的缩进空白数量</strong>，这个必须严格执行</p><p>正确写法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"False"</span>)</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"Answer"</span>)</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"Answer"</span>)    # 采用空格缩进</span><br><span class="line">    # 没有严格缩进，在执行时会报错:IndentationError: unindent does <span class="keyword">not</span> match any outer indentation level</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"False"</span>)       # 采用tab缩进</span><br></pre></td></tr></table></figure><p>(4)<code>IndentationError: unindent does not match any outer indentation level</code>错误表明，你使用的缩进方式不一致，有的是<code>tab</code>键缩进，有的是空格缩进，改为一致即可<br>(5)如果是<code>IndentationError: unexpected indent</code>错误, 则 python 编译器是在告诉你”Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题”，所有 python 对格式要求非常严格。<br>(6)在 Python 的代码块中<strong>必须使用相同数目的行首缩进空格数</strong>。</p><blockquote><p>注：建议在每个缩进层次使用 单个制表符 或 两个空格 或 四个空格 , 切记不能混用</p></blockquote><hr><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>(1)Python语句中一般以<strong>新行</strong>作为语句的结束符，但是我们可以使用斜杠（ \）将一行的语句分为多行显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>total = <span class="string">'item_one'</span> + \</span><br><span class="line"><span class="meta">... </span>        <span class="string">'item_two'</span> + \</span><br><span class="line"><span class="meta">... </span>        <span class="string">'item_three'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(total)</span><br><span class="line">item_oneitem_twoitem_three</span><br></pre></td></tr></table></figure><p>(2)语句中包含<code>[]</code>,<code>{}</code>或<code>()</code>括号就不需要使用多行连接符。如下实例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; days = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>,</span><br><span class="line">...         <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(days)</span><br><span class="line">[<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="Python-引号"><a href="#Python-引号" class="headerlink" title="Python 引号"></a>Python 引号</h3><p>(1)Python 可以使用引号(<code>&#39;</code>)、双引号(<code>&quot;</code>)、三引号(<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>) 来表示字符串，引号的开始与结束必须是相同类型的<br>(2)其中<strong>三引号可以由多行组成</strong>，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word = <span class="string">'word'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sentence = <span class="string">"这是一个句子。"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>paragraph = <span class="string">'''这是一个段落。</span></span><br><span class="line"><span class="string"><span class="meta">... </span>包含了多个语句'''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(word+<span class="string">'\n'</span>+sentence+<span class="string">'\n'</span>+paragraph)</span><br><span class="line">word</span><br><span class="line">这是一个句子。</span><br><span class="line">这是一个段落。</span><br><span class="line">包含了多个语句</span><br></pre></td></tr></table></figure><hr><h3 id="Python-注释"><a href="#Python-注释" class="headerlink" title="Python 注释"></a>Python 注释</h3><p>(1)单行注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">"Hello, Python!"</span>)  <span class="comment"># 第二个注释</span></span><br></pre></td></tr></table></figure><p>(2)多行注释</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">'''</span><br><span class="line">这是多行注释，使用单引号。</span><br><span class="line">这是多行注释，使用单引号。</span><br><span class="line">这是多行注释，使用单引号。</span><br><span class="line">'''</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">这是多行注释，使用双引号。</span><br><span class="line">这是多行注释，使用双引号。</span><br><span class="line">这是多行注释，使用双引号。</span><br><span class="line">"""</span><br></pre></td></tr></table></figure><hr><h3 id="Python-同一行显示多条语句"><a href="#Python-同一行显示多条语句" class="headerlink" title="Python 同一行显示多条语句"></a>Python 同一行显示多条语句</h3><p>(1)Python可以在同一行中使用多条语句，语句之间使用分号<code>;</code>分割，以下是一个简单的实例：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="meta"><span class="meta-keyword">import</span> sys;</span> x = <span class="string">'runoob'</span>; sys.stdout.write(x + <span class="string">'\n'</span>)</span><br><span class="line">runoob</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><hr><h3 id="print-输出函数"><a href="#print-输出函数" class="headerlink" title="print 输出函数"></a>print 输出函数</h3><p>(1)print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号<code>,</code></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">"a"</span></span><br><span class="line">y=<span class="string">"b"</span></span><br><span class="line"><span class="meta"># 换行输出</span></span><br><span class="line"><span class="keyword">print</span> (x)</span><br><span class="line"><span class="keyword">print</span> (y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> ('---------')</span><br><span class="line"><span class="meta"># 不换行输出</span></span><br><span class="line"><span class="keyword">print</span> (x,)</span><br><span class="line"><span class="keyword">print</span> (y,)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 不换行输出</span></span><br><span class="line"><span class="keyword">print</span> (x,y)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">---------</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">a b</span><br></pre></td></tr></table></figure><blockquote><p>python 3.x 的需要要加括号，写成<code>print()</code>的格式</p></blockquote><hr><h3 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h3><p>(1)缩进相同的一组语句构成一个代码块，我们称之代码组<br>(2)像<code>if</code>、<code>while</code>、<code>def</code>和<code>class</code>这样的复合语句，首行以关键字开始，以冒号<code>:</code>结束，该行之后的一行或多行代码构成代码组<br>(3)我们将首行及后面的代码组称为一个子句(<code>clause</code>)</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="keyword">input</span>(<span class="string">"请输入一个整数："</span>)<span class="meta">#输入<span class="number">6</span></span></span><br><span class="line">x = <span class="keyword">int</span>(x)</span><br><span class="line">y=<span class="keyword">input</span>(<span class="string">"请输入一个整数："</span>)<span class="meta">#输入<span class="number">8</span></span></span><br><span class="line">y=<span class="keyword">int</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x==y : </span><br><span class="line">   <span class="keyword">print</span>(<span class="string">'x=y'</span>)</span><br><span class="line">elif x&gt;y :  </span><br><span class="line">   <span class="keyword">print</span>(<span class="string">'x&gt;y'</span>)</span><br><span class="line"><span class="keyword">else</span> :  </span><br><span class="line">   <span class="keyword">print</span>(<span class="string">'x&lt;y'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">x</span>&lt;y</span><br></pre></td></tr></table></figure><hr><h3 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h3><p>(1)在python用<code>import</code>或者<code>from...import</code>来导入相应的模块<br>(2)将整个模块(somemodule)导入，格式为：<code>import somemodule</code><br>(3)从某个模块中导入某个函数,格式为：<code>from somemodule import somefunction</code><br>(4)从某个模块中导入多个函数,格式为：<code>from somemodule import firstfunc, secondfunc, thirdfunc</code><br>(5)将某个模块中的全部函数导入，格式为：<code>from somemodule import *</code></p><ul><li><p>导入<code>sys</code>模块</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'================Python import mode=========================='</span>)</span></span></span><br><span class="line">print (<span class="string">'命令行参数为:'</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> sys<span class="selector-class">.argv</span>:</span><br><span class="line">    print (i)</span><br><span class="line">print (<span class="string">'\n python 路径为'</span>,sys.path)</span><br></pre></td></tr></table></figure></li><li><p>导入<code>sys</code>模块的<code>argv,path</code>成员</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv,path  <span class="comment">#  导入特定的成员</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'================python from import==================================='</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'path:'</span>,path) <span class="comment"># 因为已经导入path成员，所以此处引用时不需要加sys.path</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="end-关键字"><a href="#end-关键字" class="headerlink" title="end 关键字"></a>end 关键字</h3><p>关键字<code>end</code>可以用于将结果输出到同一行，或者在输出的末尾添加不同的字符</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a, b, <span class="keyword">count</span> = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">10</span>:</span><br><span class="line"><span class="keyword">count</span>+=<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'第 '</span>,<span class="keyword">count</span>,<span class="string">' 次遍历:'</span>,end=<span class="string">','</span>)</span><br><span class="line"><span class="keyword">print</span>(b)</span><br><span class="line">a, b = b, a+b</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第 <span class="number"> 1 </span> 次遍历:,1</span><br><span class="line">第 <span class="number"> 2 </span> 次遍历:,1</span><br><span class="line">第 <span class="number"> 3 </span> 次遍历:,2</span><br><span class="line">第 <span class="number"> 4 </span> 次遍历:,3</span><br><span class="line">第 <span class="number"> 5 </span> 次遍历:,5</span><br><span class="line">第 <span class="number"> 6 </span> 次遍历:,8</span><br></pre></td></tr></table></figure><hr><h3 id="Python-基础语法图"><a href="#Python-基础语法图" class="headerlink" title="Python 基础语法图"></a>Python 基础语法图</h3><p><img src="https://i.ibb.co/kSB6n6Z/python1.png" alt="Python 基础语法图" title="Python 基础语法图"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;python学习第一章，简单介绍了python的一些基础语法…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://luxiong-github.github.io/categories/Python/"/>
    
      <category term="Study" scheme="https://luxiong-github.github.io/categories/Python/Study/"/>
    
    
      <category term="python" scheme="https://luxiong-github.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SVN提交报错“Empty directories is not supported”</title>
    <link href="https://luxiong-github.github.io/2020/02/25/study/svn-Empty/"/>
    <id>https://luxiong-github.github.io/2020/02/25/study/svn-Empty/</id>
    <published>2020-02-25T13:10:53.000Z</published>
    <updated>2020-06-01T15:11:30.253Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>svn 文件夹空 提交报错“Empty directories is not supported: /.git/objects/info” 解决方案</p></blockquote><a id="more"></a><h3 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h3><h4 id="下载jar包"><a href="#下载jar包" class="headerlink" title="下载jar包"></a>下载jar包</h4><p>参考链接：<a href="https://blog.csdn.net/qq_39816586/article/details/88634216" target="_blank" rel="noopener">https://blog.csdn.net/qq_39816586/article/details/88634216</a><br>下载链接: <a href="https://pan.baidu.com/s/17uc7lQ2xS-MzljIkOwu_Rg" target="_blank" rel="noopener">https://pan.baidu.com/s/17uc7lQ2xS-MzljIkOwu_Rg</a> 提取码: w8pk</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;svn 文件夹空 提交报错“Empty directories is not supported: /.git/objects/info” 解决方案&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="实用技术" scheme="https://luxiong-github.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="SVN" scheme="https://luxiong-github.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/SVN/"/>
    
    
      <category term="Note" scheme="https://luxiong-github.github.io/tags/Note/"/>
    
      <category term="SVN" scheme="https://luxiong-github.github.io/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>QC问题流程梳理</title>
    <link href="https://luxiong-github.github.io/2019/09/04/weaver/question-tidy/"/>
    <id>https://luxiong-github.github.io/2019/09/04/weaver/question-tidy/</id>
    <published>2019-09-04T01:37:05.000Z</published>
    <updated>2019-09-09T02:17:31.110Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="这篇文章是私人的哦，输下密码吧(*๓´╰╯`๓)" />    <label for="pass">这篇文章是私人的哦，输下密码吧(*๓´╰╯`๓)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      所有处理的流程QC，都整体过了一遍，每个人都讲了问题分析过程及处理方式,并对其中的疑惑点进行了沟通分析...
    
    </summary>
    
      <category term="weaver" scheme="https://luxiong-github.github.io/categories/weaver/"/>
    
    
      <category term="weaver" scheme="https://luxiong-github.github.io/tags/weaver/"/>
    
  </entry>
  
  <entry>
    <title>Oracle常用视图</title>
    <link href="https://luxiong-github.github.io/2019/05/19/database/oracle-views/"/>
    <id>https://luxiong-github.github.io/2019/05/19/database/oracle-views/</id>
    <published>2019-05-19T09:57:00.000Z</published>
    <updated>2019-09-24T15:25:29.964Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>本文主要介绍的是Oracle常用的一些视图，包括：v$session、v$sql、v$sqlarea，后期继续补充…</p></blockquote><a id="more"></a><h3 id="v-session"><a href="#v-session" class="headerlink" title="v$session"></a>v$session</h3><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>v$session主要是查看当前服务器所有session信息</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sid,serial#, <span class="keyword">status</span>, username, <span class="function"><span class="keyword">program</span></span>, machine, osuser, logon_time from v$session;</span><br></pre></td></tr></table></figure><h4 id="常用字段列名解析："><a href="#常用字段列名解析：" class="headerlink" title="常用字段列名解析："></a>常用字段列名解析：</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">- status：这列用来判断session状态，取值为：Achtive、Inactive、killed</span></span><br><span class="line"><span class="ruby">--   Achtive：正执行SQL语句(waiting <span class="keyword">for</span>/using a resource)</span></span><br><span class="line"><span class="ruby">--   Inactive：等待操作(即等待需要执行的SQL语句)</span></span><br><span class="line"><span class="ruby">--   Killed：被标注为删除</span></span><br><span class="line"><span class="ruby">-- session信息</span></span><br><span class="line"><span class="ruby">--   <span class="symbol">sid:</span>SESSION标识，常用于连接其它列</span></span><br><span class="line"><span class="ruby">--   SERIAL<span class="comment">#：如果某个SID又被其它的session使用的话则此数值自增加(当一个SESSION结束，另一个SESSION开始并使用了同一个SID)</span></span></span><br><span class="line"><span class="ruby">--   AUDSID：审查session ID唯一性，确认它通常也用于当寻找并行查询模式</span></span><br><span class="line"><span class="ruby">--   USERNAME：当前session在oracle中的用户名</span></span><br><span class="line"><span class="ruby">-- client信息</span></span><br><span class="line"><span class="ruby">--   OSUSER：客户端操作系统用户名</span></span><br><span class="line"><span class="ruby">--   MACHINE：客户端执行的机器</span></span><br><span class="line"><span class="ruby">--   TERMINAL：客户端运行的终端</span></span><br><span class="line"><span class="ruby">--   PROCESS：客户端进程的ID</span></span><br><span class="line"><span class="ruby">--   PROGRAM：客户端执行的客户端程序</span></span><br><span class="line"><span class="ruby">-- Application信息</span></span><br><span class="line"><span class="ruby">--   CLIENT_INFO：  DBMS_APPLICATION_INFO中设置</span></span><br><span class="line"><span class="ruby">--   ACTION：DBMS_APPLICATION_INFO中设置</span></span><br><span class="line"><span class="ruby">--   MODULE：DBMS_APPLICATION_INFO中设置</span></span><br></pre></td></tr></table></figure><h3 id="v-sql"><a href="#v-sql" class="headerlink" title="v$sql"></a>v$sql</h3><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>v$sql主要是用来分析SQL语句使用资源情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v$<span class="keyword">sql</span> <span class="keyword">WHERE</span> sql_fulltest <span class="keyword">LIKE</span> <span class="string">'%2019-08-21%'</span>;</span><br></pre></td></tr></table></figure><h4 id="常用字段列名解析：-1"><a href="#常用字段列名解析：-1" class="headerlink" title="常用字段列名解析："></a>常用字段列名解析：</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">- SQL_TEXT           /<span class="regexp">/当前正在执行的游标的sql文本的前1000个字符</span></span></span><br><span class="line"><span class="ruby">-- SQL_FULLTEXT       /<span class="regexp">/CLOB类型 整个sql文本，不用借助于V$SQL_TEXT视图来查看整个文本</span></span></span><br><span class="line"><span class="ruby">-- SQL_ID           /<span class="regexp">/库缓存中的SQL父游标的标志</span></span></span><br><span class="line"><span class="ruby">-- SHARABLE_MEM           /<span class="regexp">/子游标使用的共享内存的大小,bytes</span></span></span><br><span class="line"><span class="ruby">-- PERSISTENT_MEM           /<span class="regexp">/子游标生存时间中使用的固定内存的总量,bytes</span></span></span><br><span class="line"><span class="ruby">-- RUNTIME_MEM           /<span class="regexp">/在子游标执行过程中需要的固定内存大小，bytes</span></span></span><br><span class="line"><span class="ruby">-- SORTS           /<span class="regexp">/子游标发生的排序数量</span></span></span><br><span class="line"><span class="ruby">-- LOADED_VERSIONS          /<span class="regexp">/ 显示上下文堆是否载入，1是，0否</span></span></span><br><span class="line"><span class="ruby">-- USERS_OPENING          /<span class="regexp">/ 执行这个sql的用户数</span></span></span><br><span class="line"><span class="ruby">-- FETCHES          /<span class="regexp">/ sql取数据的次数</span></span></span><br><span class="line"><span class="ruby">-- EXECUTIONS           /<span class="regexp">/自从被载入共享池后，sql执行的次数 </span></span></span><br><span class="line"><span class="ruby">-- FIRST_LOAD_TIME          /<span class="regexp">/ 父游标产生的时间戳</span></span></span><br><span class="line"><span class="ruby">-- PARSE_CALLS           /<span class="regexp">/解析调用的次数 </span></span></span><br><span class="line"><span class="ruby">-- DISK_CALLS             /<span class="regexp">/读磁盘的次数</span></span></span><br><span class="line"><span class="ruby">-- DIRECT_WRITES           /<span class="regexp">/直接写的次数</span></span></span><br><span class="line"><span class="ruby">-- BUFFER_GETS           /<span class="regexp">/直接从buffer中得到数据的次数</span></span></span><br><span class="line"><span class="ruby">-- APPLICATION_WAIT_TIME          /<span class="regexp">/ 应用等待时间，毫秒</span></span></span><br><span class="line"><span class="ruby">-- CONCURRENCY_WAIT_TIME           /<span class="regexp">/并发等待时间，毫秒</span></span></span><br><span class="line"><span class="ruby">-- USER_IO_WAIT_TIME           /<span class="regexp">/用户IO等待时间</span></span></span><br><span class="line"><span class="ruby">-- ROWS_PROCESSED SQL           /<span class="regexp">/解析sql返回的总行数</span></span></span><br><span class="line"><span class="ruby">-- OPTIMIZER_MODE           /<span class="regexp">/优化器模式</span></span></span><br><span class="line"><span class="ruby">-- OPTIMIZER_COST           /<span class="regexp">/优化器对于sql给出的成本</span></span></span><br><span class="line"><span class="ruby">-- PARSING_USER_ID           /<span class="regexp">/第一个创建这个子游标的用户id</span></span></span><br><span class="line"><span class="ruby">-- HASH_VALUES           /<span class="regexp">/解析产生的哈希值</span></span></span><br><span class="line"><span class="ruby">-- CHILD_NUMBER           /<span class="regexp">/该子游标的数量</span></span></span><br><span class="line"><span class="ruby">-- SERVICE           /<span class="regexp">/服务名</span></span></span><br><span class="line"><span class="ruby">-- CPU_TIME           /<span class="regexp">/该子游标解析，执行和获取数据使用的CPU时间，毫秒</span></span></span><br><span class="line"><span class="ruby">-- ELAPSED_TIME           /<span class="regexp">/sql的执行时间，毫秒</span></span></span><br><span class="line"><span class="ruby">-- INVALIDATIONS           /<span class="regexp">/该子游标的无效次数</span></span></span><br><span class="line"><span class="ruby">-- MODULE       /<span class="regexp">/第一次解析该语句时,通过DBMS_APPLICAITON_INFO.SET_ACTION设置的模块名</span></span></span><br><span class="line"><span class="ruby">-- ACTION      /<span class="regexp">/第一次解析该语句时,通过DBMS_APPLICAITON_INFO.SET_ACTION设置的动作名 </span></span></span><br><span class="line"><span class="ruby">-- IS_OBSOLETE           /<span class="regexp">/标记该子游标过期与否，当子游标过大时会发生这种情况</span></span></span><br><span class="line"><span class="ruby">-- is_bind_sensitive           /<span class="regexp">/不仅指出是否使用绑定变量窥测来生成执行计划，而且指出这个执行计划是否依赖于窥测到的值。如果是，这个字段会被设置为Y，否则会被设置为N。</span></span></span><br><span class="line"><span class="ruby">-- is_bind_aware           /<span class="regexp">/表明游标是否使用了扩展的游标共享。如果是，这个字段会被设置为Y，如果不是，这个字段会被设置为N。如果是设置为N，这个游标将被废弃，不再可用。</span></span></span><br><span class="line"><span class="ruby">-- is_shareable           /<span class="regexp">/表明游标能否被共享。如果可以，这个字段会被设置为Y，否则，会被设置为N。如果被设置为N，这个游标将被废弃，不再可用。</span></span></span><br></pre></td></tr></table></figure><h3 id="v-sqlarea"><a href="#v-sqlarea" class="headerlink" title="v$sqlarea"></a>v$sqlarea</h3><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><p>v$sqlarea和v$sql基本一致，不同的是V$SQLAREA是在父游标级别上统计的sql信息，v$sql的汇总表，进行了group by hash_value,sql_id的汇总</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v$sqlarea <span class="keyword">WHERE</span> sql_fulltest <span class="keyword">LIKE</span> <span class="string">'%2019-08-21%'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;本文主要介绍的是Oracle常用的一些视图，包括：v$session、v$sql、v$sqlarea，后期继续补充…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Database" scheme="https://luxiong-github.github.io/categories/Database/"/>
    
      <category term="view" scheme="https://luxiong-github.github.io/categories/Database/view/"/>
    
    
      <category term="Database" scheme="https://luxiong-github.github.io/tags/Database/"/>
    
      <category term="SQL" scheme="https://luxiong-github.github.io/tags/SQL/"/>
    
      <category term="view" scheme="https://luxiong-github.github.io/tags/view/"/>
    
      <category term="Oracle" scheme="https://luxiong-github.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>关于索引的sql语句优化之降龙十八掌</title>
    <link href="https://luxiong-github.github.io/2019/04/18/database/db-index/"/>
    <id>https://luxiong-github.github.io/2019/04/18/database/db-index/</id>
    <published>2019-04-18T15:56:51.000Z</published>
    <updated>2019-09-19T09:13:00.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>本文主要介绍了基于索引的SQL语句优化的<code>降龙十八掌</code></p></blockquote><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在规模比较大的局点，往往因为一个小的SQL语句不够优化，导致数据库性能急剧下降，小型机idle所剩无几，应用服务器断连、超时，严重影响业务的正常运行。因此，称低效的SQL语句为业务的‘恶龙’并不过分。数据库的优化方法有很多种，在应用层来说，主要是<strong>基于索引的优化</strong>。本次秘笈根据实际的工作经验，在研发原来已有的方法的基础上，进行了一些扩充，总结了<strong>基于索引的SQL语句优化的降龙十八掌</strong>，希望有一天你能用其中一掌来驯服业务中横行的‘恶龙’。</p><hr><h3 id="总纲——建立必要的索引"><a href="#总纲——建立必要的索引" class="headerlink" title="总纲——建立必要的索引"></a>总纲——建立必要的索引</h3><p>降龙十八掌，总纲只有一句话：<strong>建立必要的索引</strong>，这就是后面降龙十八掌的内功基础。<br>这一点看似容易实际却很难。难就难在如何判断哪些索引是必要的，哪些又是不必要的。<br>判断的最终标准是看这些索引是否对我们的数据库性能有所帮助。具体到方法上，就必须熟悉数据库应用程序中的所有SQL语句，从中统计出常用的可能对性能有影响的部分SQL，分析、归纳出作为Where条件子句的字段及其组合方式；在这一基础上可以初步判断出哪些表的哪些字段应该建立索引。<br>其次，必须熟悉应用程序。必须了解哪些表是数据操作频繁的表；哪些表经常与其他表进行连接；哪些表中的数据量可能很大；对于数据量大的表，其中各个字段的数据分布情况如何；等等。<br>对于满足以上条件的这些表，必须重点关注，因为在这些表上的索引，将对SQL语句的性能产生举足轻重的影响。不过下面还是总结了一下降龙十八掌内功的入门基础，建立索引常用的规则如下：<br>(1) 表的主键、外键必须有索引；<br>(2) 数据量超过<code>300</code>的表应该有索引；<br>(3) 经常与其他表进行连接的表，在连接字段上应该建立索引；<br>(4) 经常出现在<code>where</code>子句中的字段，特别是大表的字段，应该建立索引；<br>(5) 索引应该建在选择性高的字段上；<br>(6) 索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；<br>(7) 复合索引的建立需要进行仔细分析；尽量考虑用单字段索引代替：       </p><ul><li>正确选择复合索引中的主列字段，一般是选择性较好的字段；        </li><li>复合索引的几个字段是否经常同时以<code>AND</code>方式出现在<code>where</code>子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引；    </li><li>如果复合索引中包含的字段经常单独出现在<code>where</code>子句中，则分解为多个单字段索引；   </li><li>如果复合索引所包含的字段超过<code>3</code>个，那么仔细考虑其必要性，考虑减少复合的字段；  </li><li>如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引；  </li></ul><p>(8) 频繁进行数据操作的表，不要建立太多的索引；<br>(9) 删除无用的索引，避免对执行计划造成负面影响；     </p><blockquote><p>以上是一些普遍的建立索引时的判断依据。一言以蔽之，索引的建立必须慎重，对每个索引的必要性都应该经过仔细分析，要有建立的依据。因为太多的索引与不充分、不正确的索引对性能都毫无益处：<br>在表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也会增加处理上的开销。<br>另外，过多的复合索引，在有单字段索引的情况下，一般都是没有存在价值的；<br>相反，还会降低数据增加删除时的性能，特别是对频繁更新的表来说，负面影响更大。</p></blockquote><hr><h3 id="降龙十八掌"><a href="#降龙十八掌" class="headerlink" title="降龙十八掌"></a>降龙十八掌</h3><h4 id="第一掌-避免对列的操作"><a href="#第一掌-避免对列的操作" class="headerlink" title="第一掌 避免对列的操作"></a>第一掌 避免对列的操作</h4><p>任何对列的操作都可能导致全表扫描，这里所谓的操作包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等式的右边，甚至去掉函数。<br><em>例1</em>：下列SQL条件语句中的列都建有恰当的索引，但 <code>30</code>万行数据情况下执行速度却非常慢：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">record</span> <span class="keyword">where</span>  substrb(CardNo,<span class="number">1</span>,<span class="number">4</span>)=<span class="string">'5378'</span>(<span class="number">13</span>秒)   </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">record</span> <span class="keyword">where</span>  amount/<span class="number">30</span>&lt; <span class="number">1000</span>（<span class="number">11</span>秒）   </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">record</span> <span class="keyword">where</span>  to_char(ActionTime,<span class="string">'yyyymmdd'</span>)=<span class="string">'19991201'</span>（<span class="number">10</span>秒）</span><br></pre></td></tr></table></figure><p>由于<code>where</code>子句中对列的任何操作结果都是在SQL运行时逐行计算得到的，因此它不得不进行表扫描，而没有使用该列上面的索引；如果这些结果在查询编译时就能得到，那么就可以被SQL优化器优化，使用索引，避免表扫描，因此将SQL重写如下： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="built_in">record</span> <span class="keyword">where</span> CardNo <span class="keyword">like</span>  <span class="string">'5378%'</span>（&lt; <span class="number">1</span>秒） </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="built_in">record</span> <span class="keyword">where</span> amount  &lt; <span class="number">1000</span>*<span class="number">30</span>（&lt; <span class="number">1</span>秒） </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="built_in">record</span> <span class="keyword">where</span> ActionTime= <span class="keyword">to_date</span> (<span class="string">'19991201'</span> ,<span class="string">'yyyymmdd'</span>)（&lt; <span class="number">1</span>秒）  </span><br><span class="line">差别是很明显的！</span><br></pre></td></tr></table></figure><h4 id="第二掌-避免不必要的类型转换"><a href="#第二掌-避免不必要的类型转换" class="headerlink" title="第二掌 避免不必要的类型转换"></a>第二掌 避免不必要的类型转换</h4><p>需要注意的是，尽量避免潜在的数据类型转换。如将字符型数据与数值型数据比较，ORACLE会自动将字符型用<code>to_number()</code>函数进行转换，从而导致全表扫描。<br><em>例2</em>：表<code>tab1</code>中的列<code>col1</code>是字符型(char)，则以下语句存在类型转换：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> col1,col2 <span class="keyword">from</span> tab1 <span class="keyword">where</span> col1&gt;<span class="number">10</span></span><br></pre></td></tr></table></figure><p>应该写为： </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> col1,col2 <span class="keyword">from</span> tab1 <span class="keyword">where</span> col1&gt;<span class="string">'10'</span></span><br></pre></td></tr></table></figure><h4 id="第三掌-增加查询的范围限制"><a href="#第三掌-增加查询的范围限制" class="headerlink" title="第三掌 增加查询的范围限制"></a>第三掌 增加查询的范围限制</h4><p>增加查询的范围限制，避免全范围的搜索。<br><em>例3</em>：以下查询表<code>record</code>中时间<code>ActionTime</code>小于2001年3月1日的数据： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="built_in">record</span> <span class="keyword">where</span> ActionTime &lt; <span class="keyword">to_date</span> (<span class="string">'20010301'</span> ,<span class="string">'yyyymm'</span>)</span><br></pre></td></tr></table></figure><p>查询计划表明，上面的查询对表进行全表扫描，如果我们知道表中的最早的数据为2001年1月1日，那么，可以增加一个最小时间，使查询在一个完整的范围之内。修改如下： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="built_in">record</span> <span class="keyword">where</span>  ActionTime &lt; <span class="keyword">to_date</span> (<span class="string">'20010301'</span> ,<span class="string">'yyyymm'</span>) <span class="keyword">and</span> ActionTime &gt; <span class="keyword">to_date</span> (<span class="string">'20010101'</span> ,<span class="string">'yyyymm'</span>)</span><br></pre></td></tr></table></figure><p>后一种SQL语句将利用上<code>ActionTime</code>字段上的索引，从而提高查询效率。把<code>20010301</code>换成一个变量，根据取值的机率，可以有一半以上的机会提高效率。同理，对于大于某个值的查询，如果知道当前可能的最大值，也可以在Where子句中加上<code>“AND 列名&lt; MAX(最大值)”</code>。</p><h4 id="第四掌-尽量去掉”IN”、”OR”"><a href="#第四掌-尽量去掉”IN”、”OR”" class="headerlink" title="第四掌 尽量去掉”IN”、”OR”"></a>第四掌 尽量去掉”IN”、”OR”</h4><p>含有”<code>IN</code>“、”<code>OR</code>“的<code>where</code>子句常会使用工作表，使索引失效；如果不产生大量重复值，可以考虑把子句拆开；拆开的子句中应该包含索引。<br><em>例4</em>： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">stuff</span> <span class="keyword">where</span> id_no <span class="keyword">in</span>(<span class="string">'0'</span>,<span class="string">'1'</span>)（<span class="number">23</span>秒）</span><br></pre></td></tr></table></figure><p>可以考虑将<code>or</code>子句分开：    </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> count<span class="comment">(*) from stuff where id_no='0'   </span></span><br><span class="line"><span class="comment">select count(*)</span> <span class="keyword">from</span> stuff <span class="keyword">where</span> id_no=<span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>然后再做一个简单的加法，与原来的SQL语句相比，查询速度更快。</p><h4 id="第五掌-尽量去掉-“-lt-gt-”"><a href="#第五掌-尽量去掉-“-lt-gt-”" class="headerlink" title="第五掌 尽量去掉 “&lt;&gt;”"></a>第五掌 尽量去掉 “&lt;&gt;”</h4><p>尽量去掉 “<code>&lt;&gt;</code>“，避免全表扫描，如果数据是枚举值，且取值范围固定，则修改为”<code>OR</code>“方式。<br><em>例5</em>：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> SERVICEINFO <span class="keyword">SET</span> STATE=<span class="number">0</span> <span class="keyword">WHERE</span> STATE&lt;&gt;<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>以上语句由于其中包含了”<code>&lt;&gt;</code>“，执行计划中用了全表扫描(TABLE ACCESS FULL)，没有用到<code>state</code>字段上的索引。实际应用中，由于业务逻辑的限制，字段<code>state</code>为枚举值，只能等于0，1或2，而且，值等于=1，2的很少，因此可以去掉”<code>&lt;&gt;</code>“，利用索引来提高效率。       修改为：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> SERVICEINFO <span class="keyword">SET</span> STATE=<span class="number">0</span>  <span class="keyword">WHERE</span> STATE = <span class="number">1</span> <span class="keyword">OR</span> STATE = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>进一步的修改可以参考第4种方法。</p><h4 id="第六掌-去掉Where子句中的IS-NULL和IS-NOT-NULL"><a href="#第六掌-去掉Where子句中的IS-NULL和IS-NOT-NULL" class="headerlink" title="第六掌 去掉Where子句中的IS NULL和IS NOT NULL"></a>第六掌 去掉Where子句中的IS NULL和IS NOT NULL</h4><p><code>where</code>子句中的<code>IS NULL</code>和<code>IS NOT NULL</code>将不会使用索引而是进行全表搜索，因此需要通过改变查询方式，分情况讨论等方法，去掉<code>where</code>子句中的<code>IS NULL</code>和<code>IS NOT NULL</code>。</p><h4 id="第七掌-索引提高数据分布不均匀时查询效率"><a href="#第七掌-索引提高数据分布不均匀时查询效率" class="headerlink" title="第七掌 索引提高数据分布不均匀时查询效率"></a>第七掌 索引提高数据分布不均匀时查询效率</h4><p>索引的选择性低，但数据的值分布差异很大时，仍然可以利用索引提高效率。A、数据分布不均匀的特殊情况下，选择性不高的索引也要创建。<br>表<code>ServiceInfo</code>中数据量很大，假设有一百万行，其中有一个字段<code>DisposalCourseFlag</code>，取值范围为枚举值：<code>[0，1，2，3，4，5，6，7]</code><br>按照前面说的索引建立的规则，“选择性不高的字段不应该建立索引，该字段只有8种取值，索引值的重复率很高，索引选择性明显很低，因此不建索引。<br>然而，由于该字段上数据值的分布情况非常特殊，具体如下表：<br>取值范围:<code>1~5 6 7</code>       占总数据量的百分比:<code>1% 98% 1%</code><br>而且，常用的查询中，查询<code>DisposalCourseFlag&lt;6</code>的情况既多又频繁，毫无疑问，如果能够建立索引，并且被应用，那么将大大提高这种情况的查询效率。因此，我们需要在该字段上建立索引。</p><h4 id="第八掌-利用HINT强制指定索引"><a href="#第八掌-利用HINT强制指定索引" class="headerlink" title="第八掌 利用HINT强制指定索引"></a>第八掌 利用HINT强制指定索引</h4><p>在ORACLE优化器无法用上合理索引的情况下，利用HINT强制指定索引。<br>继续上面7的例子，ORACLE缺省认定，表中列的值是在所有数据行中均匀分布的，也就是说，在一百万数据量下，每种<code>DisposalCourseFlag</code>值各有12.5万数据行与之对应。<br>假设SQL搜索条件<code>DisposalCourseFlag=2</code>，利用<code>DisposalCourseFlag</code>列上的索引进行数据搜索效率，往往不比全表扫描的高，ORACLE因此对索引“视而不见”，从而在查询路径的选择中，用其他字段上的索引甚至全表扫描。<br>根据我们上面的分析，数据值的分布很特殊，严重的不均匀。为了利用索引提高效率，此时，一方面可以单独对该字段或该表用<code>analyze</code>语句进行分析，对该列搜集足够的统计数据，使ORACLE在查询选择性较高的值时能用上索引；<br>另一方面，可以利用<code>HINT</code>提示，在<code>SELECT</code>关键字后面，加上<code>“/*+ INDEX(表名称，索引名称）*/”</code>的方式，强制ORACLE优化器用上该索引。 比如：      </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  serviceinfo <span class="keyword">where</span> DisposalCourseFlag=<span class="number">1</span> ;</span><br></pre></td></tr></table></figure><p>上面的语句，实际执行中ORACLE用了全表扫描，加上蓝色提示部分后，用到索引查询。如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="comment">/*+  INDEX(SERVICEINFO,IX_S_DISPOSALCOURSEFLAG)  */</span>  *  <span class="keyword">from</span>  serviceinfo <span class="keyword">where</span> DisposalCourseFlag=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>请注意，这种方法会加大代码维护的难度，而且该字段上索引的名称被改变之后，必须要同步所有指定索引的<code>HINT</code>代码，否则<code>HINT</code>提示将被ORACLE忽略掉。  </p><h4 id="第九掌-屏蔽无用索引"><a href="#第九掌-屏蔽无用索引" class="headerlink" title="第九掌 屏蔽无用索引"></a>第九掌 屏蔽无用索引</h4><p>继续上面8的例子，由于实际查询中，还有涉及到<code>DisposalCourseFlag=6</code>的查询，而此时如果用上该字段上的索引，将是非常不明智的，效率也极低。因此这种情况下，我们需要用特殊的方法屏蔽该索引，以便ORACLE选择其他字段上的索引。比如，如果字段为数值型的就在表达式的字段名后，添加<code>“+ 0”</code>，为字符型的就并上空串：<code>“||&quot;&quot;”</code> 如： </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  serviceinfo <span class="keyword">where</span> DisposalCourseFlag+ <span class="number">0</span> = <span class="number">6</span> <span class="keyword">and</span> workNo =  <span class="string">'36'</span></span><br></pre></td></tr></table></figure><p>不过，不要把该用的索引屏蔽掉了，否则同样会产生低效率的全表扫描。</p><h4 id="第十掌-分解复杂查询，用常量代替变量"><a href="#第十掌-分解复杂查询，用常量代替变量" class="headerlink" title="第十掌 分解复杂查询，用常量代替变量"></a>第十掌 分解复杂查询，用常量代替变量</h4><p>对于复杂的Where条件组合，<code>where</code>中含有多个带索引的字段，考虑用IF语句分情况进行讨论；同时，去掉不必要的外来参数条件，减低复杂度，以便在不同情况下用不同字段上的索引。       继续上面9的例子，对于包含</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">where</span> (DisposalCourseFlag &lt; v_DisPosalCourseFlag) <span class="keyword">or</span> (v_DisPosalCourseFlag is <span class="built_in">null</span>) <span class="keyword">and</span>....</span><br></pre></td></tr></table></figure><p>的查询，(这里<code>v_DisPosalCourseFlag</code>为一个输入变量，取值范围可能为<code>[NULL，0，1，2，3，4，5，6，7])</code>，可以考虑分情况用IF语句进行讨论，类似： </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">IF</span> v_DisPosalCourseFlag =<span class="number">1</span> <span class="keyword">THEN</span> <span class="keyword">Where</span> DisposalCourseFlag = <span class="number">1</span> <span class="keyword">and</span> .... ELSIF v_DisPosalCourseFlag =<span class="number">2</span> <span class="keyword">THEN</span> <span class="keyword">Where</span> DisposalCourseFlag = <span class="number">2</span> <span class="keyword">and</span> ....</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#### 第十一掌 like子句尽量前端匹配  </span></span><br><span class="line">因为<span class="keyword">like</span>参数使用的非常频繁，因此如果能够对<span class="keyword">like</span>子句使用索引，将很高的提高查询的效率。  </span><br><span class="line">*例<span class="number">6</span>*：</span><br></pre></td></tr></table></figure><p>select * from city where name like ‘%S%’</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以上查询的执行计划用了全表扫描（<span class="keyword">TABLE</span> ACCESS <span class="comment">FULL</span>），如果能够修改为：</span><br></pre></td></tr></table></figure><p>select * from city where name like ‘S%’</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">那么查询的执行计划将会变成（`INDEX RANGE SCAN`），成功的利用了`name`字段的索引。这意味着Oracle SQL优化器会识别出用于索引的like子句，只要该查询的匹配端是具体值。因此我们在做like查询时，应该尽量使查询的匹配端是具体值，即使用`like ‘S%’`。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 第十二掌 用Case语句合并多重扫描   </span><br><span class="line">我们常常必须基于多组数据表计算不同的聚集。例如下例通过三个独立查询： </span><br><span class="line">*例<span class="number">8</span>*：</span><br><span class="line"><span class="number">1</span>）</span><br></pre></td></tr></table></figure><p>select count(<em>) from emp where sal&lt;1000;<br>select count(</em>) from emp where sal between 1000 and 5000;<br>select count(*) from emp where sal&gt;5000; </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这样我们需要进行三次全表查询，但是如果我们使用<span class="keyword">case</span>语句：</span><br></pre></td></tr></table></figure><p>select  count (sale when sal &lt;1000 then 1 else null end) count_poor, count (sale when between 1000 and 5000 then 1 else null end) count_blue_collar, count (sale when sal &gt;5000 then 1 else null end) count_poor from emp; </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这样查询的结果一样，但是执行计划只进行了一次全表查询。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 第十三掌 使用nls_date_format       </span><br><span class="line">*例<span class="number">9</span>*：</span><br></pre></td></tr></table></figure><p>select * from record where  to_char(ActionTime,’mm’)=’12’      </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个查询的执行计划将是全表查询，如果我们改变`nls_date_format， SQL&gt;alert session <span class="builtin-name">set</span> <span class="attribute">nls_date_formate</span>=’MM’;`现在重新修改上面的查询：</span><br></pre></td></tr></table></figure><p>select * from record where  ActionTime=’12’      </p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这样就能使用`actiontime`上的索引了，它的执行计划将是（`INDEX RANGE SCAN`）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 第十四掌 使用基于函数的索引       </span><br><span class="line">前面谈到任何对列的操作都可能导致全表扫描，例如：</span><br></pre></td></tr></table></figure><p>select * from emp where substr(ename,1,2)=’SM’;      </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是这种查询在客服系统又经常使用，我们可以创建一个带有<span class="keyword">substr</span>函数的基于函数的索引，</span><br></pre></td></tr></table></figure><p>create index emp_ename_substr on eemp ( substr(ename,1,2) );      </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这样在执行上面的查询语句时，这个基于函数的索引将排上用场，执行计划将是（`INDEX RANGE SCAN`）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 第十五掌 基于函数的索引要求等式匹配  </span><br><span class="line">上面的例子中，我们创建了基于函数的索引，但是如果执行下面的查询：</span><br></pre></td></tr></table></figure><p>select * from emp where substr(ename,1,1)=’S’<br>```<br>得到的执行计划将还是（<code>TABLE ACCESS FULL</code>），因为只有当数据列能够等式匹配时，基于函数的索引才能生效，这样对于这种索引的计划和维护的要求都很高。请注意，向表中添加索引是非常危险的操作，因为这将导致许多查询执行计划的变更。然而，如果我们使用基于函数的索引就不会产生这样的问题，因为Oracle只有在查询使用了匹配的内置函数时才会使用这种类型的索引。</p><h4 id="第十六掌-使用分区索引"><a href="#第十六掌-使用分区索引" class="headerlink" title="第十六掌 使用分区索引"></a>第十六掌 使用分区索引</h4><p>在用分析命令对分区索引进行分析时，每一个分区的数据值的范围信息会放入Oracle的数据字典中。Oracle可以利用这个信息来提取出那些只与SQL查询相关的数据分区。<br>例如，假设你已经定义了一个分区索引，并且某个SQL语句需要在一个索引分区中进行一次索引扫描。Oracle会仅仅访问这个索引分区，而且会在这个分区上调用一个此索引范围的快速全扫描。因为不需要访问整个索引，所以提高了查询的速度。  </p><h4 id="第十七掌-使用位图索引"><a href="#第十七掌-使用位图索引" class="headerlink" title="第十七掌 使用位图索引"></a>第十七掌 使用位图索引</h4><p>位图索引可以从本质上提高使用了小于<code>1000</code>个唯一数据值的数据列的查询速度，因为在位图索引中进行的检索是在<code>RAM</code>中完成的，而且也总是比传统的B树索引的速度要快。对于那些少于<code>1000</code>个唯一数据值的数据列建立位图索引，可以使执行效率更快。</p><h4 id="第十八掌-决定使用全表扫描还是使用索引"><a href="#第十八掌-决定使用全表扫描还是使用索引" class="headerlink" title="第十八掌 决定使用全表扫描还是使用索引"></a>第十八掌 决定使用全表扫描还是使用索引</h4><p>和所有的秘笈一样，最后一招都会又回到起点，最后我们来讨论一下是否需要建立索引，也许进行全表扫描更快。在大多数情况下，全表扫描可能会导致更多的物理磁盘输入输出，但是全表扫描有时又可能会因为高度并行化的存在而执行的更快。如果查询的表完全没有顺序，那么一个要返回记录数小于<code>10％</code>的查询可能会读取表中大部分的数据块，这样使用索引会使查询效率提高很多。但是如果表非常有顺序，那么如果查询的记录数大于<code>40％</code>时，可能使用全表扫描更快。因此，有一个索引范围扫描的总体原则是：<br>1) 对于原始排序的表:仅读取少于表记录数40％的查询应该使用索引范围扫描。反之，读取记录数目多于表记录数的40％的查询应该使用全表扫描。<br>2) 对于未排序的表:仅读取少于表记录数7％的查询应该使用索引范围扫描。反之，读取记录数目多于表记录数的7％的查询应该使用全表扫描。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上的招式，是完全可以相互结合同时运用的。而且各种方法之间相互影响，紧密联系。这种联系既存在一致性，也可能带来冲突，当冲突发生时，需要根据实际情况进行选择，没有固定的模式。最后决定SQL优化功力的因素就是对ORACLE内功的掌握程度了。<br>另外，值得注意的是：随着时间的推移和数据的累计与变化，ORACLE对SQL语句的执行计划也会改变，比如：基于代价的优化方法，随着数据量的增大，优化器可能错误的不选择索引而采用全表扫描。这种情况可能是因为统计信息已经过时，在数据量变化很大后没有及时分析表；<br>但如果对表进行分析之后，仍然没有用上合理的索引，那么就有必要对SQL语句用<code>HINT</code>提示，强制用合理的索引。<br>但这种<code>HINT</code>提示也不能滥用，因为这种方法过于复杂，缺乏通用性和应变能力，同时也增加了维护上的代价；相对来说，基于函数右移、去掉<code>“IN ，OR ，&lt;&gt; ，IS NOT NULL ”</code>、分解复杂的SQL语句等等方法，却是“放之四海皆准”的，可以放心大胆的使用。<br>同时，优化也不是“一劳永逸”的，必须随着情况的改变进行相应的调整。<br>当数据库设计发生变化，包括更改表结构：字段和索引的增加、删除或改名等；业务逻辑发生变化：如查询方式、取值范围发生改变等等。<br>在这种情况下，也必须对原有的优化进行调整，以适应效率上的需求。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;本文主要介绍了基于索引的SQL语句优化的&lt;code&gt;降龙十八掌&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Database" scheme="https://luxiong-github.github.io/categories/Database/"/>
    
      <category term="index" scheme="https://luxiong-github.github.io/categories/Database/index/"/>
    
    
      <category term="Database" scheme="https://luxiong-github.github.io/tags/Database/"/>
    
      <category term="SQL" scheme="https://luxiong-github.github.io/tags/SQL/"/>
    
      <category term="index" scheme="https://luxiong-github.github.io/tags/index/"/>
    
  </entry>
  
  <entry>
    <title>Chrome浏览器中F12功能的简单介绍</title>
    <link href="https://luxiong-github.github.io/2019/03/18/study/chrome-F12/"/>
    <id>https://luxiong-github.github.io/2019/03/18/study/chrome-F12/</id>
    <published>2019-03-18T06:57:52.000Z</published>
    <updated>2019-09-18T09:23:54.241Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>Chrome浏览器F12开发者工具开发人员的利器,查看了一些博客和资料，简单总结一下~</p></blockquote><a id="more"></a><h3 id="常用页面"><a href="#常用页面" class="headerlink" title="常用页面"></a>常用页面</h3><p>Chrome开发者工具中，调试时使用最多的三个功能页面是：元素（ELements）、控制台（Console）、源代码（Sources），此外还有网络（Network）等<br><img src="https://i.ibb.co/1nsFRmS/chrome7.png" alt="chrome7"></p><ul><li>元素（Elements）：用于查看或修改HTML元素的属性、CSS属性、监听事件、断点等。</li><li>控制台（Console）：控制台一般用于执行一次性代码，查看JavaScript对象，查看调试日志信息或异常信息。</li><li>源代码（Sources）：该页面用于查看页面的HTML文件源代码、JavaScript源代码、CSS源代码，此外最重要的是可以调试JavaScript源代码，可以给JS代码添加断点等。</li><li>网络（Network）：网络页面主要用于查看header等与网络连接相关的信息。</li></ul><h4 id="元素（Elements）"><a href="#元素（Elements）" class="headerlink" title="元素（Elements）"></a>元素（Elements）</h4><ol><li><p>查看元素代码：点击如图箭头（或用者用快捷键Ctrl+Shift+C）进入选择元素模式，然后从页面中选择需要查看的元素，然后可以在开发者工具元素（Elements）一栏中定位到该元素源代码的具体位置：<br><img src="https://i.ibb.co/zFCc8WK/chrome8.png" alt="chrome8"></p></li><li><p>查看元素属性：可从被定位的源码中查看部分，如class、src，也可在右边的侧栏中查看全部的属性，如下图位置查看：  </p></li></ol><p><img src="https://i.ibb.co/qk7D8bj/chrome1.png" alt="chrome1"></p><ol start="3"><li>修改元素的代码与属性：可直接双击想要修改的部分，然后就进行修改，或者选中要修改部分后点击右键进行修改，如下图：  </li></ol><p><img src="https://i.ibb.co/GsbkXL4/chrome2.png" alt="chrome2"></p><blockquote><p>注意：这个修改也仅对当前的页面渲染生效，不会修改服务器的源代码，故而这个功能也是作为调试页面效果而使用</p></blockquote><ol start="4"><li>右边的侧栏个功能的介绍:如下图所示<br><img src="https://i.ibb.co/FK77psm/chrome3.png" alt="chrome3"></li></ol><h4 id="控制台（Console）"><a href="#控制台（Console）" class="headerlink" title="控制台（Console）"></a>控制台（Console）</h4><ol><li>查看JS对象的及其属性</li><li>执行JS语句</li><li>查看控制台日志：当网页的JS代码中使用了console.log()函数时，该函数输出的日志信息会在控制台中显示。日志信息一般在开发调试时启用，而当正式上线后，一般会将该函数去掉。</li></ol><h4 id="源代码（Sources）"><a href="#源代码（Sources）" class="headerlink" title="源代码（Sources）"></a>源代码（Sources）</h4><p>其主要功能如下介绍:<br><img src="https://i.ibb.co/3f5S09g/chrome4.png" alt="chrome4"></p><h4 id="网络（Network）"><a href="#网络（Network）" class="headerlink" title="网络（Network）"></a>网络（Network）</h4><ol><li><p>主要功能如下：<br><img src="https://i.ibb.co/gPSrtBf/chrome5.png" alt="chrome4"></p></li><li><p>请求文件具体说明：<br><img src="https://i.ibb.co/GPdy0Mb/chrome6.png" alt="chrome4"></p></li><li><p>分为四个模块：</p></li></ol><ul><li>Header：面板列出资源的请求url、HTTP方法、响应状态码、请求头和响应头及它们各自的值、请求参数等等</li><li>Preview：预览面板，用于资源的预览。</li><li>Response：响应信息面板包含资源还未进行格式处理的内容</li><li>Timing：资源请求的详细信息花费时间</li></ul><hr><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><h4 id="只分析异步请求资源"><a href="#只分析异步请求资源" class="headerlink" title="只分析异步请求资源"></a>只分析异步请求资源</h4><p>【Network】下面点击“XHR”，这样就只会显示XHR异步请求资源，以便于快速分析请求Headers和Response<br><img src="https://i.ibb.co/qdqYdfg/chrome9.png" alt="chrome9"></p><h4 id="快速查找并定位文件"><a href="#快速查找并定位文件" class="headerlink" title="快速查找并定位文件"></a>快速查找并定位文件</h4><ol><li>查看源代码，鼠标移到开发工具窗口，按ctrl+p，输入链接地址的前几个字母，会自动联想显示所有符合条件的地址，点击打开即可。（有时第一次打开是空白内容，可再点击一次链接）</li><li>打开之后，如果是js内容，就可以直接在上面打断点调试，另外可以点击内容框的左下角大括号图标“{ }”(pretty print)，对代码进行排版美化。<br><img src="https://i.ibb.co/sqb6X9C/chrome10.png" alt="chrome10"></li></ol><h4 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h4><ol><li><a href="https://blog.csdn.net/m0_37724356/article/details/79884006" target="_blank" rel="noopener">https://blog.csdn.net/m0_37724356/article/details/79884006</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;Chrome浏览器F12开发者工具开发人员的利器,查看了一些博客和资料，简单总结一下~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="实用技术" scheme="https://luxiong-github.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Chrome" scheme="https://luxiong-github.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/Chrome/"/>
    
    
      <category term="Chrome" scheme="https://luxiong-github.github.io/tags/Chrome/"/>
    
      <category term="Note" scheme="https://luxiong-github.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>Chrome浏览器F12 Network中Timing参数含义</title>
    <link href="https://luxiong-github.github.io/2019/03/17/study/chrome-timing/"/>
    <id>https://luxiong-github.github.io/2019/03/17/study/chrome-timing/</id>
    <published>2019-03-17T06:57:52.000Z</published>
    <updated>2019-09-17T07:20:55.344Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>Chrome浏览器开发者工具Network窗口下，Timing中显示资源在整个请求生命周期过程中各部分花费的时间</p></blockquote><a id="more"></a><h3 id="参数示例"><a href="#参数示例" class="headerlink" title="参数示例"></a>参数示例</h3><p><img src="https://i.ibb.co/4jkvdb4/chrome-timing01.png" alt="chrome-timing"></p><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><h4 id="Queueing"><a href="#Queueing" class="headerlink" title="Queueing"></a>Queueing</h4><p>请求文件顺序的排序。浏览器是有线程限制的，发请求也不能所有的请求同时发送，会将请求加入队列中（Chrome的最大并发连接数是6）。此参数表示从添加到待处理队列，到实际开始处理的时间间隔标示。</p><h4 id="Stalled（阻塞）"><a href="#Stalled（阻塞）" class="headerlink" title="Stalled（阻塞）"></a>Stalled（阻塞）</h4><p>(1) 简介<br>浏览器得到要发出这个请求的指令，到请求可以发出的等待时间，一般是代理协商、以及等待可复用的TCP连接释放的时间，不包括DNS查询、建立TCP连接等时间等。浏览器对同一个主机域名的并发连接数有限制，因此如果当前的连接数已经超过上限，那么其余请求就会被阻塞，等待新的可用连接；此外脚本也会阻塞其他组件的下载；</p><p>(2) 优化措施  </p><ol><li>将资源合理分布到多台主机上，可以提高并发数，但是增加并行下载数量也会增大开销，这取决于带宽和CPU速度，过多的并行下载会降低性能；  </li><li>脚本置于页面底部；</li></ol><h4 id="DNS-Lookup"><a href="#DNS-Lookup" class="headerlink" title="DNS Lookup"></a>DNS Lookup</h4><p>(1) 简介<br>请求某域名下的资源，浏览器需要先通过DNS解析器得到该域名服务器的IP地址。在DNS查找完成之前，浏览器不能从主机名那里下载到任何东西。DNS查询的时间，当本地DNS缓存没有的时候，这个时间可能是有一段长度的，但是比如你一旦在host中设置了DNS，或者第二次访问，由于浏览器的DNS缓存还在，这个时间就为0了。</p><p>(2) 优化措施  </p><ol><li>利用DNS缓存（设置TTL时间）；</li><li>利用Connection:keep-alive特性建立持久连接，可以在当前连接上进行多个请求，无需再进行域名解析；</li></ol><h4 id="Initial-connection"><a href="#Initial-connection" class="headerlink" title="Initial connection"></a>Initial connection</h4><p>建立TCP连接的时间，就相当于客户端从发请求开始到TCP握手结束这一段，包括DNS查询+Proxy时间+TCP握手时间。</p><h4 id="SSL（包含于HTTPS连接中）"><a href="#SSL（包含于HTTPS连接中）" class="headerlink" title="SSL（包含于HTTPS连接中）"></a>SSL（包含于HTTPS连接中）</h4><p>http是超文本传输协议，以明文方式发送内容，不提供任何方式的数据加密，如果被不法分子截取浏览器和服务器之间的传输报文，会获取其中的信息。<br>https 是安全套接字层超文本传输协议，就是在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。<br>因此建立HTTPS连接的时间相当于三次握手的时间+SSL时间。</p><h4 id="Request-sent（发送请求）"><a href="#Request-sent（发送请求）" class="headerlink" title="Request sent（发送请求）"></a>Request sent（发送请求）</h4><p>(1) 简介<br>发送HTTP请求的时间（从第一个字节发出前到最后一个字节发出后的时间）</p><p>(2) 优化措施  </p><ol><li>减少HTTP请求，可以使用CSS Sprites、内联图片、合并脚本和样式表等；</li><li>对不常变化的组件添加长久的Expires头（相当于设置久远的过期时间），在后续的页面浏览中可以避免不必要的HTTP请求；</li></ol><h4 id="Waiting-TTFB"><a href="#Waiting-TTFB" class="headerlink" title="Waiting(TTFB)"></a>Waiting(TTFB)</h4><p>(1) 简介<br>请求发出后，到收到响应的第一个字节所花费的时间(Time To First Byte)，发送请求完毕到接收请求开始的时间；通常是耗费时间最长的。从发送请求到收到服务器响应的第一字节之间的时间，受到线路、服务器距离等因素的影响。  </p><blockquote><p>注意：网页重定向越多，TTFB越高，所以要减少重定向</p></blockquote><p>(2) 优化措施<br>使用CDN，将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求，提高响应速度；</p><h4 id="Content-Download（下载）"><a href="#Content-Download（下载）" class="headerlink" title="Content Download（下载）"></a>Content Download（下载）</h4><p>(1) 简介<br>收到响应的第一个字节，到接受完最后一个字节的时间，就是下载时间。</p><p>(2) 优化措施  </p><ol><li>通过条件Get请求，对比If-Modified-Since和Last-Modified时间，确定是否使用缓存中的组件，服务器会返回“304 Not Modified”状态码，减小响应的大小；</li><li>移除重复脚本，精简和压缩代码，如借助自动化构建工具grunt、gulp等；</li><li>压缩响应内容，服务器端启用gzip压缩，可以减少下载时间；</li></ol><p>参考文档：<a href="https://blog.csdn.net/lhz_333/article/details/93544313" target="_blank" rel="noopener">https://blog.csdn.net/lhz_333/article/details/93544313</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;Chrome浏览器开发者工具Network窗口下，Timing中显示资源在整个请求生命周期过程中各部分花费的时间&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="实用技术" scheme="https://luxiong-github.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Chrome" scheme="https://luxiong-github.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/Chrome/"/>
    
    
      <category term="Chrome" scheme="https://luxiong-github.github.io/tags/Chrome/"/>
    
      <category term="Note" scheme="https://luxiong-github.github.io/tags/Note/"/>
    
      <category term="Timing" scheme="https://luxiong-github.github.io/tags/Timing/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://luxiong-github.github.io/2018/12/25/Git/git-command01/"/>
    <id>https://luxiong-github.github.io/2018/12/25/Git/git-command01/</id>
    <published>2018-12-25T13:00:38.000Z</published>
    <updated>2019-09-22T13:54:39.784Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>本文记录的是常见的Git命令及其作用</p></blockquote><a id="more"></a><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure><hr><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git<span class="built_in"> config </span>--list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git<span class="built_in"> config </span>-e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git<span class="built_in"> config </span>[--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git<span class="built_in"> config </span>[--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><hr><h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git <span class="builtin-name">add</span> [file1] [file2] <span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git <span class="builtin-name">add</span> [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git <span class="builtin-name">add</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git <span class="builtin-name">add</span> -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] <span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><hr><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git <span class="keyword">commit</span> -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure><hr><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到上一个分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure><hr><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [<span class="keyword">tag</span>]</span><br></pre></td></tr></table></figure><hr><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，其<span class="string">"提交说明"</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示过去5次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure><hr><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$ </span>git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line"><span class="variable">$ </span>git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$ </span>git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$ </span>git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure><hr><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [<span class="keyword">commit</span>] [<span class="keyword">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--keep [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [<span class="keyword">commit</span>]</span><br><span class="line"></span><br><span class="line">暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><hr><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="variable">$ </span>git archive</span><br></pre></td></tr></table></figure><hr><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>1.<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用Git命令清单</a><br>2.<a href="https://oschina.gitee.io/learn-git-branching/" target="_blank" rel="noopener">在线Git命令学习平台</a><br>3.<a href="https://blog.gitee.com/2019/07/30/最常见的-git-错误都有哪些，如何解决它们？/" target="_blank" rel="noopener">最常见的-git-错误都有哪些，如何解决它们？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;本文记录的是常见的Git命令及其作用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="https://luxiong-github.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://luxiong-github.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git命令大全</title>
    <link href="https://luxiong-github.github.io/2018/12/22/Git/git-command/"/>
    <id>https://luxiong-github.github.io/2018/12/22/Git/git-command/</id>
    <published>2018-12-22T13:00:38.000Z</published>
    <updated>2019-09-09T15:51:30.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>本文记录的是常见的Git命令及其作用</p></blockquote><a id="more"></a><h3 id="增删改查、找回，重置修改文件"><a href="#增删改查、找回，重置修改文件" class="headerlink" title="增删改查、找回，重置修改文件"></a>增删改查、找回，重置修改文件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">help</span> <span class="comment"># 显示command的help</span></span><br><span class="line">git <span class="keyword">show</span> <span class="comment"># 显示某次提交的内容 git show $id</span></span><br><span class="line">git co – <span class="comment"># 抛弃工作区修改</span></span><br><span class="line">git co . <span class="comment"># 抛弃工作区修改</span></span><br><span class="line">git <span class="keyword">add</span> <span class="comment"># 将工作文件修改提交到本地暂存区</span></span><br><span class="line">git <span class="keyword">add</span> . <span class="comment"># 将所有修改过的工作文件提交暂存区</span></span><br><span class="line">git rm <span class="comment"># 从版本库中删除文件</span></span><br><span class="line">git rm –cached <span class="comment"># 从版本库中删除文件，但不删除git文件</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment"># 从暂存区恢复到工作文件</span></span><br><span class="line">git <span class="keyword">reset</span> – . <span class="comment"># 从暂存区恢复到工作文件</span></span><br><span class="line">git <span class="keyword">reset</span> –hard <span class="comment"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span></span><br><span class="line">git ci git ci . git ci -a <span class="comment"># 将git add, git rm和git ci等操作都合并在一起做git ci -am “some comments”</span></span><br><span class="line">git ci –amend <span class="comment"># 修改最后一次提交记录</span></span><br><span class="line">git revert &lt;$<span class="keyword">id</span>&gt; <span class="comment"># 恢复某次提交的状态，恢复动作本身也创建次提交对象</span></span><br><span class="line">git revert <span class="keyword">HEAD</span> <span class="comment"># 恢复最后一次提交的状态</span></span><br></pre></td></tr></table></figure><hr><h3 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">diff </span><span class="comment"># 比较当前文件和暂存区文件差异 git diff</span></span><br><span class="line">git <span class="keyword">diff </span><span class="comment"># 比较两次提交之间的差异</span></span><br><span class="line">git <span class="keyword">diff </span>.. <span class="comment"># 在两个分支之间比较</span></span><br><span class="line">git <span class="keyword">diff </span>–staged <span class="comment"># 比较暂存区和版本库差异</span></span><br><span class="line">git <span class="keyword">diff </span>–<span class="keyword">cached </span><span class="comment"># 比较暂存区和版本库差异</span></span><br><span class="line">git <span class="keyword">diff </span>–stat <span class="comment"># 仅仅比较统计信息</span></span><br></pre></td></tr></table></figure><hr><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> git <span class="built_in">log</span> <span class="comment"># 查看该文件每次提交记录</span></span><br><span class="line">git <span class="built_in">log</span> -p <span class="comment"># 查看每次详细修改内容的diff</span></span><br><span class="line">git <span class="built_in">log</span> -p -2 <span class="comment"># 查看最近两次详细修改内容的diff</span></span><br><span class="line">git <span class="built_in">log</span> –<span class="built_in">stat</span> <span class="comment">#查看提交统计信息</span></span><br><span class="line">tig</span><br><span class="line">Mac上可以使用tig代替diff和<span class="built_in">log</span>，brew install tig</span><br></pre></td></tr></table></figure><hr><h3 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">br </span>-r <span class="comment"># 查看远程分支</span></span><br><span class="line">git <span class="keyword">br </span>&lt;new_branch&gt; <span class="comment"># 创建新的分支</span></span><br><span class="line">git <span class="keyword">br </span>-v <span class="comment"># 查看各个分支最后提交信息</span></span><br><span class="line">git <span class="keyword">br </span>–merged <span class="comment"># 查看已经被合并到当前分支的分支</span></span><br><span class="line">git <span class="keyword">br </span>–no-merged <span class="comment"># 查看尚未被合并到当前分支的分支</span></span><br><span class="line">git co <span class="comment"># 切换到某个分支</span></span><br><span class="line">git co -<span class="keyword">b </span>&lt;new_branch&gt; <span class="comment"># 创建新的分支，并且切换过去</span></span><br><span class="line">git co -<span class="keyword">b </span>&lt;new_branch&gt; <span class="comment"># 基于branch创建新的new_branch</span></span><br><span class="line">git co $id <span class="comment"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span></span><br><span class="line">git co $id -<span class="keyword">b </span>&lt;new_branch&gt; <span class="comment"># 把某次历史提交记录checkout出来，创建成一个分支</span></span><br><span class="line">git <span class="keyword">br </span>-d <span class="comment"># 删除某个分支</span></span><br><span class="line">git <span class="keyword">br </span>-D <span class="comment"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></span><br></pre></td></tr></table></figure><hr><h3 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge <span class="comment"># 将branch分支合并到当前分支</span></span><br><span class="line">git merge origin/<span class="keyword">master</span> <span class="title">–no-ff</span> <span class="comment"># 不要Fast-Foward合并，这样可以生成merge提交</span></span><br><span class="line">git rebase <span class="keyword">master</span> <span class="title"># 将master</span> rebase到branch，相当于： git co &amp;&amp; git rebase <span class="keyword">master</span> <span class="title">&amp;&amp; git</span> co <span class="keyword">master</span> <span class="title">&amp;&amp; git</span> merge</span><br></pre></td></tr></table></figure><hr><h3 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt; ../sync.<span class="keyword">patch</span> <span class="meta"># 生成补丁</span></span><br><span class="line">git apply ../sync.<span class="keyword">patch</span> <span class="meta"># 打补丁</span></span><br><span class="line">git apply –check ../sync.<span class="keyword">patch</span> <span class="meta">#测试补丁能否成功</span></span><br></pre></td></tr></table></figure><hr><h3 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash <span class="comment"># 暂存</span></span><br><span class="line">git stash <span class="built_in">list</span> <span class="comment"># 列所有stash</span></span><br><span class="line">git stash apply <span class="comment"># 恢复暂存的内容</span></span><br><span class="line">git stash drop <span class="comment"># 删除暂存区</span></span><br></pre></td></tr></table></figure><hr><h3 id="Git补丁管理-方便在多台机器上开发同步时用-1"><a href="#Git补丁管理-方便在多台机器上开发同步时用-1" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt; ../sync.<span class="keyword">patch</span> <span class="meta"># 生成补丁</span></span><br><span class="line">git apply ../sync.<span class="keyword">patch</span> <span class="meta"># 打补丁</span></span><br><span class="line">git apply –check ../sync.<span class="keyword">patch</span> <span class="meta">#测试补丁能否成功</span></span><br></pre></td></tr></table></figure><hr><h3 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment"># 抓取远程仓库所有分支更新并合并到本地</span></span><br><span class="line">git pull –no-ff <span class="comment"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span></span><br><span class="line">git fetch <span class="keyword">origin </span><span class="comment"># 抓取远程仓库更新</span></span><br><span class="line">git merge <span class="keyword">origin/master </span><span class="comment"># 将远程主分支合并到本地当前分支</span></span><br><span class="line">git co –track <span class="keyword">origin/branch </span><span class="comment"># 跟踪某个远程分支创建相应的本地分支</span></span><br><span class="line">git co -<span class="keyword">b </span>&lt;local_branch&gt; <span class="keyword">origin/&lt;remote_branch&gt; </span><span class="comment"># 基于远程分支创建本地分支，功能同上</span></span><br><span class="line">git push <span class="comment"># push所有分支</span></span><br><span class="line">git push <span class="keyword">origin </span>master <span class="comment"># 将本地主分支推到远程主分支</span></span><br><span class="line">git push -u <span class="keyword">origin </span>master <span class="comment"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span></span><br><span class="line">git push <span class="keyword">origin </span>&lt;local_branch&gt; <span class="comment"># 创建远程分支， origin是远程仓库名</span></span><br><span class="line">git push <span class="keyword">origin </span>&lt;local_branch&gt;:&lt;remote_branch&gt; <span class="comment"># 创建远程分支</span></span><br><span class="line">git push <span class="keyword">origin </span>:&lt;remote_branch&gt; <span class="comment">#先删除本地分支(git br -d )，然后再push删除远程分支</span></span><br></pre></td></tr></table></figure><hr><h3 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GitHub</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span>-v <span class="comment"># 查看远程服务器地址和仓库名称</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="string">show </span><span class="string">origin </span><span class="comment"># 查看远程服务器仓库状态</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="string">add </span><span class="string">origin </span><span class="string">git@</span> <span class="string">github:robbin/</span><span class="string">robbin_site.</span><span class="string">git </span><span class="comment"># 添加远程仓库地址</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">git@</span> <span class="string">github.</span><span class="string">com:robbin/</span><span class="string">robbin_site.</span><span class="string">git </span><span class="comment"># 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库</span></span><br></pre></td></tr></table></figure><hr><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git </span><span class="string">clone </span>–<span class="string">bare </span><span class="string">robbin_site </span><span class="string">robbin_site.</span><span class="string">git </span><span class="comment"># 用带版本的项目创建纯版本仓库</span></span><br><span class="line"><span class="string">scp </span>-r <span class="string">my_project.</span><span class="string">git </span><span class="string">git@</span> <span class="string">git.</span><span class="string">csdn.</span><span class="string">net:</span>~ <span class="comment"># 将纯仓库上传到服务器上</span></span><br><span class="line"><span class="string">mkdir </span><span class="string">robbin_site.</span><span class="string">git </span>&amp;&amp; <span class="string">cd </span><span class="string">robbin_site.</span><span class="string">git </span>&amp;&amp; <span class="string">git </span>–<span class="string">bare </span><span class="string">init </span><span class="comment"># 在服务器创建纯仓库</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="string">add </span><span class="string">origin </span><span class="string">git@</span> <span class="string">github.</span><span class="string">com:robbin/</span><span class="string">robbin_site.</span><span class="string">git </span><span class="comment"># 设置远程仓库地址</span></span><br><span class="line"><span class="string">git </span><span class="string">push </span>-u <span class="string">origin </span><span class="string">master </span><span class="comment"># 客户端首次提交</span></span><br><span class="line"><span class="string">git </span><span class="string">push </span>-u <span class="string">origin </span><span class="string">develop </span><span class="comment"># 首次将本地develop分支提交到远程develop分支，并且track</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-head</span> <span class="string">origin </span><span class="string">master </span><span class="comment"># 设置远程仓库的HEAD指向master分支,也可以命令设置跟踪远程库和本地库</span></span><br><span class="line"><span class="string">git </span><span class="string">branch </span>–<span class="built_in">set-upstream</span> <span class="string">master </span><span class="string">origin/</span><span class="string">master</span></span><br><span class="line"><span class="string">git </span><span class="string">branch </span>–<span class="built_in">set-upstream</span> <span class="string">develop </span><span class="string">origin/</span><span class="string">develop</span></span><br></pre></td></tr></table></figure><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹.</p><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>获取一个url对应的远程Git repo, 创建一个local copy.一般的格式是<code>git clone [url]</code>.<br>clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以<code>git clone [url] newname</code>指定.</p><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>查询repo的状态.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status -<span class="string">s:</span> -s表示<span class="keyword">short</span>, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.</span><br></pre></td></tr></table></figure><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>show commit history of a branch(查看历史提交信息).</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> –oneline –<span class="built_in">number</span>  <span class="comment">#每条log只显示一行,显示number条.</span></span><br><span class="line">git <span class="built_in">log</span> –oneline –graph   <span class="comment">#可以图形化地表示出分支合并历史.</span></span><br><span class="line">git <span class="built_in">log</span> branchname        <span class="comment">#可以显示特定分支的log.</span></span><br><span class="line">git <span class="built_in">log</span> –oneline branch1 ^branch2 <span class="comment">#可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).</span></span><br><span class="line">git <span class="built_in">log</span> –decorate         <span class="comment">#会显示出tag信息.</span></span><br><span class="line">git <span class="built_in">log</span> –author=[author <span class="built_in">name</span>]     <span class="comment">#可以指定作者的提交历史.</span></span><br><span class="line">git <span class="built_in">log</span> –<span class="keyword">since</span> –<span class="keyword">before</span> –<span class="keyword">until</span> –<span class="keyword">after</span>  <span class="comment">#根据提交时间筛选log.</span></span><br><span class="line">–no-merges                <span class="comment">#可以将merge的commits排除在外.</span></span><br><span class="line">git <span class="built_in">log</span> –grep             <span class="comment">#根据commit信息过滤log: git log –grep=keywords，默认情况下, git log –grep –author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上–all-match的option.</span></span><br><span class="line">git <span class="built_in">log</span> -S                <span class="comment">#filter by introduced diff，比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).</span></span><br><span class="line">git <span class="built_in">log</span> -p                <span class="comment">#show patch introduced at each commit.每一个提交都是一个快照(snapshot)Git会把每次提交的diff计算出来,作为一个patch显示给你看.另一种方法是git show [SHA].</span></span><br><span class="line">git <span class="built_in">log</span> –stat             <span class="comment">#show diffstat of changes introduced at each commit.同样是用来看改动的相对信息的,–stat比-p的输出更简单一些.</span></span><br></pre></td></tr></table></figure><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p>查询repo的状态.</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在提交之前,Git有一个暂存区(staging <span class="meta">area</span>),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging <span class="meta">area</span>中的改动,而不是我们disk上的改动.</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">add </span>.     #会递归地添加当前工作目录中的所有文件.</span><br></pre></td></tr></table></figure><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show </span><span class="keyword">diff </span>of unstaged changes   <span class="comment">#此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.</span></span><br><span class="line">若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:</span><br><span class="line">git <span class="keyword">diff </span>--<span class="keyword">cached </span>命令.</span><br><span class="line"><span class="keyword">show </span><span class="keyword">diff </span>of staged changes.</span><br><span class="line">(Git <span class="number">1</span>.<span class="number">6</span>.<span class="number">1</span> 及更高版本还允许使用 git <span class="keyword">diff </span>--staged，效果是相同的).</span><br><span class="line"></span><br><span class="line">git <span class="keyword">diff </span>HEAD</span><br><span class="line"><span class="keyword">show </span><span class="keyword">diff </span>of all staged <span class="keyword">or </span>unstated changes.</span><br><span class="line">也即比较woking <span class="keyword">directory和上次提交之间所有的改动.</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">如果想看自从某个版本之后都改动了什么,可以用:</span></span><br><span class="line"><span class="keyword">git </span><span class="keyword">diff </span>[version tag]</span><br><span class="line">跟log命令一样,<span class="keyword">diff也可以加上--stat参数来简化输出.</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">git </span><span class="keyword">diff </span>[<span class="keyword">branchA] </span>[<span class="keyword">branchB]可以用来比较两个分支.</span></span><br><span class="line"><span class="keyword">它实际上会返回一个由A到B的patch,不是我们想要的结果.</span></span><br><span class="line"><span class="keyword">一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:</span></span><br><span class="line"><span class="keyword">git </span><span class="keyword">diff </span>[<span class="keyword">branchA]…[branchB]给出的.</span></span><br><span class="line"><span class="keyword">实际上它是:git </span><span class="keyword">diff </span>$(git merge-<span class="keyword">base </span>[<span class="keyword">branchA] </span>[<span class="keyword">branchB]) </span>[<span class="keyword">branchB]的结果.</span></span><br></pre></td></tr></table></figure><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提交已经被add进来的改动.</span><br><span class="line">git <span class="keyword">commit</span> -m “the <span class="keyword">commit</span> message”</span><br><span class="line">git <span class="keyword">commit</span> -a 会先把所有已经track的文件的改动<span class="keyword">add</span>进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git <span class="keyword">add</span>一下.</span><br><span class="line">git <span class="keyword">commit</span> –amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消.</span><br></pre></td></tr></table></figure><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>(1) 概述</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">undo changes and commits.</span><br><span class="line">这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.</span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>: unstage files <span class="keyword">from</span> <span class="keyword">index</span> <span class="keyword">and</span> <span class="keyword">reset</span> pointer <span class="keyword">to</span> <span class="keyword">HEAD</span></span><br><span class="line">这个命令用来把不小心<span class="keyword">add</span>进去的文件从staged状态取出来,可以单独针对某一个文件操作: git <span class="keyword">reset</span> <span class="keyword">HEAD</span> - - filename, 这个- - 也可以不加.</span><br><span class="line">git <span class="keyword">reset</span> –soft</span><br><span class="line"><span class="keyword">move</span> <span class="keyword">HEAD</span> <span class="keyword">to</span> specific <span class="keyword">commit</span> <span class="keyword">reference</span>, <span class="keyword">index</span> <span class="keyword">and</span> staging <span class="keyword">are</span> untouched.</span><br><span class="line">git <span class="keyword">reset</span> –hard</span><br><span class="line">unstage files <span class="keyword">AND</span> <span class="keyword">undo</span> <span class="keyword">any</span> changes <span class="keyword">in</span> the working <span class="keyword">directory</span> since <span class="keyword">last</span> commit.</span><br><span class="line">使用git <span class="keyword">reset</span> —hard <span class="keyword">HEAD</span>进行<span class="keyword">reset</span>,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.</span><br><span class="line">这里的<span class="keyword">HEAD</span>可以被写成任何一次提交的<span class="keyword">SHA</span><span class="number">-1.</span></span><br><span class="line">不带soft和hard参数的git <span class="keyword">reset</span>,实际上带的是默认参数mixed.</span><br></pre></td></tr></table></figure><p>(2) 总结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard id.是将git的HEAD变了,文件也变了.</span></span><br><span class="line">按改动范围排序如下:</span><br><span class="line">soft (<span class="keyword">commit</span>) &lt; mixed (<span class="keyword">commit</span> + <span class="keyword">add</span>) &lt; hard (<span class="keyword">commit</span> + <span class="keyword">add</span> + <span class="keyword">local</span> working)</span><br></pre></td></tr></table></figure><h4 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h4><p>反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了.</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">revert</span> HEAD: 撤销最近的一个提交.</span><br><span class="line">git <span class="built_in">revert</span>会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交.</span><br></pre></td></tr></table></figure><h4 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">rm</span> <span class="keyword">file</span>: 从staging区移除文件,同时也移除出工作目录.</span><br><span class="line">git <span class="keyword">rm</span> –cached: 从staging区移除文件,但留在工作目录中.</span><br><span class="line">git <span class="keyword">rm</span> –cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树.</span><br></pre></td></tr></table></figure><h4 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clean是从工作目录中移除没有track的文件.</span><br><span class="line">通常的参数是git clean -df:</span><br><span class="line">-d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=<span class="literal">true</span>,如果不加-f,clean将会拒绝执行.</span><br></pre></td></tr></table></figure><h4 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm - - <span class="keyword">cached </span><span class="keyword">orig; </span>mv <span class="keyword">orig </span>new<span class="comment">; git add new</span></span><br></pre></td></tr></table></figure><h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">把当前的改动压入一个栈.</span><br><span class="line">git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处.</span><br><span class="line">git stash list会显示这个栈的list.</span><br><span class="line">git stash apply:取出stash中的上一个项目(stash@&#123;<span class="number">0</span>&#125;),并且应用于当前的工作目录.</span><br><span class="line">也可以指定别的项目,比如git stash apply stash@&#123;<span class="number">1</span>&#125;.</span><br><span class="line">如果你在应用stash中项目的同时想要删除它,可以用git stash pop</span><br><span class="line"></span><br><span class="line">删除stash中的项目:</span><br><span class="line">git stash drop: 删除上一个,也可指定参数删除指定的一个项目.</span><br><span class="line">git stash clear: 删除所有项目.</span><br></pre></td></tr></table></figure><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch可以用来列出分支,创建分支和删除分支.</span></span><br><span class="line"><span class="keyword">git </span><span class="keyword">branch </span>-v可以看见每一个分支的最后一次提交.</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch: </span>列出本地所有分支,当前分支会被星号标示出.</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>(<span class="keyword">branchname): </span>创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的).</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-d (<span class="keyword">branchname): </span>删除一个分支.</span><br><span class="line">删除remote的分支:</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>(remote-name) :(<span class="keyword">branch-name): </span>delete a remote <span class="keyword">branch.</span></span><br><span class="line"><span class="keyword">这个是因为完整的命令形式是:</span></span><br><span class="line"><span class="keyword">git </span><span class="keyword">push </span>remote-name local-<span class="keyword">branch:remote-branch</span></span><br><span class="line"><span class="keyword">而这里local-branch的部分为空,就意味着删除了remote-branch</span></span><br></pre></td></tr></table></figure><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout (branchname)     <span class="meta">#切换到一个分支.</span></span><br><span class="line">git checkout -b (branchname)  <span class="meta">#创建并切换到新的分支.</span></span><br><span class="line">这个命令是将git branch <span class="keyword">new</span><span class="type">branch</span>和git checkout <span class="keyword">new</span><span class="type">branch</span>合在一起的结果.</span><br><span class="line">checkout还有另一个作用:<span class="type"></span>替换本地改动:<span class="type"></span></span><br><span class="line"><span class="type">git checkout </span>–</span><br><span class="line">此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响.</span><br><span class="line">注意:<span class="type">git checkout filename</span>会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的.</span><br></pre></td></tr></table></figure><h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><p>把一个分支merge进当前的分支.</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge [alias]/[branch]    #把远程分支merge到当前分支.</span><br><span class="line">如果出现冲突,需要手动修改,可以用git mergetool.</span><br><span class="line">解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved.</span><br></pre></td></tr></table></figure><h4 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tag</span> <span class="title">a</span> point <span class="keyword">in</span> history as import.</span><br><span class="line">会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加<span class="keyword">tag</span>.</span><br><span class="line">比如: git <span class="keyword">tag</span> <span class="title">v1</span>.<span class="number">0</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v1.<span class="number">0</span>, -a参数会允许你添加一些信息,即make an annotated <span class="keyword">tag</span>.</span><br><span class="line">当你运行git <span class="keyword">tag</span> <span class="title">-a</span>命令的时候,Git会打开一个编辑器让你输入<span class="keyword">tag</span>信息.</span><br></pre></td></tr></table></figure><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git </span><span class="string">remote </span>           <span class="comment">#列出remote aliases.</span></span><br><span class="line">如果你<span class="string">clone一</span>个<span class="string">project,</span><span class="string">Git会</span>自动将原来的<span class="string">url添</span>加进来,别名就叫做:<span class="string">origin.</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span>-v         <span class="comment">#可以看见每一个别名对应的实际url.</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="string">add </span>[<span class="string">alias]</span> [<span class="string">url]</span>          <span class="comment">#添加一个新的remote repo.</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="string">rm </span>[<span class="string">alias]</span>                 <span class="comment">#删除一个存在的remote alias.</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="string">rename </span>[<span class="string">old-alias]</span> [<span class="string">new-alias]</span>  <span class="comment">#重命名.</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> [<span class="string">alias]</span> [<span class="string">url]</span>   <span class="comment">#更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址.</span></span><br></pre></td></tr></table></figure><h4 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">download <span class="built_in">new</span> branches <span class="keyword">and</span> data <span class="built_in">from</span> <span class="keyword">a</span> remote repository.</span><br><span class="line">可以git fetch [<span class="built_in">alias</span>]取某一个远程repo,也可以git fetch –all取到全部repo</span><br><span class="line">fetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,<span class="built_in">log</span>等,也可以<span class="built_in">merge</span>到其他分支),但是Git不允许你checkout到它们.</span><br></pre></td></tr></table></figure><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch <span class="built_in">from</span> <span class="keyword">a</span> remote repo <span class="keyword">and</span> <span class="keyword">try</span> <span class="built_in">to</span> <span class="built_in">merge</span> <span class="keyword">into</span> <span class="keyword">the</span> current branch.</span><br><span class="line">pull == fetch + <span class="built_in">merge</span> FETCH_HEAD</span><br><span class="line">git pull会首先执行git fetch,然后执行git <span class="built_in">merge</span>,把取来的分支的head <span class="built_in">merge</span>到当前分支.这个<span class="built_in">merge</span>操作会产生一个新的commit.</span><br><span class="line">如果使用–rebase参数,它会执行git rebase来取代原来的git <span class="built_in">merge</span>.</span><br></pre></td></tr></table></figure><h4 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">–rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.</span><br><span class="line">rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:</span><br><span class="line">git rebase –continue就会继续打余下的补丁.</span><br><span class="line">git rebase –abort将会终止rebase,当前分支将会回到rebase之前的状态.</span><br></pre></td></tr></table></figure><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> [<span class="built_in">alias</span>] [branch]</span><br><span class="line">将会把当前分支merge到<span class="built_in">alias</span>上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支.</span><br><span class="line">如果有多个人向同一个remote repo <span class="built_in">push</span>代码, Git会首先在你试图<span class="built_in">push</span>的分支上运行git <span class="built_in">log</span>,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的<span class="built_in">push</span>,让你先fetch,merge,之后再<span class="built_in">push</span>,这样就保证了所有人的改动都会被考虑进来.</span><br></pre></td></tr></table></figure><h4 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.</span><br><span class="line">当git reflog不指定引用的时候,默认列出HEAD的reflog.</span><br><span class="line">HEAD@&#123;<span class="number">0</span>&#125;代表HEAD当前的值,HEAD@&#123;<span class="number">3</span>&#125;代表HEAD在<span class="number">3</span>次变化之前的值.</span><br><span class="line">git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中.</span><br></pre></td></tr></table></figure><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^<span class="number">1</span>.</span><br><span class="line">~相当于连续的个^.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;本文记录的是常见的Git命令及其作用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="https://luxiong-github.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://luxiong-github.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>批量修改文件名称与格式</title>
    <link href="https://luxiong-github.github.io/2018/12/06/python/rename-file/"/>
    <id>https://luxiong-github.github.io/2018/12/06/python/rename-file/</id>
    <published>2018-12-06T04:38:43.000Z</published>
    <updated>2019-09-18T07:47:27.301Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>主要介绍一下如何利用Python脚本实现给指定的文件数据集按照一定的格式批量重命名，文件不单指图片，其他格式的也可以，此处以图片转换为例，希望能够帮到您(^_−)☆</p></blockquote><a id="more"></a><h4 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h4><p>(1) 写的是python脚本，需要安装<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">python环境</a>，安装教程可自行百度<br>(2) 桌面新建<code>test1.txt</code>文档后将其改为<code>test1.py</code>,打开文档，将以下内容粘贴进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"> </span><br><span class="line">import os</span><br><span class="line">class BatchRename():</span><br><span class="line">    <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    批量重命名文件夹中的图片文件</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.path = <span class="string">'E:\Pictures\'</span>     <span class="comment">#存放图片的文件夹路径，注意转义字符(\b、\t等)</span></span><br><span class="line">    def rename(self):</span><br><span class="line">        filelist = os.listdir(self.path)</span><br><span class="line">        total_num = len(filelist)</span><br><span class="line">        i = 1</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> filelist:</span><br><span class="line">            <span class="keyword">if</span> item.endswith(<span class="string">'.jpg'</span>):  <span class="comment">#指定选取的图片格式为jpg</span></span><br><span class="line"> </span><br><span class="line">                src = os.path.join(os.path.abspath(self.path), item)</span><br><span class="line">                <span class="comment"># 2018-11-20_bqb00  2018-11-20_hzw00</span></span><br><span class="line">                dst = os.path.join(os.path.abspath(self.path), <span class="string">'2018-11-20_00'</span> + str(i) + <span class="string">'.png'</span>)      <span class="comment">#设置新的图片名称</span></span><br><span class="line">                try:</span><br><span class="line">                    os.rename(src, dst)</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">"转换图片 %s 成为 %s ..."</span> % (src, dst))</span><br><span class="line">                    i = i + 1    </span><br><span class="line">                except:</span><br><span class="line">                    <span class="built_in">continue</span></span><br><span class="line"> </span><br><span class="line">        <span class="built_in">print</span> (<span class="string">"共 %d 张图片重命名和转换成 %d jpgs"</span> % (total_num, i-1))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    demo = BatchRename()</span><br><span class="line"> </span><br><span class="line">    demo.rename()</span><br></pre></td></tr></table></figure><p>(3) 只要按自己的需求修改脚本中的中文注释部分即可，上述脚本的功能是：将<code>E:\Pictures\</code>目录下的jpg格式的图片批量重命名为<code>2018-11-20_00</code>形式的png图片</p><blockquote><p>注意路径中的转义字符，例如<code>F:\picture\blog</code>要写成<code>F:\picture\\blog</code><br>(4) 在桌面按住<code>shift+鼠标右键</code>，打开打开PowerShell窗口，执行<code>python test1.py</code>命令,出现如下结果：<br><img src="https://i.ibb.co/yy673gN/grbkdj-16.jpg" alt="批量修改图片"></p></blockquote><h4 id="懒人专用"><a href="#懒人专用" class="headerlink" title="懒人专用"></a>懒人专用</h4><blockquote><p>上面的脚本还有手动输入命令执行，我不想输命令怎么办呢？<br>(1) 在<code>test1.py</code>同级目录(此处为桌面)新建一个<code>test2.txt</code>文档，打开文档，将以下内容粘贴进去：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行批量修改图片脚本</span></span><br><span class="line"><span class="attribute">python</span>  test1.py</span><br></pre></td></tr></table></figure><p>(2) 保存之后将<code>test2.txt</code>改为<code>test2.bat</code>，然后双击就能自动执行上述python脚本文件</p><blockquote><p>注：test2.bat一定要和test2.py在同一目录</p></blockquote><p>参考链接：<a href="https://blog.csdn.net/u014797226/article/details/80028459" target="_blank" rel="noopener">https://blog.csdn.net/u014797226/article/details/80028459</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;主要介绍一下如何利用Python脚本实现给指定的文件数据集按照一定的格式批量重命名，文件不单指图片，其他格式的也可以，此处以图片转换为例，希望能够帮到您(^_−)☆&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://luxiong-github.github.io/categories/Python/"/>
    
      <category term="tools" scheme="https://luxiong-github.github.io/categories/Python/tools/"/>
    
    
      <category term="python" scheme="https://luxiong-github.github.io/tags/python/"/>
    
      <category term="script" scheme="https://luxiong-github.github.io/tags/script/"/>
    
  </entry>
  
  <entry>
    <title>JVM性能分析常用的命令</title>
    <link href="https://luxiong-github.github.io/2018/12/04/java/JVM/jvm01/"/>
    <id>https://luxiong-github.github.io/2018/12/04/java/JVM/jvm01/</id>
    <published>2018-12-04T06:35:46.000Z</published>
    <updated>2019-09-09T12:59:37.517Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>JVM性能分析常用的命令，包括jstack(查看jvm线程运行状态)、jps(显示本地的java进程及对应进程号)、jstat(监视VM内存工具)、jinfo(输出并修改运行时的java进程的opts)、jmap(查看堆内存使用状况)、jconsole(java GUI监视工具)、jvisualvm(JVM运行监控工具)<br>注意：在使用这些工具前，先用JPS命令获取当前的每个JVM进程号[pid]，然后选择要查看的JVM</p></blockquote><a id="more"></a><h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>查看jvm线程运行状态，是否有死锁现象等等信息.</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstack <span class="string">pid :</span>thread dump   <span class="comment">//查看对应进程的jstack的相关语法</span></span><br><span class="line">jstack –l pid     <span class="comment">//查看对应的线程信息</span></span><br><span class="line">jstack –l pid &gt;<span class="string">E:</span>\luxiong.txt <span class="comment">//上述结果打印到指定文档</span></span><br></pre></td></tr></table></figure><hr><h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>与unix上的ps类似，用来显示本地的java进程，可以查看本地运行着几个java程序，并显示他们的进程号.</p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法命令行(<span class="keyword">cmd</span><span class="bash">)里打 jps就行了</span></span><br></pre></td></tr></table></figure><hr><h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>jstat工具特别强大，有众多的可选项，详细查看堆内各个部分的使用量，以及加载类的数量。使用时，需加上查看进程的进程id，和所选参数.</p><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个参数</span></span><br><span class="line">jstat -class pid    <span class="comment">//显示加载class的数量，及所占空间等信息.</span></span><br><span class="line">jstat -compiler pid    <span class="comment">//显示VM实时编译的数量等信息.</span></span><br><span class="line">jstat -gc pid    <span class="comment">//可以显示gc的信息，查看gc的次数，及时间。其中最后五项，分别是young gc的次数，young gc的时间，full gc的次数，full gc的时间，gc的总时间.</span></span><br><span class="line">jstat -gccapacity pid    <span class="comment">//可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小，如：PGCMN显示的是最小perm的内存使用量，PGCMX显示的是perm的内存最大使用量，PGC是当前新生成的perm内存占用量，PC是但前perm内存占用量。其他的可以根据这个类推， OC是old内纯的占用量.</span></span><br><span class="line">jstat -gcnew pid    <span class="comment">//new对象的信息.</span></span><br><span class="line">jstat -gcnewcapacity pid    <span class="comment">//new对象的信息及其占用量.</span></span><br><span class="line">jstat -gcold pid    <span class="comment">//old对象的信息.</span></span><br><span class="line">jstat -gcoldcapacity pid    <span class="comment">//old对象的信息及其占用量.</span></span><br><span class="line">jstat -gcpermcapacity pid    <span class="comment">//perm对象的信息及其占用量.</span></span><br><span class="line">jstat -util pid    <span class="comment">//统计gc信息统计.</span></span><br><span class="line">jstat -printcompilation pid    <span class="comment">//当前VM执行的信息.</span></span><br><span class="line"><span class="comment">//多个参数</span></span><br><span class="line">jstat -class pid <span class="number">250</span> <span class="number">6</span>    <span class="comment">//每250毫秒打印一次，一共打印6次.</span></span><br><span class="line">jstat -class -<span class="selector-tag">h2</span> pid <span class="number">250</span> <span class="number">6</span>    <span class="comment">//上述基础上增加每2行显示一下标题.</span></span><br><span class="line">jstack -gcutil  pid  <span class="number">1000</span> <span class="number">100</span>    <span class="comment">//每1000ms统计一次gc情况统计100次</span></span><br><span class="line">jstat -gcutil pid <span class="number">2000</span> &gt;E:luxiong<span class="selector-class">.txt</span>    <span class="comment">//将上述结果生成指定文件.</span></span><br></pre></td></tr></table></figure><hr><h3 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h3><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><p>可以输出并修改运行时的java进程的运行参数(opts).</p><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -opt pid  <span class="comment">//用法示例(opt表示对应参数,如下示例)</span></span><br><span class="line">jinfo -<span class="built_in">flag</span> MaxPermSize pid     <span class="comment">//查看进程pid的MaxPerm大小</span></span><br></pre></td></tr></table></figure><hr><h3 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h3><h4 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h4><p>jmap是一个可以输出所有内存中对象的工具，甚至可以将VM 中的heap，以二进制输出成文本.</p><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:<span class="keyword">format</span>=b,<span class="keyword">file</span>=E:\luxiong.bin <span class="keyword">pid</span>  //<span class="keyword">file</span>-保存路径及文件名  <span class="keyword">pid</span>-进程编号 </span><br><span class="line">jmap -dump:<span class="keyword">file</span>=E:\luxiong.dump <span class="keyword">pid</span>  //<span class="keyword">file</span>-保存路径及文件名  <span class="keyword">pid</span>-进程编号 </span><br><span class="line">jmap -histo:live <span class="keyword">pid</span>    //堆中活动的对象以及大小</span><br><span class="line">jmap -heap <span class="keyword">pid</span>  //查看堆的使用状况信息</span><br></pre></td></tr></table></figure><hr><h3 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h3><h4 id="功能-5"><a href="#功能-5" class="headerlink" title="功能"></a>功能</h4><p>用java写的GUI程序，用来监控VM，并可监控远程的VM，非常易用，而且功能非常强.</p><h4 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法命令行(<span class="keyword">cmd</span><span class="bash">)里打 jconsole，选则相应的进程就行了</span></span><br></pre></td></tr></table></figure><hr><h3 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h3><h4 id="功能-6"><a href="#功能-6" class="headerlink" title="功能"></a>功能</h4><p>用来监控JVM的运行情况，可以用它来查看和浏览Heap、Dump、ThreadDump、内存对象实例情况、GC执行情况、CPU消耗以及类的装载情况。该工具位于JDK根目录的bin文件夹下面，无需安装，正常装完jdk吼直接在bin目录下运行jvisual.exe即可.</p><h4 id="常用命令-6"><a href="#常用命令-6" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法命令行(<span class="keyword">cmd</span><span class="bash">)里打 jvisualvm，选则相应的进程就可以(功能远比jconsole强大)</span></span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>（1）概述：显示当前服务器(resin)的整体运行状况<br><img src="https://note.youdao.com/yws/res/1191/WEBRESOURCEd43fc2c1434cfc4a7c05e9a9e859bb94" alt="概述.png"></p><p>（2）监视：可实时动态显示cpu、堆栈、类、线程的相关信息(类似于jconsole的升级版)<br><img src="https://note.youdao.com/yws/res/1191/WEBRESOURCEd43fc2c1434cfc4a7c05e9a9e859bb94" alt="概述.png"></p><p>（3）线程：可实时动态的现实进程的使用状况<br><img src="https://note.youdao.com/yws/res/1191/WEBRESOURCEd43fc2c1434cfc4a7c05e9a9e859bb94" alt="概述.png"><br>点击[==线程Dump==]按钮 可以显示具体的进程的内容，可从此页面查看到进程的具体信息以及报错信息(类似于jstack命令的查看结果)<br><img src="https://note.youdao.com/yws/res/1205/WEBRESOURCE6a2316d766a3ab399772cf9bba57a4ee" alt="线程Dump.png"></p><p>（4）：显示当前服务器(resin)的整体运行状况<br><img src="https://note.youdao.com/yws/res/1191/WEBRESOURCEd43fc2c1434cfc4a7c05e9a9e859bb94" alt="概述.png"></p><hr><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>1.<a href="https://blog.csdn.net/u012550080/article/details/81605189" target="_blank" rel="noopener">https://blog.csdn.net/u012550080/article/details/81605189</a><br>2.<a href="http://www.51testing.com/html/38/n-3724238.html" target="_blank" rel="noopener">http://www.51testing.com/html/38/n-3724238.html</a><br>3.<a href="https://blog.51cto.com/zero01/2141942" target="_blank" rel="noopener">https://blog.51cto.com/zero01/2141942</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;JVM性能分析常用的命令，包括jstack(查看jvm线程运行状态)、jps(显示本地的java进程及对应进程号)、jstat(监视VM内存工具)、jinfo(输出并修改运行时的java进程的opts)、jmap(查看堆内存使用状况)、jconsole(java GUI监视工具)、jvisualvm(JVM运行监控工具)&lt;br&gt;注意：在使用这些工具前，先用JPS命令获取当前的每个JVM进程号[pid]，然后选择要查看的JVM&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luxiong-github.github.io/categories/Java/"/>
    
      <category term="JVM" scheme="https://luxiong-github.github.io/categories/Java/JVM/"/>
    
    
      <category term="java" scheme="https://luxiong-github.github.io/tags/java/"/>
    
      <category term="JVM" scheme="https://luxiong-github.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java线程的七种状态</title>
    <link href="https://luxiong-github.github.io/2018/11/04/java/java-thread/"/>
    <id>https://luxiong-github.github.io/2018/11/04/java/java-thread/</id>
    <published>2018-11-04T06:35:46.000Z</published>
    <updated>2019-09-09T12:59:55.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>本文简单介绍一下Java线程的七种状态</p></blockquote><a id="more"></a><h3 id="Java线程有7种状态，分别是"><a href="#Java线程有7种状态，分别是" class="headerlink" title="Java线程有7种状态，分别是:"></a>Java线程有7种状态，分别是:</h3><h4 id="1-新建状态-new"><a href="#1-新建状态-new" class="headerlink" title="1. 新建状态(new)"></a>1. 新建状态(new)</h4><p>（1）使用new操作符新创建的一个线程对象，例如<code>new Thread()</code>;<br>（2）处于新建状态的线程，内部的任务代码还没开始运行.</p><h4 id="2-可执行-就绪状态-Runnable"><a href="#2-可执行-就绪状态-Runnable" class="headerlink" title="2. 可执行/就绪状态(Runnable)"></a>2. 可执行/就绪状态(Runnable)</h4><p>（1）新创建的线程并不自动开始运行，要执行线程，必须调用线程的<code>start()</code>方法。当调用了线程对象的<code>start()</code>方法即启动了线程，此时线程就处于就绪状态;<br>（2）处于就绪状态的线程并不一定立即运行<code>run()</code>方法，线程还必须==同其他就绪线程竞争CPU==，只有==获得CPU使用权才可以运行线程==;<br>（3）线程阻塞状态(Blocked)结束后也可以变成就绪状态，或从运行状态(Running)变化到就绪状态.</p><h4 id="3-运行状态-Running"><a href="#3-运行状态-Running" class="headerlink" title="3. 运行状态(Running)"></a>3. 运行状态(Running)</h4><p>（1）线程获取到CPU使用权进行执行;<br>（2）需要注意的是，==线程只能从就绪状态进入到运行状态==,真正开始执行run()方法的内容.</p><h4 id="4-阻塞状态-Blocked"><a href="#4-阻塞状态-Blocked" class="headerlink" title="4. 阻塞状态(Blocked)"></a>4. 阻塞状态(Blocked)</h4><p>（1）线程在获取锁失败时(因为锁被其它线程抢占)，它会被加入锁的同步阻塞队列，然后线程进入阻塞状态(Blocked);<br>（2）待其它线程释放锁之后，阻塞状态(Blocked)的线程将在次参与锁的竞争，如果==竞争锁成功==，==线程将进入就绪状态==(Runnable),之后才有机会转到运行状态(Running).</p><h4 id="5-等待状态-Waiting"><a href="#5-等待状态-Waiting" class="headerlink" title="5. 等待状态(Waiting)"></a>5. 等待状态(Waiting)</h4><p>（1）线程执行<code>wait()</code>方法，JVM会把该线程放入等待队列(waitting queue)中,进入等待状态;<br>（2）处于等待状态的线程将不会被CPU执行，除非线程的运行条件得到满足后，其==可被其他线程唤醒==，进入阻塞状态(Blocked);<br>（3）调用不带超时的<code>Thread.join()</code>方法也会进入等待状态.</p><h4 id="6-睡眠-Sleep"><a href="#6-睡眠-Sleep" class="headerlink" title="6. 睡眠(Sleep)"></a>6. 睡眠(Sleep)</h4><p>（1）睡眠是等待状态的一种特例，在调用<code>Thread.sleep()</code>方法，带有超时设定的<code>Object.wait()</code>方法，带有超时设定的<code>Thread.join()</code>方法等，线程会进入睡眠状态(Sleep);<br>（2）睡眠状态进程达到设置时间的等待时间后，睡眠线程将==自动唤醒进入阻塞状态==(Blocked)或就绪状态(Runnable).</p><h4 id="7-死亡-Dead"><a href="#7-死亡-Dead" class="headerlink" title="7. 死亡(Dead)"></a>7. 死亡(Dead)</h4><p>（1）线程执行完了或者因异常退出了<code>run()</code>方法，该线程结束生命周期,死亡的线程==不可再次复生==. </p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>1.<a href="https://baijiahao.baidu.com/s?id=1626410873162104506&wfr=spider&for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1626410873162104506&amp;wfr=spider&amp;for=pc</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;本文简单介绍一下Java线程的七种状态&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://luxiong-github.github.io/categories/Java/"/>
    
      <category term="Thread" scheme="https://luxiong-github.github.io/categories/Java/Thread/"/>
    
    
      <category term="java" scheme="https://luxiong-github.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="https://luxiong-github.github.io/2018/09/23/study/markdown01/"/>
    <id>https://luxiong-github.github.io/2018/09/23/study/markdown01/</id>
    <published>2018-09-23T06:20:20.000Z</published>
    <updated>2019-09-02T01:58:02.450Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单介绍一下Markdown的基本语法(未完善，待补充…)</p></blockquote><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在想要设置为标题的文字前面加<code>#</code>来表示<br>注：标准语法一般在#后跟个空格再写文字<br>（1）示例：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>（2）效果：<br>由于标题演示效果会影响目录结构，故不展示效果</p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>（1）简介</p><ul><li><strong>加粗</strong><br>要加粗的文字左右分别用两个*号包起来</li><li><strong>斜体</strong><br>要加粗的文字左右分别用一个*号包起来</li><li><strong>斜体加粗</strong><br>要倾斜和加粗的文字左右分别用三个*号包起来</li><li><strong>删除线</strong><br>要加删除线的文字左右分别用两个~~号包起来</li></ul><p>（2）示例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*<span class="strong">*这是加粗的文字*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>这是倾斜的文字<span class="strong">*`</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*这是斜体加粗的文字*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">~~这是加删除线的文字~~</span></span><br></pre></td></tr></table></figure><p>（3）效果：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在引用的文字前加&gt;即可。<br>引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;等等</p><p>（1）示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line"><span class="meta">&gt;&gt;</span>这是引用的内容</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>（2）效果：  </p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或者三个以上的 - 或者 * 都可以</p><p>（1）示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span><span class="meta">---</span></span><br><span class="line"><span class="string">***</span></span><br><span class="line"><span class="string">*****</span></span><br></pre></td></tr></table></figure><p>（2）效果：</p><hr><hr><hr><hr><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>（1）简介<br>基本语法：<code>![图片alt](图片URL&quot;图片title&quot;&quot;)</code><br>图片alt:显示在图片下面的文字，相当于对图片内容的解释;<br>图片URL:图片的链接URL<br>图片title:当鼠标移到图片上时显示的内,title可加可不加(==URL和title之间有个空格==)</p><p>（2）示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">这是一张示例图片</span>](<span class="link">https://ibb.co/album/kshZBF  ''海贼王''</span>)</span><br></pre></td></tr></table></figure><p>（3）效果：<br><img src="https://i.ibb.co/zScQPd0/6.jpg" alt="这是一张示例图片" title="海贼王"></p><p>图片必须配合链接使用，所以必须有一个好的图床工具： </p><ol><li>七牛云：<a href="https://www.qiniu.com/" target="_blank" rel="noopener">https://www.qiniu.com/</a></li><li>ImgBB：<a href="https://imgbb.com/" target="_blank" rel="noopener">https://imgbb.com/</a></li><li>聚合图床：<a href="https://www.superbed.cn/" target="_blank" rel="noopener">https://www.superbed.cn/</a><br>百度直接搜索关键字“免费图床”，可以搜到一堆</li></ol><hr><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><h3 id="初级链接"><a href="#初级链接" class="headerlink" title="初级链接"></a>初级链接</h3><p>（1）基本语法：<code>[超链接名](超链接URL &quot;超链接title&quot;)</code><br>title可加可不加,语法参照图片  </p><p>（2）示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">简书</span>](<span class="link">http://jianshu.com</span>)</span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://baidu.com</span>)</span><br></pre></td></tr></table></figure><p>（3）效果：<br><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>（1）示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">链接也可以用变量来代替，文档末尾附带变量地址：</span><br><span class="line">这个链接用 1 作为网址变量 [<span class="string">Google</span>][<span class="symbol">1</span>]</span><br><span class="line">这个链接用 runoob 作为网址变量 [<span class="string">Runoob</span>][<span class="symbol">runoob</span>]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [1]: http://www.google.com/</span><br><span class="line">  [runoob]: http://www.runoob.com/</span><br></pre></td></tr></table></figure><p>（2）效果<br><a href="http://www.baidu.com/" target="_blank" rel="noopener">百度</a><br><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a>  </p><p>注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替。例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"https://www.jianshu.com/u/1f5ac0cf6a8b"</span> <span class="attribute">target</span>=<span class="string">"_blank"</span>&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表分为无序列表和有序列表</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表用 - + * 任何一种都可以  </p><p>（1）示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>列表内容</span><br><span class="line"><span class="bullet">+ </span>列表内容</span><br><span class="line"><span class="bullet">* </span>列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>（2）效果：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>数字加点 </p><p>（1）示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>列表内容</span><br><span class="line"><span class="bullet">2. </span>列表内容</span><br><span class="line"><span class="bullet">3. </span>列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>（2）效果：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p>注意：序号跟内容之间要有空格 </p><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><ul><li>一级无序列表<ul><li>二级无序列表</li><li>二级无序列表</li></ul></li><li>一级无序列表<ol><li>二级有序列表</li><li>二级有序列表</li></ol></li></ul><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>（1）语法：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|<span class="string">表头</span>|<span class="string">表头</span></span><br><span class="line"><span class="string">---</span>|<span class="string">:--:</span>|<span class="string">---:</span></span><br><span class="line"><span class="string">内容</span>|<span class="string">内容</span>|<span class="string">内容</span></span><br><span class="line"><span class="string">内容</span>|<span class="string">内容</span>|<span class="string">内容</span></span><br><span class="line"></span><br><span class="line"><span class="string">第二行分割表头和内容。</span></span><br><span class="line"><span class="string">- 有一个就行，为了对齐，多加了几个</span></span><br><span class="line"><span class="string">文字默认居左</span></span><br><span class="line"><span class="string">-两边加：表示文字居中</span></span><br><span class="line"><span class="string">-右边加：表示文字居右</span></span><br><span class="line"><span class="string">注：原生的语法两边都要用 </span>|<span class="string"> 包起来。此处省略</span></span><br></pre></td></tr></table></figure><p>（2）示例：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|<span class="string">技能</span>|<span class="string">排行</span></span><br><span class="line"><span class="string">--</span>|<span class="string">:--:</span>|<span class="string">--:</span></span><br><span class="line"><span class="string">刘备</span>|<span class="string">哭</span>|<span class="string">大哥</span></span><br><span class="line"><span class="string">关羽</span>|<span class="string">打</span>|<span class="string">二哥</span></span><br><span class="line"><span class="string">张飞</span>|<span class="string">骂</span>|<span class="string">三弟</span></span><br></pre></td></tr></table></figure><p>（3）效果：<br>姓名|技能|排行<br>–|:–:|–:<br>刘备|哭|大哥<br>关羽|打|二哥<br>张飞|骂|三弟</p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h3><p>代码之间分别用一个反引号包起来<br>（1）示例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">create</span> <span class="keyword">database</span> hero;`</span><br></pre></td></tr></table></figure><p>（2）效果：<br><code>create database hero;</code></p><h3 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h3><p>代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br>示例及效果：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    echo <span class="string">"这是一句非常牛逼的代码"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><hr><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><h3 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h3><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><hr><h2 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h2><p><code>- [x]</code>：表示已完成<br><code>- [ ]</code>：表示未完成<br>（1）示例：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- <span class="string">[x]</span> 已完成项目<span class="number">1</span></span><br><span class="line">  - <span class="string">[x]</span> 已完成事项<span class="number">1</span></span><br><span class="line">  - <span class="string">[x]</span> 已完成事项<span class="number">2</span></span><br><span class="line">- <span class="string">[ ]</span> 待完成项目<span class="number">1</span></span><br><span class="line">  - <span class="string">[ ]</span> 待完成事项<span class="number">1</span></span><br><span class="line">  - <span class="string">[ ]</span> 待完成事项<span class="number">2</span></span><br></pre></td></tr></table></figure><p>（2）效果：</p><ul><li><input checked disabled type="checkbox"> 已完成项目1<ul><li><input checked disabled type="checkbox"> 已完成事项1</li><li><input checked disabled type="checkbox"> 已完成事项2</li></ul></li><li><input disabled type="checkbox"> 待完成项目1<ul><li><input disabled type="checkbox"> 待完成事项1</li><li><input disabled type="checkbox"> 待完成事项2</li></ul></li></ul><hr><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>（1）简介<br>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等<br>（2）示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>test<span class="tag">&lt;/<span class="name">b</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>test<span class="tag">&lt;/<span class="name">i</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>test<span class="tag">&lt;/<span class="name">em</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>test<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>test<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>test<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）效果<br><b>test</b><br><i>test</i><br><em>test</em><br><sup>test</sup><br><sub>test</sub><br><br>test<br>  </p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>（1）简介<br>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符<br>（2）示例</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**文本加粗**   </span><br><span class="line"><span class="symbol">\*</span><span class="symbol">\*</span> 正常显示星号 <span class="symbol">\*</span><span class="symbol">\*</span></span><br></pre></td></tr></table></figure><p>（3）效果<br><strong>文本加粗</strong><br>** 正常显示星号 **</p><hr><p><strong>参考文档</strong>：<br>1.<a href="http://note.youdao.com/iyoudao/?p=2411" target="_blank" rel="noopener">有道云笔记Markdown指南</a><br>2.<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简单介绍一下Markdown的基本语法(未完善，待补充…)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="实用技术" scheme="https://luxiong-github.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Markdown教程" scheme="https://luxiong-github.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/Markdown%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Note" scheme="https://luxiong-github.github.io/tags/Note/"/>
    
      <category term="Markdown" scheme="https://luxiong-github.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>博客插件、展望</title>
    <link href="https://luxiong-github.github.io/2018/09/04/hexo/hexo-blog04/"/>
    <id>https://luxiong-github.github.io/2018/09/04/hexo/hexo-blog04/</id>
    <published>2018-09-04T06:35:46.000Z</published>
    <updated>2019-09-24T15:21:38.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>介绍博客的一些用法、功能以及相关插件…</p></blockquote><a id="more"></a><h3 id="相关插件"><a href="#相关插件" class="headerlink" title="相关插件"></a>相关插件</h3><h4 id="Hexo相关初始化配置"><a href="#Hexo相关初始化配置" class="headerlink" title="Hexo相关初始化配置"></a>Hexo相关初始化配置</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><h4 id="安装自动部署发布工具"><a href="#安装自动部署发布工具" class="headerlink" title="安装自动部署发布工具"></a>安装自动部署发布工具</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h4 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-generator-index</span></span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-generator-archive</span></span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-generator-tag</span></span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-generator-category</span></span><br></pre></td></tr></table></figure><h4 id="文章字数与阅读时长-wordcount-插件"><a href="#文章字数与阅读时长-wordcount-插件" class="headerlink" title="文章字数与阅读时长 wordcount 插件"></a>文章字数与阅读时长 wordcount 插件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-wordcount <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h4 id="RSS订阅功能"><a href="#RSS订阅功能" class="headerlink" title="RSS订阅功能"></a>RSS订阅功能</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h4 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-generator-searchdb</span></span><br></pre></td></tr></table></figure><h4 id="Gitment评论"><a href="#Gitment评论" class="headerlink" title="Gitment评论"></a>Gitment评论</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> --save gitment</span><br></pre></td></tr></table></figure><h4 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-blog-encrypt</span></span><br></pre></td></tr></table></figure><h4 id="hexo-admin文章管理"><a href="#hexo-admin文章管理" class="headerlink" title="hexo-admin文章管理"></a>hexo-admin文章管理</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-admin</span></span><br></pre></td></tr></table></figure><hr><h3 id="图片上传相册"><a href="#图片上传相册" class="headerlink" title="图片上传相册"></a>图片上传相册</h3><h4 id="git连接远程Blog-Album"><a href="#git连接远程Blog-Album" class="headerlink" title=" git连接远程Blog_Album"></a><a id="update"> git连接远程Blog_Album</a></h4><blockquote><p>此小块所有命令均在<code>Blog_Album</code>目录下打开终端执行<br>(1) 执行<code>git remote add origin https://github.com/luxiong-github/Blog_Album.git</code>为本地仓库添加一个远程仓库<br>如果此处出现<code>fatal: remote origin already exists.</code>错误，说明远程起源已经存在，则先执行<code>git remote rm origin</code>再执行上述命令<br>(2) 拉取远程仓库代码：<code>git pull --rebase origin master</code>(远程仓库被更新本地没更新才需要执行)<br><code>git pull --rebase origin master</code></p></blockquote><h4 id="上传照片"><a href="#上传照片" class="headerlink" title="上传照片"></a>上传照片</h4><p>(1) 将照片放到<code>Blog_Album\photos</code>目录中，命名格式：yyyy-MM-dd_des.jpg/jpeg/gif/png.(脚本解析jpg有问题，最好使用png)<br>(2) 终端切换到<code>Blog_Album</code>目录下(或者直接在Blog_Album目录下<code>shift+鼠标右键</code>打开PowerShell窗口),执行<code>python tool.py</code>命令</p><blockquote><p>如果出现<code>error: failed to push some refs to</code>错误，说明本地没有update到最新版本的项目（git上有README.md文件没下载下来）,<a href="#update">执行此处命令</a><br>(3) 如果上述命令执行无误，则可进入自己GitHub的<code>Blog_Album</code>仓库中进行查看<br>(4) hexo g  &amp;&amp;  hexo s进入博客查看</p></blockquote><p>参考：<a href="https://malizhi.cn/HexoAlbum/" target="_blank" rel="noopener">https://malizhi.cn/HexoAlbum/</a></p><hr><h3 id="源码提交gitee"><a href="#源码提交gitee" class="headerlink" title="源码提交gitee"></a>源码提交gitee</h3><p>(1) <code>my-blog</code>目录下打开终端，输入命令初始化创建一个空的本地仓库：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure><p>(2) 将本地库与远程仓库(gitee)进行链接：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//gitee.<span class="keyword">com</span>/luxiong-gitee/blog-code.git</span><br></pre></td></tr></table></figure><p>(3) 将项目的所有文件添加到缓存中：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br></pre></td></tr></table></figure><p>(4) 将缓存中的文件Commit到git库：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">"项目源码上传"</span></span><br></pre></td></tr></table></figure><p>(5) 上传代码之前最好先pull一下(拉取远程仓库最新代码)：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin <span class="literal">master</span></span><br></pre></td></tr></table></figure><p>(6) 代码提交到远程库：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><h3 id="待优化项目"><a href="#待优化项目" class="headerlink" title="待优化项目"></a>待优化项目</h3><ul><li><p>Fork me on GitHub</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"https://github.com/luxiong-github"</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">img</span> <span class="attribute">width</span>=<span class="string">"149"</span> height=<span class="string">"149"</span> src=<span class="string">"https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149"</span> class=<span class="string">"attachment-full size-full"</span> alt=<span class="string">"Fork me on GitHub"</span> data-recalc-dims=<span class="string">"1"</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>流程图  </p></li><li><p>相册  <a href="https://malizhi.cn/HexoAlbum/" target="_blank" rel="noopener">https://malizhi.cn/HexoAlbum/</a></p></li><li><p><a href="https://www.jianshu.com/p/7f6425b3ffb2" target="_blank" rel="noopener">https://www.jianshu.com/p/7f6425b3ffb2</a></p></li><li><p>URL优化</p></li><li><p>站点提交百度、Google  <a href="https://malizhi.cn/nextTutorial/#more" target="_blank" rel="noopener">https://malizhi.cn/nextTutorial/#more</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;介绍博客的一些用法、功能以及相关插件…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo个人博客搭建" scheme="https://luxiong-github.github.io/categories/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Git" scheme="https://luxiong-github.github.io/tags/Git/"/>
    
      <category term="Blog" scheme="https://luxiong-github.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://luxiong-github.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://luxiong-github.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建-加强</title>
    <link href="https://luxiong-github.github.io/2018/09/02/hexo/hexo-blog03/"/>
    <id>https://luxiong-github.github.io/2018/09/02/hexo/hexo-blog03/</id>
    <published>2018-09-02T06:35:46.000Z</published>
    <updated>2019-09-24T16:30:37.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>给博客增加一些更高级的功能，例如分页、站内搜索、评论…</p></blockquote><a id="more"></a><h3 id="Hexo文章加密"><a href="#Hexo文章加密" class="headerlink" title="Hexo文章加密"></a>Hexo文章加密</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>(1) 尝试着想一下，你写了一篇博客，但是，出于某种原因，不太希望每一个人都可以看到他。所以你常常会为这种文章设置一个密码，其他人需要输入密码才可以访问这篇博客。所以<code>Hexo-Blog-Encrypt</code> 因为这个需求而诞生了<br>(2) 一旦你输入了正确的密码，你可以在接下来的 30 分钟内，无需密码访问该网页</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>(1) 命令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>--save hexo-<span class="keyword">blog-encrypt </span>   <span class="comment"># npm安装</span></span><br><span class="line"></span><br><span class="line">yarn <span class="keyword">add </span>hexo-<span class="keyword">blog-encrypt </span>             <span class="comment"># yarn安装</span></span><br></pre></td></tr></table></figure><p>(2) 在站点配置文件<code>_config.yml</code>中添加插件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tags:</span>  <span class="comment"># 配置标签加密</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;name:</span> <span class="string">test,</span> <span class="attr">password:</span> <span class="string">test&#125;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;name:</span> <span class="string">diary,</span> <span class="attr">password:</span> <span class="string">diary&#125;</span></span><br></pre></td></tr></table></figure><p>(3) 文章头部添加对应字段，如password, abstract, message：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-03</span><span class="bullet">-30</span> <span class="number">21</span><span class="string">:18:02</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">mikemessi</span> <span class="comment"># 该博客加密使用的密码</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">Something</span> <span class="string">was</span> <span class="string">encrypted,</span> <span class="string">please</span> <span class="string">enter</span> <span class="string">password</span> <span class="string">to</span> <span class="string">read.</span>   <span class="comment">#该博客的摘要，会显示在博客的列表页</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">blog,</span> <span class="string">please</span> <span class="string">enter</span> <span class="string">password</span> <span class="string">to</span> <span class="string">read.</span> <span class="comment">#博客查看时，密码输入框上面的描述性文字</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>(4) <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，来查看效果</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>(1) 文章设置的password优先级最高，其次是设置标签加密，文章多标签加密密码优先级跟文章标签先后顺序有关<br>(2) 密码的有效时间是30分钟<br>(3) 插件还可以对<code>TOC</code>进行加密以及修改加密模板，详情见参考链接<br>(4) 加密后的文章可能会有不显示文章目录的bug，解决方案：将<code>next/layout/_macro/sidebar.swig</code>替换为<a href="https://blog.csdn.net/crazy_scott/article/details/80996427" target="_blank" rel="noopener">这个博客</a>中的文件</p><p>参考链接：<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md</a></p><hr><h3 id="Valine评论"><a href="#Valine评论" class="headerlink" title="Valine评论"></a>Valine评论</h3><h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><p>Next主题，本身就已经集成了valine，因此正常情况下只需要配置一下就行了，<code>不用安装</code>，需要安装的可以使用以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install leancloud's js-sdk</span></span><br><span class="line">npm <span class="keyword">install</span> leancloud-<span class="keyword">storage</span> <span class="comment">--save</span></span><br><span class="line"><span class="comment"># Install valine</span></span><br><span class="line">npm <span class="keyword">install</span> valine <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h4 id="Leancloud配置"><a href="#Leancloud配置" class="headerlink" title="Leancloud配置"></a>Leancloud配置</h4><p>(1) 之前的文章次数统计已经配置过了，这里只需要进入<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>获取对应的<code>APP ID</code>和<code>APP KEY</code>就行了<br>(2) 修改主题配置文件<code>hexo\themes\next\_config.yml</code>，修改以下参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="string">//打开valine评论功能</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">你的leancloud</span> <span class="string">appid</span> </span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">你的leancloud</span> <span class="string">appkey</span> </span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="string">//邮件提醒</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">true</span> <span class="string">//评论时是否有验证码，需要在Leancloud</span> <span class="string">设置-&gt;安全中心</span> <span class="string">中打开</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">说点什么吧！</span> <span class="string">//评论框默认显示</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">monsterid</span> <span class="string">//评论者的头像</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure><p>(3) 评论者头像<code>avatar</code>取值与显示效果如下：<br><img src="https://i.ibb.co/QXTNR0c/grbkdj-13.png" alt="valine头像"></p><!-- #### Valine 扩展之邮件通知(待改进)http://www.zhaojun.im/hexo-valine-admin/#### Valine加强(待改进)https://deserts.io/diy-a-comment-system/ --><hr><h3 id="hexo管理插件"><a href="#hexo管理插件" class="headerlink" title="hexo管理插件"></a>hexo管理插件</h3><h4 id="hexo-admin"><a href="#hexo-admin" class="headerlink" title="hexo-admin"></a>hexo-admin</h4><p>(1) 安装插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-admin</span></span><br></pre></td></tr></table></figure><p>(2) 测试<br><code>hexo s</code>启动服务，访问<code>http://localhost:4000/admin/</code>，就可以看到管理页面</p><h4 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h4><ul><li>Pages：新加 page</li><li>Posts：新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布</li><li>Settings：一些配置</li><li>Deploy：可以直接部署到 github<br>(1) 密码保护<br>打开<code>Setting</code>，点击<code>Setup authentification here</code>输入用户名，密码，密钥，下面会自动生成配置文件，复制加在hexo根目录下的<code>_config.yml</code>中：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  username: myfavoritename</span><br><span class="line">  password_hash: be121740bf988b2225a313fa1f107ca1</span><br><span class="line">  secret: a<span class="built_in"> secret </span>something</span><br></pre></td></tr></table></figure></li></ul><p>(2) 发布文章<br>进入后台之后点击<code>Deploy</code>，里面的<code>Deploy</code>按钮是用来执行发布脚本的，所以我们先在博客根目录下新建个目录脚本文件<code>hexo-deploy.bat</code>(window系统，Linux系统可参考<a href="https://github.com/jaredly/hexo-admin/issues/70" target="_blank" rel="noopener">链接</a>)，里面写下下面代码然后保存:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g -d</span></span><br></pre></td></tr></table></figure><p>然后在hexo根目录下的<code>_config.yml</code>中的admin下添加：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">admin</span>:</span><br><span class="line">  <span class="attribute">username</span>: myfavoritename</span><br><span class="line">  <span class="attribute">password_hash</span>: be121740bf988b2225a313fa1f107ca1</span><br><span class="line">  <span class="attribute">secret</span>: a secret something</span><br><span class="line">  <span class="attribute">deployCommand</span>: <span class="string">'./hexo-deploy.bat'</span>  #新增参数</span><br></pre></td></tr></table></figure><p>点击<code>Deploy</code>就会执行这个命令并提交到<code>GitHub</code>上</p><p>参考：<br>(1) <a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">https://github.com/jaredly/hexo-admin</a><br>(2) <a href="https://blog.csdn.net/dataiyangu/article/details/83066586" target="_blank" rel="noopener">https://blog.csdn.net/dataiyangu/article/details/83066586</a><br>(3) <a href="https://albenw.github.io/posts/4ffa5bc6/" target="_blank" rel="noopener">https://albenw.github.io/posts/4ffa5bc6/</a><br>(4) <a href="https://segmentfault.com/a/1190000018488921" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018488921</a></p><hr><h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><blockquote><p>注：Next主题默认是不含有相册页面的,如果想添加此页面需自行编写</p></blockquote><h4 id="相册和视频导航栏"><a href="#相册和视频导航栏" class="headerlink" title="相册和视频导航栏"></a>相册和视频导航栏</h4><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><h4 id="博客相册页面"><a href="#博客相册页面" class="headerlink" title="博客相册页面"></a>博客相册页面</h4><h4 id="图片的处理"><a href="#图片的处理" class="headerlink" title="图片的处理"></a>图片的处理</h4><hr><h3 id="小功能集合"><a href="#小功能集合" class="headerlink" title="小功能集合"></a>小功能集合</h3><h4 id="文章链接唯一化"><a href="#文章链接唯一化" class="headerlink" title="文章链接唯一化"></a>文章链接唯一化</h4><p>hexo默认提供的文章链接方案是使用年/月/日/标题，也许你会数次更改文章题目或者变更文章发布时间，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择<br>(1) 安装插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-abbrlink <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>(2) 在站点配置文件中查找代码<code>permalink</code>，将其更改为:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">permalink:</span> posts/<span class="symbol">:abbrlink/</span>  <span class="comment"># “posts/” 可自行更换</span></span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>(1) <a href="https://malizhi.cn/HexoAlbum/" target="_blank" rel="noopener">https://malizhi.cn/HexoAlbum/</a><br>(2) <a href="https://www.jianshu.com/p/7f6425b3ffb2" target="_blank" rel="noopener">https://www.jianshu.com/p/7f6425b3ffb2</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;给博客增加一些更高级的功能，例如分页、站内搜索、评论…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo个人博客搭建" scheme="https://luxiong-github.github.io/categories/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Git" scheme="https://luxiong-github.github.io/tags/Git/"/>
    
      <category term="Blog" scheme="https://luxiong-github.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://luxiong-github.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://luxiong-github.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建-完善</title>
    <link href="https://luxiong-github.github.io/2018/08/31/hexo/hexo_blog02/"/>
    <id>https://luxiong-github.github.io/2018/08/31/hexo/hexo_blog02/</id>
    <published>2018-08-31T05:35:46.000Z</published>
    <updated>2019-09-03T17:08:28.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>给博客增加一些更高级的功能，例如分页、站内搜索、评论…</p></blockquote><a id="more"></a><h3 id="细节完善"><a href="#细节完善" class="headerlink" title="细节完善"></a>细节完善</h3><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>(1) 插件安装(按需安装)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-index     # 首页分页配置</span><br><span class="line"># npm install --save hexo-generator-archive # 归档分页配置</span><br><span class="line"># npm install --save hexo-generator-tag     # 标签分页配置</span><br></pre></td></tr></table></figure><p>(2) 站点配置文件：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">''</span></span><br><span class="line">  per_page: <span class="number">5</span></span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"><span class="meta">#archive_generator:</span></span><br><span class="line"><span class="meta">#  per_page: 20</span></span><br><span class="line"><span class="meta">#  yearly: true</span></span><br><span class="line"><span class="meta">#  monthly: true</span></span><br><span class="line"><span class="meta">#tag_generator:</span></span><br><span class="line"><span class="meta">#  per_page: 10</span></span><br></pre></td></tr></table></figure><p>(3) 清缓存<code>hexo clean</code>，重新生成<code>hexo g</code>，启动服务<code>hexo s</code>，查看效果</p><h4 id="文章相关"><a href="#文章相关" class="headerlink" title="文章相关"></a>文章相关</h4><blockquote><p>详情请参考：<a href="https://tianbozhang.coding.me/personal-blog-custom.html" target="_blank" rel="noopener">https://tianbozhang.coding.me/personal-blog-custom.html</a></p></blockquote><h4 id="分页-1"><a href="#分页-1" class="headerlink" title="分页"></a>分页</h4><p>(1) 插件安装(按需安装)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-index     # 首页分页配置</span><br><span class="line"># npm install --save hexo-generator-archive # 归档分页配置</span><br><span class="line"># npm install --save hexo-generator-tag     # 标签分页配置</span><br></pre></td></tr></table></figure><p>(2) 站点配置文件：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">''</span></span><br><span class="line">  per_page: <span class="number">5</span></span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"><span class="meta">#archive_generator:</span></span><br><span class="line"><span class="meta">#  per_page: 20</span></span><br><span class="line"><span class="meta">#  yearly: true</span></span><br><span class="line"><span class="meta">#  monthly: true</span></span><br><span class="line"><span class="meta">#tag_generator:</span></span><br><span class="line"><span class="meta">#  per_page: 10</span></span><br></pre></td></tr></table></figure><p>(3) 清缓存<code>hexo clean</code>，重新生成<code>hexo g</code>，启动服务<code>hexo s</code>，查看效果</p><h4 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h4><p>(1) 修改<code>hexo-generator-index</code>插件<br>将<code>node_modules/hexo-generator-index/lib/generator.js</code>文件替换为：<a href="https://github.com/ehlxr/java-utils/blob/master/resources/generator.js" target="_blank" rel="noopener">generator.js</a><br>(2)<br>在文章<code>Front-matter</code>中添加<code>top</code>值，数值越大文章越靠前，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Naruto</span> <span class="string">图集</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">[图片]</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[picture,naruto]</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-09</span><span class="bullet">-02</span> <span class="number">14</span><span class="string">:36:04</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">picture,naruto</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">10</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h4 id="头像圆形旋转"><a href="#头像圆形旋转" class="headerlink" title="头像圆形旋转"></a>头像圆形旋转</h4><p>介绍一下实现头像圆形，鼠标经过旋转或者一直让旋转效果，主要是修改hexo目录下<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>文件<br>(1) 头像圆形修改<br>修改<code>sidebar-author.styl</code>文件中<code>.site-author-image</code>CSS 样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*头像圆形*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 鼠标经过旋转修改<br>修改<code>sidebar-author.styl</code>文件，添加 CSS 样式<code>img:hover</code>如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>sidebar-author.styl</code>文件中<code>.site-author-image</code>CSS 样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 鼠标经过旋转修改<br>修改<code>sidebar-author.styl</code>文件，添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>sidebar-author.styl</code>文件中<code>.site-author-image</code>CSS 样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画：animation:动画名称 动画播放时长单位秒或微秒</span></span><br><span class="line"><span class="comment">    动画播放的速度曲线linear为匀速 动画播放次数infinite为循环播放; */</span></span><br><span class="line">  <span class="attribute">-webkit-animation</span>: play <span class="number">3s</span> linear infinite;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: play <span class="number">3s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: play <span class="number">3s</span> linear infinite;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度</span></span><br><span class="line"><span class="comment">  -webkit-transition: -webkit-transform 1.5s ease-out;</span></span><br><span class="line"><span class="comment">  -moz-transition: -moz-transform 1.5s ease-out;</span></span><br><span class="line"><span class="comment">  transition: transform 1.5s ease-out;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标经过停止头像旋转：修改<code>sidebar-author.styl</code>文件，添加 CSS 样式<code>img:hover</code>如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 */</span></span><br><span class="line">  <span class="attribute">-webkit-animation-play-state</span>:paused;</span><br><span class="line">  <span class="attribute">animation-play-state</span>:paused;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度</span></span><br><span class="line"><span class="comment">  -webkit-transform: rotateZ(360deg);</span></span><br><span class="line"><span class="comment">  -moz-transform: rotateZ(360deg);</span></span><br><span class="line"><span class="comment">  transform: rotateZ(360deg);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="页面点击小红心"><a href="#页面点击小红心" class="headerlink" title="页面点击小红心"></a>页面点击小红心</h4><p>(1) 在<code>/themes/next/source/js/src</code>下新建文件<code>clicklove.js</code>，接着把该链接下的代码拷贝粘贴到<code>clicklove.js</code>文件中。<br>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面点击爱心效果</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>(2) 在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clicklove.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 清缓存<code>hexo clean</code>，重新生成<code>hexo g</code>，启动服务<code>hexo s</code>检验效果</p><h4 id="动态title崩溃欺骗"><a href="#动态title崩溃欺骗" class="headerlink" title="动态title崩溃欺骗"></a>动态title崩溃欺骗</h4><p>(1) <code>\themes\next\source\js\src</code>，新建<code>custom-title.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line"><span class="keyword">var</span> OriginTitile = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">   $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/img/TEP.ico"</span>);</span><br><span class="line">   <span class="built_in">document</span>.title = <span class="string">' 页面崩溃啦 ~ ！'</span>;</span><br><span class="line">   clearTimeout(titleTime);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">   $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">   <span class="built_in">document</span>.title = <span class="string">' 噫又好了~ '</span> + OriginTitile;</span><br><span class="line">   titleTime = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.title = OriginTitile;&#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>(2) 更改<code>\themes\next\layout_layout.swig</code>,在文件末尾添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--动态title崩溃欺骗,卖萌专用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/custom-title.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 清缓存<code>hexo clean</code>，重新生成<code>hexo g</code>，启动服务<code>hexo s</code>检验效果</p><h4 id="High一下"><a href="#High一下" class="headerlink" title="High一下"></a>High一下</h4><p>(1) header位置更改<code>themes\next\layout_custom\header.swig</code>,在文件末尾添加：<br>sidebar位置更改<code>themes\next\layout_custom\sidebar.swig</code><br>(2) 添加以下内容：</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt; &lt;a title=<span class="string">"把这个链接拖到你的Chrome收藏夹工具栏中"</span> href='javascript:(<span class="keyword">function</span>() &#123;</span><br><span class="line"><span class="keyword">function</span> c() &#123;</span><br><span class="line"><span class="keyword">var</span> e = document.createElement(<span class="string">"link"</span>);</span><br><span class="line">e.setAttribute(<span class="string">"type"</span>, <span class="string">"text/css"</span>);</span><br><span class="line">e.setAttribute(<span class="string">"rel"</span>, <span class="string">"stylesheet"</span>);</span><br><span class="line">e.setAttribute(<span class="string">"href"</span>, f);</span><br><span class="line">e.setAttribute(<span class="string">"class"</span>, l);</span><br><span class="line">document.body.appendChild(e)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> h() &#123;</span><br><span class="line"><span class="keyword">var</span> e = document.getElementsByClassName(l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; e.length; t++) &#123;</span><br><span class="line">document.body.removeChild(e[t])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> p() &#123;</span><br><span class="line"><span class="keyword">var</span> e = document.createElement(<span class="string">"div"</span>);</span><br><span class="line">e.setAttribute(<span class="string">"class"</span>, a);</span><br><span class="line">document.body.appendChild(e);</span><br><span class="line">setTimeout(<span class="keyword">function</span>() &#123;</span><br><span class="line">document.body.removeChild(e)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> d(e) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">height : e.offsetHeight,</span><br><span class="line">width : e.offsetWidth</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> v(i) &#123;</span><br><span class="line"><span class="keyword">var</span> s = d(i);</span><br><span class="line"><span class="keyword">return</span> s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> m(e) &#123;</span><br><span class="line"><span class="keyword">var</span> t = e;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!!t) &#123;</span><br><span class="line">n += t.offsetTop;</span><br><span class="line">t = t.offsetParent</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> g() &#123;</span><br><span class="line"><span class="keyword">var</span> e = document.documentElement;</span><br><span class="line"><span class="keyword">if</span> (!!window.innerWidth) &#123;</span><br><span class="line"><span class="keyword">return</span> window.innerHeight</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</span><br><span class="line"><span class="keyword">return</span> e.clientHeight</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> y() &#123;</span><br><span class="line"><span class="keyword">if</span> (window.pageYOffset) &#123;</span><br><span class="line"><span class="keyword">return</span> window.pageYOffset</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Math.max(document.documentElement.scrollTop, document.body.scrollTop)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> E(e) &#123;</span><br><span class="line"><span class="keyword">var</span> t = m(e);</span><br><span class="line"><span class="keyword">return</span> t &gt;= w &amp;&amp; t &lt;= b + w</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> S() &#123;</span><br><span class="line"><span class="keyword">var</span> e = document.createElement(<span class="string">"audio"</span>);</span><br><span class="line">e.setAttribute(<span class="string">"class"</span>, l);</span><br><span class="line">e.src = i;</span><br><span class="line">e.loop = <span class="literal">false</span>;</span><br><span class="line">e.addEventListener(<span class="string">"canplay"</span>, <span class="keyword">function</span>() &#123;</span><br><span class="line">setTimeout(<span class="keyword">function</span>() &#123;</span><br><span class="line">x(k)</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line">setTimeout(<span class="keyword">function</span>() &#123;</span><br><span class="line">N();</span><br><span class="line">p();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; O.length; e++) &#123;</span><br><span class="line">T(O[e])</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">15500</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line">e.addEventListener(<span class="string">"ended"</span>, <span class="keyword">function</span>() &#123;</span><br><span class="line">N();</span><br><span class="line">h()</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line">e.innerHTML = <span class="string">" &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;"</span>;</span><br><span class="line">document.body.appendChild(e);</span><br><span class="line">e.play()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> x(e) &#123;</span><br><span class="line">e.className += <span class="string">" "</span> + s + <span class="string">" "</span> + o</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> T(e) &#123;</span><br><span class="line">e.className += <span class="string">" "</span> + s + <span class="string">" "</span> + u[Math.floor(Math.random() * u.length)]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> N() &#123;</span><br><span class="line"><span class="keyword">var</span> e = document.getElementsByClassName(s);</span><br><span class="line"><span class="keyword">var</span> t = new RegExp(<span class="string">"\\b"</span> + s + <span class="string">"\\b"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; e.length; ) &#123;</span><br><span class="line">e[n].className = e[n].className.replace(t, <span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> e = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> t = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">350</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="number">350</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="string">"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3"</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"mw-harlem_shake_me"</span>;</span><br><span class="line"><span class="keyword">var</span> o = <span class="string">"im_first"</span>;</span><br><span class="line"><span class="keyword">var</span> u = [<span class="string">"im_drunk"</span>, <span class="string">"im_baked"</span>, <span class="string">"im_trippin"</span>, <span class="string">"im_blown"</span>];</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"mw-strobe_light"</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="string">"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css"</span>;</span><br><span class="line"><span class="keyword">var</span> l = <span class="string">"mw_added_css"</span>;</span><br><span class="line"><span class="keyword">var</span> b = g();</span><br><span class="line"><span class="keyword">var</span> w = y();</span><br><span class="line"><span class="keyword">var</span> C = document.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line"><span class="keyword">var</span> k = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> L = <span class="number">0</span>; L &lt; C.length; L++) &#123;</span><br><span class="line"><span class="keyword">var</span> A = C[L];</span><br><span class="line"><span class="keyword">if</span> (v(A)) &#123;</span><br><span class="line"><span class="keyword">if</span> (E(A)) &#123;</span><br><span class="line">k = A;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (A === <span class="literal">null</span>) &#123;</span><br><span class="line">console.warn(<span class="string">"Could not find a node of the right size. Please try a different page."</span>);</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c();</span><br><span class="line">S();</span><br><span class="line"><span class="keyword">var</span> O = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> L = <span class="number">0</span>; L &lt; C.length; L++) &#123;</span><br><span class="line"><span class="keyword">var</span> A = C[L];</span><br><span class="line"><span class="keyword">if</span> (v(A)) &#123;</span><br><span class="line">O.push(A)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()    '&gt;High一下&lt;/a&gt; &lt;/li&gt;</span><br></pre></td></tr></table></figure><p>(3) 代码块的内容不需要再做任何修改,清缓存<code>hexo clean</code>，重新生成<code>hexo g</code>，启动服务<code>hexo s</code>查看效果</p><h4 id="底部增加运行时间"><a href="#底部增加运行时间" class="headerlink" title="底部增加运行时间"></a>底部增加运行时间</h4><p>(1) 修改<code>themes/next/layout/_partials/footer.swig</code>，增加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在网页底部添加网站运行时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"timeDate"</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"07/21/2018 00:00:00"</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间</span></span></span><br><span class="line"><span class="vbscript">        <span class="built_in">now</span>.setTime(<span class="built_in">now</span>.getTime()+<span class="number">250</span>);</span></span><br><span class="line"><span class="javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days);</span></span><br><span class="line"><span class="javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours);</span></span><br><span class="line"><span class="vbscript">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (<span class="built_in">now</span> - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum);</span></span><br><span class="line"><span class="javascript">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125;</span></span><br><span class="line"><span class="vbscript">        seconds = (<span class="built_in">now</span> - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum);</span></span><br><span class="line"><span class="javascript">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"Run for "</span>+dnum+<span class="string">" Days "</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" Hours "</span> + mnum + <span class="string">" m "</span> + snum + <span class="string">" s"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) 运行效果：<br><img src="https://i.ibb.co/8b0S73M/grbkdj-14.png" alt="底部增加运行时间"></p><h4 id="当前所在菜单下划线显示"><a href="#当前所在菜单下划线显示" class="headerlink" title="当前所在菜单下划线显示"></a>当前所在菜单下划线显示</h4><p>(1) 打开<code>themes\next\layout\ _partials</code>目录下的<code>header.swig</code>文件<br>(2) 在底部添加以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> path = <span class="string">'https://malizhi.cn'</span>; <span class="comment">//这里要改成你博客的地址</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> localhostItem = <span class="built_in">String</span>(<span class="built_in">window</span>.location).split(path)[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> LiNode = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#menu &gt; li &gt; a'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; LiNode.length;i++)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> item = <span class="built_in">String</span>(LiNode[i].href).split(path)[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(item == localhostItem &amp;&amp; item != <span class="literal">undefined</span>)&#123;</span></span><br><span class="line"><span class="actionscript">LiNode[i].setAttribute(<span class="string">'style'</span>,<span class="string">'border-bottom:1px solid black'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) hexo clean &amp;&amp; hexo g &amp;&amp; hexo s后完成效果：<br><img src="https://i.ibb.co/YyxcV3c/grbkdj-15.png" alt="当前所在菜单下划线显示"></p><h4 id="底部跳动图标实现"><a href="#底部跳动图标实现" class="headerlink" title="底部跳动图标实现"></a>底部跳动图标实现</h4><p>(1) 在<code>next\layout_partials</code>下的<code>footer.swig</code>文件中，在你所需要调动的图标所对应的span中增加对应的ID<br>(2) 在主题的css文件<code>next\source\css\_variables\custom.styl</code> ，增加以下代码即可：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//底部爱心小图标跳动</span></span><br><span class="line">keyframes heartAnimate &#123;</span><br><span class="line">    <span class="number">0</span>%,<span class="number">100</span>%&#123;transform:<span class="keyword">scale</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    <span class="number">10</span>%,<span class="number">30</span>%&#123;transform:<span class="keyword">scale</span>(<span class="number">0.9</span>);&#125;</span><br><span class="line">    <span class="number">20</span>%,<span class="number">40</span>%,<span class="number">60</span>%,<span class="number">80</span>%&#123;transform:<span class="keyword">scale</span>(<span class="number">1.1</span>);&#125;</span><br><span class="line">    <span class="number">50</span>%,<span class="number">70</span>%&#123;transform:<span class="keyword">scale</span>(<span class="number">1.1</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图标所对应的span中的ID</span></span><br><span class="line">#heart &#123;</span><br><span class="line">    animation: heartAnimate <span class="number">1.33</span>s ease-<span class="keyword">in</span>-out infinite;</span><br><span class="line">&#125;</span><br><span class="line">.with-love &#123;</span><br><span class="line">    <span class="keyword">color</span>: rgb(<span class="number">255</span>, <span class="number">113</span>, <span class="number">113</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) hexo clean &amp;&amp; hexo g &amp;&amp; hexo s后完成效果：<br><img src="https://i.ibb.co/YyxcV3c/grbkdj-15.png" alt="底部跳动图标实现"></p><hr><h3 id="第三方服务集成"><a href="#第三方服务集成" class="headerlink" title="第三方服务集成"></a>第三方服务集成</h3><h4 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h4><p>NexT 支持集成 <code>Swiftype</code>、 微搜索、<code>Local Search</code> 和 <code>Algolia</code>。在这里我使用的是<code>Local Search</code>，下面将介绍如何使用:<br>(1) 添加百度/谷歌/本地 自定义站点内容搜索，安装<code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>(2) 编辑<code>站点配置文件_config.yml</code>，新增以下内容到任意位置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>(3) 编辑<code>主题配置文件_config.yml</code>，启用本地搜索功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>注：其他搜索方式请查看<a href="http://theme-next.iissnan.com/third-party-services.html#search-system" target="_blank" rel="noopener">站内搜索</a></p></blockquote><p>(4) 清缓存<code>hexo clean</code>，重新生成<code>hexo g</code>，启动服务<code>hexo s</code>，效果如下：<br><img src="https://i.ibb.co/k07jGDT/grbkdj-09.png" alt="站内搜索"></p><h4 id="数据统计分析"><a href="#数据统计分析" class="headerlink" title="数据统计分析"></a>数据统计分析</h4><p>NexT 支持集成 <code>不蒜子统计</code>、<code>百度统计</code>等多种数据统计方式。此处使用<code>不蒜子统计</code>，下面将介绍如何使用:</p><blockquote><p>此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后</p></blockquote><p>(1) 全局配置：编辑<code>主题配置文件_config.yml</code>中的<code>busuanzi_count</code>的配置项。<br>当<code>enable: true</code>时，代表开启全局开关。<br>若 site_uv 、site_pv 、 page_pv 的值均为 false 时，不蒜子仅作记录而不会在页面上显示<br>(2) 站点UV配置：当<code>site_uv: true</code>时，代表在页面底部显示站点的UV值。<code>site_uv_header</code>和<code>site_uv_footer</code>为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的<code>font-awesome</code>。如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 效果：本站访客数12345人次</span></span><br><span class="line"><span class="symbol">site_uv:</span> true</span><br><span class="line"><span class="symbol">site_uv_header:</span> <span class="params">&lt;i class="fa fa-user"&gt;</span><span class="params">&lt;/i&gt;</span> 本站访客数</span><br><span class="line"><span class="symbol">site_uv_footer:</span> 人次</span><br></pre></td></tr></table></figure><p>(3) 站点PV配置：当<code>site_pv: true</code>时，代表在页面底部显示站点的PV值。<code>site_pv_header</code>和<code>site_pv_footer</code>为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的<code>font-awesome</code>。如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 效果：本站总访问量12345次</span></span><br><span class="line"><span class="symbol">site_pv:</span> true</span><br><span class="line"><span class="symbol">site_pv_header:</span> <span class="params">&lt;i class="fa fa-eye"&gt;</span><span class="params">&lt;/i&gt;</span> 本站总访问量</span><br><span class="line"><span class="symbol">site_pv_footer:</span> 次</span><br></pre></td></tr></table></figure><blockquote><p>注：其他统计方式请查看<a href="http://theme-next.iissnan.com/third-party-services.html#analytics-busuanzi" target="_blank" rel="noopener">数据统计分析</a></p></blockquote><p>(4) 清缓存<code>hexo clean</code>，重新生成<code>hexo g</code>，启动服务<code>hexo s</code>，效果如下：<br><img src="https://i.ibb.co/jR5q04v/grbkdj-11.png" alt="数据统计分析"></p><p>(5) 不蒜子统计不生效，浏览器控制台报错<br>原因：由于 busuanzi(不蒜子) 的域名更新，导致了使用 Hexo Next 主题时统计数据失效<br>解决方法：</p><ul><li>到 hexo 的 themes 文件夹下, 打开<code>\themes\next\layout_third-party\analytics\busuanzi-counter.swig</code>文件</li><li>将<code>src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</code>修改为<code>src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</code></li></ul><h4 id="内容分享服务"><a href="#内容分享服务" class="headerlink" title="内容分享服务"></a>内容分享服务</h4><p>NexT 支持集成 <code>jiathis</code>、<code>baidushare</code> 和 <code>AddThis</code>内容分享服务。在这里我使用的是<code>baidushare</code>，下面将介绍如何使用:<br>(1) 编辑<code>站点配置文件_config.yml</code>，新增以下内容到任意位置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidushare:</span> <span class="literal">true</span> <span class="comment">#百度分享功能</span></span><br></pre></td></tr></table></figure><p>(2) 编辑<code>主题配置文件_config.yml</code>，设置其展现方式：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">baidushare:</span> </span><br><span class="line"><span class="symbol">  type:</span> button <span class="meta">#百度分享展示的方式button|slide</span></span><br></pre></td></tr></table></figure><blockquote><p>注：其他内容分享方式请查看<a href="http://theme-next.iissnan.com/third-party-services.html#share-baidu" target="_blank" rel="noopener">内容分享服务</a></p></blockquote><p>(4) 清缓存<code>hexo clean</code>，重新生成<code>hexo g</code>，启动服务<code>hexo s</code>，效果如下：<br><img src="https://i.ibb.co/GCwytnS/grbkdj-10.png" alt="内容分享服务"></p><h4 id="文章阅读次数统计"><a href="#文章阅读次数统计" class="headerlink" title="文章阅读次数统计"></a>文章阅读次数统计</h4><p>(1) 在<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>进行对应的配置<br>详细配置参考文章：<a href="https://notes.doublemine.me/2015-10-21-为NexT主题添加文章阅读量统计功能.html#配置LeanCloud" target="_blank" rel="noopener">配置LeanCloud</a><br>(2) 注<code>Class</code>名称必须为<code>Counter</code></p><h4 id="Gitment评论"><a href="#Gitment评论" class="headerlink" title="Gitment评论"></a>Gitment评论</h4><p>(1) Gitment评论搭建参考：<a href="https://sjq597.github.io/2018/05/18/Hexo-使用Gitment评论功能/" target="_blank" rel="noopener">https://sjq597.github.io/2018/05/18/Hexo-使用Gitment评论功能/</a><br>(2) 踩过的坑：</p><ul><li><p>Error: Validation Failed<br>原因：issue的Label有长度限制,对于中文博客来说,中文标题很容易就超过长度限制<br>方案：修改<code>themes/next/layout/_third-party/comments/gitment.swig</code>中的id部分如下:</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var gitment = new &#123;&#123;<span class="attribute">CommentsClass&#125;&#125;(&#123;</span></span><br><span class="line"><span class="attribute">     id</span>: '&#123;&#123; page<span class="variable">.date</span> &#125;&#125;',</span><br><span class="line">     owner: '&#123;&#123; theme<span class="variable">.gitment</span><span class="variable">.github_user</span> &#125;&#125;',</span><br><span class="line">     repo: '&#123;&#123; theme<span class="variable">.gitment</span><span class="variable">.github_repo</span> &#125;&#125;',</span><br></pre></td></tr></table></figure></li><li><p>object ProgressEvent<br>原因：作者的<code>default.css</code>和<code>gitment.browser.js</code>域名用的别人的，现在过期了<br>方案：修改<code>themes/next/layout/_third-party/comments/gitment.swig</code>中对应部分如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/default.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/gitment.browser.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注释部分是原来的地址，过期了的，下面的是引用的其他有效地址<br>(3) 汉化：<br>修改<code>themes/next/layout/_third-party/comments/gitment.swig</code>中对应部分如下:</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">href</span>=<span class="string">"https://billts.site/extra_css/gitment.css"</span>&gt;</span><br><span class="line">&lt;script <span class="attribute">src</span>=<span class="string">"https://billts.site/js/gitment.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>(4) 清缓存<code>hexo clean</code>，重新生成<code>hexo g</code>，部署<code>hexo d</code>，然后访问<a href="https://luxiong-github.github.io">username.github.io</a>查看效果<br>(5) 每篇文章都需要登录GitHub账号然后点击初始化</p><h4 id="来必力评论"><a href="#来必力评论" class="headerlink" title="来必力评论"></a>来必力评论</h4><p>(1) 登陆<a href="https://livere.com/" target="_blank" rel="noopener">来必力</a>获取你的<code>livere_uid</code></p><blockquote><p>没有账号需要注册一个<br>注册完点击<code>安装</code>，然后填上博客的相应信息，如图<code>data-uid</code>就是所需要的<code>livere_uid</code><br><img src="https://i.ibb.co/n60XzW7/grbkdj-12.png" alt="来必力配置"><br>(2) 编辑<code>主题配置文件</code>， 编辑<code>livere_uid</code>字段，设置如下:</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">livere_uid:</span> <span class="comment">#your livere_uid</span></span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>(1) <a href="https://cloud.tencent.com/developer/article/1482021" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1482021</a><br>(2) <a href="https://tianbozhang.coding.me/personal-blog-custom.html" target="_blank" rel="noopener">https://tianbozhang.coding.me/personal-blog-custom.html</a><br>(3) <a href="https://ehlxr.me/categories/Hexo/" target="_blank" rel="noopener">https://ehlxr.me/categories/Hexo/</a><br>(4) <a href="https://malizhi.cn/nextTutorial/#more" target="_blank" rel="noopener">https://malizhi.cn/nextTutorial/#more</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;给博客增加一些更高级的功能，例如分页、站内搜索、评论…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo个人博客搭建" scheme="https://luxiong-github.github.io/categories/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Git" scheme="https://luxiong-github.github.io/tags/Git/"/>
    
      <category term="Blog" scheme="https://luxiong-github.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://luxiong-github.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://luxiong-github.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建-入坑</title>
    <link href="https://luxiong-github.github.io/2018/08/30/hexo/hexo_blog01/"/>
    <id>https://luxiong-github.github.io/2018/08/30/hexo/hexo_blog01/</id>
    <published>2018-08-30T02:35:46.000Z</published>
    <updated>2019-09-01T14:56:31.562Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言:<br>使用Node.js+Hexo+Next+Git+GitHub，让你几分钟就能创建一个博客</p></blockquote><a id="more"></a><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>(1) <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js</a><br>(2) <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a><br>(3) <a href="https://github.com/luxiong-github" target="_blank" rel="noopener">GitHub账号及仓库</a>  </p><blockquote><p>注：上述条件安装完成后执行后续操作</p></blockquote><hr><h3 id="配置GitHub仓库"><a href="#配置GitHub仓库" class="headerlink" title="配置GitHub仓库"></a>配置GitHub仓库</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>(1) 新建一个名为<code>username.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库<br>(2) 每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库<br><img src="https://i.ibb.co/cg79bVk/grbkdj-04.png" alt="创建仓库"></p><blockquote><p>1.注册的邮箱一定要验证，否则不会成功<br>2.仓库名字必须是：<code>username.github.io</code>，其中<code>username</code>是你的用户名</p></blockquote><h4 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h4><p>(1) 提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题<br>(2) 检查本机已存在的ssh密钥：<code>cd ~/. ssh</code>，如果提示<code>No such file or directory</code>说明你是第一次使用Git<br>(3) 生成密钥：<code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code>，然后三次回车<br>(4) 打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容<br>(5) 打开你的github主页，进入<code>个人设置 -&gt; SSH and GPG keys -&gt; New SSH key</code>，将刚复制的内容粘贴到key那里，title随便填，保存:<br><img src="https://i.ibb.co/94vTpZG/grbkdj-05.png" alt="配置SSH"></p><h4 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h4><p>(1) 输入命令：<code>ssh -T git@github.com</code><br>(2) 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes<br>(3) 看到以下信息说明SSH已配置成功：</p><blockquote><p>Hi luxiong-github! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><h4 id="配置Git用户名邮箱-非必须"><a href="#配置Git用户名邮箱-非必须" class="headerlink" title="配置Git用户名邮箱(非必须)"></a>配置Git用户名邮箱(非必须)</h4><p>(1) 执行以下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="selector-class">.name</span> <span class="string">"luxiong-github"</span><span class="comment">// 你的github用户名，非昵称</span></span><br><span class="line">git config --global user<span class="selector-class">.email</span>  <span class="string">"xxx@qq.com"</span><span class="comment">// 填写你的github注册邮箱</span></span><br></pre></td></tr></table></figure><p>(2) 配置详情参考：<a href="https://blog.csdn.net/sjt19910311/article/details/83685616" target="_blank" rel="noopener">https://blog.csdn.net/sjt19910311/article/details/83685616</a></p><hr><h3 id="创建hexo项目"><a href="#创建hexo项目" class="headerlink" title="创建hexo项目"></a>创建hexo项目</h3><p>建议使用文本编辑工具管理项目，推荐使用：VSCode、sublime等，我使用的是VSCode</p><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>(1) 打开Git Bash，是一个命令输入终端，后序所有命令操作都在此进行<br>(2) 输入命令：<code>npm install -g hexo-cli</code><br>(3) 如下图:<br><img src="https://i.ibb.co/C6JvQy0/grbkdj-01.png" alt="安装Hexo"></p><h4 id="创建项目文件夹"><a href="#创建项目文件夹" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h4><p>(1) 在Git Bash中切换到博客目录：<code>cd E:React/my-blog/</code><br>(2) 新建项目目录：<code>hexo init</code><br>(3) 如下图是在<code>E:\React\my-blog\</code>目录下新建了一个<code>hexo</code>目录<br><img src="https://i.ibb.co/56j995m/grbkdj-02.png" alt="创建项目文件夹"></p><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>(1) 切换到hexo目录：<code>cd hexo/</code><br>(2) 安装依赖包：<code>npm install</code><br>(3) 安装完成后目录结构如下图：<br><img src="https://i.ibb.co/WysL2d6/grbkdj-03.png" alt="安装依赖包"></p><blockquote><p>目录结构介绍请看官方API：<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/setup</a></p></blockquote><hr><h3 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h3><h4 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">title:</span> 卢雄的博客 <span class="meta">#网站标题</span></span><br><span class="line"><span class="symbol">subtitle:</span> Live <span class="keyword">and</span> learn.  <span class="meta">#网站副标题</span></span><br><span class="line"><span class="symbol">description:</span> 要做的事情总找得出时间和机会；不愿意做的事情也总能找得出借口... <span class="meta">#网站描述</span></span><br><span class="line"><span class="symbol">keywords:</span> Blog,Hexo,Github  <span class="meta">#网站的关键词。使用半角逗号 , 分隔多个关键词</span></span><br><span class="line"><span class="symbol">author:</span> luxiong <span class="meta">#作者</span></span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Hans  <span class="meta">#语言 en:英文  zh-Hans:简体中文</span></span><br><span class="line"><span class="symbol">timezone:</span> <span class="meta">#网站时区,默认使用电脑的时区</span></span><br></pre></td></tr></table></figure><h4 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>: #部署相关的配置</span><br><span class="line">  <span class="attribute">type</span>: git #使用Git提交</span><br><span class="line">  <span class="attribute">repo</span>:  git<span class="variable">@github</span>.<span class="attribute">com</span>:username/username.github.io.git #仓库地址，username替换为Github的username</span><br><span class="line">  <span class="attribute">branch</span>: master #分支名称。如果不指定，则默认值为 master</span><br></pre></td></tr></table></figure><blockquote><p>其他详细配置参考文档：<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a></p></blockquote><hr><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>(1) 生成文件<br>在终端输入命令：<code>hexo g</code>或者<code>hexo generate</code>，作用是将source下面的资源文件在public下生成对应的HTML文件，这些文件将来都是要提交到github去的<br>(2) 启动服务<br>在终端输入命令：<code>hexo s</code>或者<code>hexo server</code>，作用是开启本地预览服务，打开浏览器访问 localhost:4000 即可看到内容，默认的已经写好了一篇名为Hello World的文章<br><img src="https://i.ibb.co/S3q6r8M/grbkdj-06.png" alt="预览效果"><br>(3) 如果浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考：<a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html</a></p><hr><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>上述只是完成了最基本的博客搭建，还有许多配置仍需完善…</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>(1) 输入命令：<code>hexo new page &quot;categories&quot;</code><br>(2) 此命令会在source目录下面创建一个categories目录，内含一个<code>index.md</code>文档，打开进行编辑<br>(3) 增加页面类型，结果如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">title:</span> categories</span><br><span class="line"><span class="symbol">date:</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-31</span> <span class="number">13</span>:<span class="number">47</span>:<span class="number">02</span></span><br><span class="line"><span class="symbol">type:</span> <span class="string">"categories"</span>  <span class="meta">#将页面的类型设置为categories</span></span><br></pre></td></tr></table></figure><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>(1) 输入命令：<code>hexo new page &quot;tags&quot;</code><br>(2) 此命令会在source目录下面创建一个tags目录，内含一个<code>index.md</code>文档，打开进行编辑<br>(3) 设置页面类型，结果如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">title:</span> tags</span><br><span class="line"><span class="symbol">date:</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-31</span> <span class="number">13</span>:<span class="number">47</span>:<span class="number">02</span></span><br><span class="line"><span class="symbol">type:</span> <span class="string">"tags"</span>  <span class="meta">#将页面的类型设置为tags</span></span><br></pre></td></tr></table></figure><h4 id="about自我介绍页面"><a href="#about自我介绍页面" class="headerlink" title="about自我介绍页面"></a>about自我介绍页面</h4><p>(1) 输入命令：<code>hexo new page &quot;about&quot;</code><br>(2) 此命令会在source目录下面创建一个about目录，内含一个<code>index.md</code>文档，打开进行编辑<br>(3) 设置页面类型，结果如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">title:</span> about</span><br><span class="line"><span class="symbol">date:</span> <span class="number">2018</span><span class="number">-08</span><span class="number">-31</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">02</span></span><br><span class="line"><span class="symbol">type:</span> <span class="string">"about"</span> <span class="meta"># 将页面的类型设置为about</span></span><br></pre></td></tr></table></figure><h4 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h4><p>(1) 在source目录下创建一个<code>404.html</code>文件<br>(2) 打开文件，将内容修改为以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 此404页面为腾讯公益404页面，也可自定义404页面内容</p><h4 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h4><p>(1) 在themes目录下存放的是博客的主题，默认的主题是landscape，可以修改其他主题，推荐使用<code>next</code>主题<br>(2) 将终端切换到hexo目录，执行以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>(3) 修改_config.yml中的theme: landscape改为theme: next，然后重新执行hexo g来重新生成</p><h4 id="启用配置"><a href="#启用配置" class="headerlink" title="启用配置"></a>启用配置</h4><p>(1) 分类、标签、404页面等配置是跟随主题来配置的，所以每次更换主题后都需要启用对应配置才能生效<br>(2) 打开<code>themes -&gt; next</code>目录下的主题配置文件_config.yml，开启以下配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line">  <span class="meta">#archives: /archives/ || archive</span></span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="symbol">  commonweal:</span> /<span class="number">404</span>/ || heartbeat</span><br></pre></td></tr></table></figure><p>(3) 分别执行以下命令，浏览器访问4000端口进行验证：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> clean  <span class="comment"># 清除原先生成的public下的文件</span></span><br><span class="line">hexo g      <span class="comment"># 生成public下的文件</span></span><br><span class="line">hexo s      <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><blockquote><p>next主题详细配置参考：<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/theme-settings.html</a></p></blockquote><h4 id="发布文章测试"><a href="#发布文章测试" class="headerlink" title="发布文章测试"></a>发布文章测试</h4><p>(1) 新建一篇文章：<code>hexo new &quot;测试文章&quot;</code>或者直接在source_posts\目录下面新建<code>测试文章.md</code>文件<br>(2) 打开md文件，按格式书写文章内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">测试标题</span> <span class="comment"># 这是标题</span></span><br><span class="line"><span class="attr">tags:</span>   <span class="comment"># 这里写的标签会自动汇集到 tags 页面上</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">测试标签1</span> <span class="comment"># 可配置多个标签，注意格式</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">测试标签2</span></span><br><span class="line"><span class="attr">category:</span>  <span class="comment"># 这里写的分类会自动汇集到 categories 页面上，分类可以多级</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">测试一级分类</span> <span class="comment"># 一级分类</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">测试二级分类</span> <span class="comment"># 二级分类</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">测试文章内容</span></span><br></pre></td></tr></table></figure><p>(3) 预览：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> clean  <span class="comment"># 清除原先生成的public下的文件</span></span><br><span class="line">hexo g      <span class="comment"># 生成public下的文件</span></span><br><span class="line">hexo s      <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><blockquote><p>1.修改内容一旦预览与修改不一致，则需要clean<br>2.已发布的文章发生修改， 可直接预览，即 不执行上述3个命令,刷新浏览器即可<br>3.若对md文档语法不熟悉，可参考<a href="http://note.youdao.com/noteshare?id=27b9fd2aab2b8316784e575d314e09d6" target="_blank" rel="noopener">此文章</a></p></blockquote><hr><h3 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h3><p>(1) 在之前已经将<code>ssh key</code>和<code>_config.yml</code>关于deploy部分的配置已经完善,不再叙述<br>(2) 直接执行<code>hexo d</code>一般会报如下错误：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer <span class="keyword">not</span> found: github 或者 Deployer <span class="keyword">not</span> found: git</span><br></pre></td></tr></table></figure><p>解决方案是安装自动部署发布工具：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>(3) 输入命令<code>hexo d</code>将代码上传到GitHub，完成查看GitHub如下：<br><img src="https://i.ibb.co/x3qT618/grbkdj-07.png" alt="代码上传"><br>(4) 浏览器访问：<a href="https://luxiong-github.github.io/">yourname.github.io</a>，如果出现博客的内容，说明代码上传成功</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="Hexo相关命令总结"><a href="#Hexo相关命令总结" class="headerlink" title="Hexo相关命令总结"></a>Hexo相关命令总结</h4><p>(1) 常用命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo clean          #清除缓存</span><br><span class="line">hexo g              #生成静态页面至public目录，完整写法为：hexo generate</span><br><span class="line">hexo s              #启动本地服务，完整写法为：hexo server</span><br><span class="line">hexo d              #发布到远程(GitHub)，完整写法为：hexo deploy</span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">"xxx"</span> #新建xxx页面</span><br><span class="line">hexo new <span class="string">"xxx"</span>      #新建xxx文章</span><br><span class="line">hexo help           #查看帮助</span><br><span class="line">hexo version        #查看Hexo的版本</span><br><span class="line">hexo init           #生成站点</span><br><span class="line">npm install --save xxx  #安装插件</span><br><span class="line">npm unstall xxx     #卸载插件</span><br></pre></td></tr></table></figure><p>(2) 组合命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure><blockquote><p>命令尽量手写少复制粘贴，便于熟悉和理解</p></blockquote><h4 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h4><p>(1) 发布的文章都是md文档，可以先了解一下<a href="http://note.youdao.com/noteshare?id=27b9fd2aab2b8316784e575d314e09d6" target="_blank" rel="noopener">Markdown语法</a><br>(2) <code>FATAL Cannot read property ‘replace’ of null</code><br>问题原因：url不能为空<br>解决：修改站点配置文件<code>_config.yml</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">url:</span> <span class="string">http:</span><span class="comment">//luxiong-blog.com</span></span><br></pre></td></tr></table></figure><p>(3) 静态资源图片设置：<code>\themes\next\source\images\</code>用来存放图片<br>遇到某些地方需要用到图片时(主题配置文件中的avatar、wechatpay、alipay等)，直接使用相对路径引用：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">avatar:</span> <span class="meta-keyword">/images/</span>avatar.jpg          <span class="meta">#头像</span></span><br><span class="line"><span class="symbol">wechatpay:</span> <span class="meta-keyword">/images/</span>wechatpay.jpg    <span class="meta">#微信打赏码</span></span><br><span class="line"><span class="symbol">alipay:</span> <span class="meta-keyword">/images/</span>alipay.jpg          <span class="meta">#支付宝打赏码</span></span><br></pre></td></tr></table></figure><p>(4) 阅读全文：生成的博文目录会显示全部的文章内容，在合适的位置加上<code>&lt;!--more--&gt;</code>即可隐藏内容，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 前言</span><br><span class="line"></span><br><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line">1. 全是静态文件，访问速度快；</span><br><span class="line">2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line">3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br><span class="line"></span><br><span class="line">4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line">5. 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line">6. 等等；</span><br></pre></td></tr></table></figure><p>完成效果：<br><img src="https://i.ibb.co/6XbyR4H/grbkdj-08.png" alt="隐藏内容"><br>(5) 建站问题及错误，遇到问题不要慌，大胆猜测小心验证，百度搜索问题关键字基本都有解决方案</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>(1) <a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a><br>(2) <a href="https://tianbozhang.coding.me/personal-blog-start.html" target="_blank" rel="noopener">https://tianbozhang.coding.me/personal-blog-start.html</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;使用Node.js+Hexo+Next+Git+GitHub，让你几分钟就能创建一个博客&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo个人博客搭建" scheme="https://luxiong-github.github.io/categories/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Git" scheme="https://luxiong-github.github.io/tags/Git/"/>
    
      <category term="Blog" scheme="https://luxiong-github.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://luxiong-github.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://luxiong-github.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
