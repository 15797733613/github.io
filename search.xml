<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[QC问题流程梳理]]></title>
    <url>%2F2019%2F09%2F04%2Fweaver%2Fquestion-tidy%2F</url>
    <content type="text"><![CDATA[这篇文章是私人的哦，输下密码吧(*๓´╰╯`๓) Incorrect Password! No content to display! U2FsdGVkX1+l8Q6HaLUnfqiScWljjt9/lVKXmsvKZ07OtjQbXM0kUiPdhI+SpUUFb6399pYyswTa+QAHM15E0wd3M7jEAbGQQ7PlF4mJ2oLT/rz2EjYnYfyHnDlmCUXo++kpu7EM3MLD829ei/N1qYFpsEHCZz+5F4hKEOVHBai7E5uVH8ZFoD2yoQcjp6tLxk+N0xed31OJrIZWeZ7CgWy9q+5LD87PJz6kWqAC5kmFqvGsGrfcDxriVAKfKoq0BZE4ONYFAiGIXp8aJ0W/bt8RpMe0DQf2tf2IK9n1fo6Aw2y6IlRYRQSodUny84ONZGipi7SybmIHm2Rm2Gf+RfkwQV+FHgjm9MQ76fyT3AOLVe5rTiSmuJgbBr2fdgx0QzhL9ZiozBgL70kfdYNWLZu3/T3T5IVWb6aXDwDIx82V1ZgW9WxHWxENUSDFBGgIUOxCPNgZ/GkdOcKB22nA2gTpyxIKDoJpFsvIsihxzHYQrbZriTp6GsEW/WWruut6aAD0U8fAkzf7/2BalbLA9YSwY4iRv59jaf6M2+T+nwKa0SrIy2Tt3EGCJDgYbrybyckL/E6eYOSz+GpDDfhdjE9K2eIhP8mihmQMDGZ+IMLfPlZLy+dM/hcn+2E2Of5qyFy+4UC10a7bVOXLkeAXTsFSUYK6BGWoyo/y+4QHi650CvlqexvZTLyzlH/iuUAxDoeWQSAD1mnd2l9qrrMXLXswn17rJA/YnUfFi4cCvNbDNATKVN+D9wlKbelWZkGwKoHniZEses/+BTLgT8XIJPGuDn3kT4uYzGV2De+yO6ufWjJJMv+SqZBzs+AlmD9cSqMWrmN1HYJOnw2JYe0dL8kIgR1P+ojOZsuvmk/syy9lfO5PFag0G2j9KhVpGPIhbkNMZEe27ezBT+E1lXjxg3+PBp5vAMvh2EnPtA0YeSDswmdDaP8xGnJH4/65Sr7IlTWvS1LGTSD19/ggxnQJ9HVN5Aeho4q0LCRWJa0voS3l5gjwbdTecbohZz4yMwffRAvE0ziYnr9xfgSgoL/px/CTJxae1Mgb1IchDELzKaXvaekkA6HUdvUhadIIve/Yk0uXo+NIE32Umfcq6LUrSKLEsEvar3fvHgSED0luEU+/oRkER+xT1LuY3OAaD+7LEgTTWGGBz4pGApIINHMPN7Kk2f+s5n9GCjTb4QxY1sfrk7G8vrjAnbc8bTLQv/ZgqQL4X7lYyE43XWVzPEC3BPIFSY9dytbsONphVFyp4hlLPmjmQPPAGHCnRiPZ+ogyOMvRQKlE1hqoq9Tvl7e8ajxomjUq7gq2QnN43XBfAtCG9CkVcxh3etW4d1Uuen8Aby4QMt7Nx81rye1FIWRHgABmkh88WNRxq3rhJlq3rnlWt9Sq1rDUzWLDKlkSgmMI3TrFDAu48/Ls4vr97uoC5Hu+JHIiPf8rqPC0YAwT6iJUgueRJeRyDlReY4272JyIPGeHs35LKns/K/sjIJE/AEvVWZtzVMUykvSS+8gF9yaIhnzDmWTP/1JMjXVLc6/Clmz2U+7WvsGnvL3DVSHX6sPzjkR6hvJME8r1Ki/jR1aXIAuXpu56j8hNBP24O9JTLU6zrdi5AU2XMl+oWtlkzAfPfGJe/R4iY1VIVFZFhzJ51PhywoE6MzUOcH1fQNvRWJejIos1ppUad9hewMiQDHj7pelSe+IDefV5upP8KUG+xYDleS8EghAhL4qX+3ApVchiDHUOnrzbOhkAVtcppeqb2cbF7ciL0R5F/ErHiEXzkOF1S9foaYixktDeURq7uEEOTnWcdbmLvY8eLlu77Q3DXJXKuOpK1ryurXvRCrJBcMfmDcuH4CnqFNVHgBbruevEy3sW2NDaI35IuzlFwnoPNl09Y13OPLiznWvDqx3gZi6f7dT40eTWSfBlvg9qu+CoYe8Gqj650QSHH9W3pmO8J6gQ7Z5uvxYSGblCufm35l69HeZq6MtPfUr48Xp733n4sVEGzWkfNyYE71b2fcMTtjBjbFOzVc2kutDTZR6hnxVztGOYI6z7QGZDaAd1DxGuyUg3keLUqcSm7OuTtVfyhR+I1S9i3N4wWNlhoCj5L/J2HT/qqi4ck+/ournKChWlcF42ekIYHSTlm3HfTxKG0UQzzcCBtl1+gzwCwL1cq8NAPUhVS/06bNnaZhG261xXt2Fpi3uas3td80EdhUC422lXPFTrWZS9DseIvER2X8reaCoYO87ICSTNHnFEbcVfkFODWN54syBpQPDfKJPGk88PnwZcgT9gsSnbUMqtaIe2Uh5/6asr9BDrdQdiT63K9T3ij8Sxv1glOl4nkYNrRy0vI1lyLlRUbzu0Vz9PQzyx+MCSp+2HfteZWIS/P/b9d8tZjYO7yEcsiDccOBro4S5vGBUjW3KK8jgPnb47nPTG6J5Jw+qX5cj4XaxDvTIgSoiWCq2zTzZNW/heGTue6w4z0KrsZ4rZFJjBsaIFFeumqJ8yRJf0Yhn0TgwUZS/PPHiXC8Dr49Uz+Uy53ffshVneaEQk/gvEEDUtEZKBkD+S5HVDH1uDCeE2drWfD+hhmhNpNebCGr8CjdlfJ1usBVyA9aReDppbT37EHc7bobrsSl9p0eIWeJK2c3UMjpE9aXW2K8eF4oUS5HGW7E2bCX/A7LQDJd1moGythzzGXzGBJ+1g5d5UjbvRIzrcVJK843WD6ZuORqhnGlha1qXXq3mIQnnziVb5KaYqyqN+o0NFwQ+hjdews70HRFvF45MkGi99Eqc3tFXtbiFU604PzlHxzZbNqsAEwsZUlr0M9KyX8Nt8WBYalQnB/jPLmOfGS8WsbP3a7F4t9EISsxdNO42B5lqIAlofCBmKhMnFoR4q795y9xI2oQt+21PEL4enkQX0FGthqwL6Va5A+VnVqavdYNTWYrcQvU6FM1WpIttz8jbX9UxJr2dCluBBbVYmLTVb5PdPWB+2vQ9J8dQ8RRL+7oRQtUC0aJ9qpYDSDgI8FuNXJnr6mTJALgqgjunTPSQO+uh6x7r7ot0iYGg10wGj6/dPM052eNOF1LhWsathkY/z8mURHVO/HwOpf0eNvphgp2/KJcV/QINSTOjyFeJHCKHPBU+CNbKQfu/9neEwhQVU/7r0RFoF8hkUM8jWdapZUdNCw/62kRyUcN5il5eSn85aW8mpHWKX7Da2gBGRSoTZXLtxdVMtXgadLItW68+2Vcv8TYTU6Bsf0FmNTqGWZLRObZARduD4aFv53G84h94/KksUjfqGHqmqn6laHEYzF3ra7rVVEqGP52Ry8xTUfAmhbrd1Scgj63laj+6lvDLOA+mLLnf4r65mmxxZCA2qR0R2Nmh9+t3PuwpeOJL5uhzk1KB3l581CuNKbFMpHhEuIoQ7ec5JvJ5josVHeIYFsm7G20z75iMEur1Ix/57JMX2T0bz+5iUSdj+v+ZaE8rY621DenpsLWilztocdTma72vm3KrTAXEyOsOZRaTfphMy9bGWaWN9ejHPZTyFyfMpP9ewmVXeU9irZdhuncR3LGFiaR0GVtFTpYGoSGrW88qTdrvO0YhU71fcc+ctlPOjwfruCimDBpzJNefv9iZKJGn1ZSuURDyHNiCEhRs5lAOawBWDrwOCAccB4bOFOLCQAKWd2N2i8zP0YsL8kWVydWbGopAUgjDifa+ywdrNynrdFOdsvRKXShUvyUXA81U8oGPMDBjkVfVgxsnl9g7vOkWwlssF1NbwDTRGbl1zbwdAPRYyxsFHGMVljUC/PGY3yv9ipu+zgwUwZDSp4bfQMWfiftcg12LJ18uX4FRCh7xyP/rJ4yFsoFoyYw7CpznKD/Io6ECbKF8txr9whCBONSnCDuiK7uP+HZJc24HjCjCBks0+SwCIrbtuM0iZVYgOsamiuRWmoZARo2H1NKJvI6H1QO/fYMk5nt5sPfdM9+EZ7IDnSj46Pb8nBnAlR4b9Tkp/mFzMFTNuO0a6qQMXqR6rYEx2/WJe3Lgiim0n7P2gjNWFfzNKzNwI3NozgfqjblEnezHTsjR8nyYDa7pFBRSS5o703duWaYnX3r46LeENtk2dBDl47Ks+/zARyzSUbl8AZ4m72bRKVFzUsUQL4UCOdCXLgo6e35X14fRSessLq3zjyzedzqldHwn7YzMpgjZhR7YZCq7w1mXrayfc2/iKEBOUT91Vqr3LsH6zQuQqroxInVZPzPcsKUqPBiF/3Vyllis6ElFSNy40FB2bpBycjtANVBxeMXIVvFiGEkKnZwkaW7JQHLbJh9ZO/p/Rz+kjjb2r/UcUbwpCjTTNHW1YH4SdEhU6H/qFA+QQe5CTnVq7xPbQjL3j0oEKs++ieenHDaU2ghxbU6XGh+ztvveNPaWqpwtONWbJL9H2jw2JQKLpyUNhAN/WfKsMWScvHM3nBYhj1KqRcSFXnVpirAtBvXIzySU8bEcKjvKeHawmVjCjQy4SX9REfkqFIa4ftmoNKua28j2ASnytKQYXOg5lvb698qLN3YWGzsYYxDSXo9jODtpJoewMOwmxx0UU38FoZNIlF9Tg14vHl2niTVfl+TvL9ASd5R1AeaEncBYXPZpc6RYkuhFDpO8WtEnYWUdYVPKQDASYYjdyJnuL4PLCYbVO3qwfzBeO377DMkDaMpeA9h1VExqoDEya7YW58yLKJfyC5UxVGXelfSxbXM8FoqdYZi8ArW9hySJjoBvp7CvBPZECn+zzXdldycIutjU9Cmgc6ZKyvCMgfFVIDO8Q8P+TlOT5OxDVa1UNLGdq0wFWhfvGhFWQDW9iSeHMJOs5MiEMV0iHiux+Psyw/iuEVozjUSYtMpsWguDtN9QAOLojaNgnIHDDWN762urOqp//nAtVAdQ/1h9ZeSLGb7c+6ik7+E7Ibt5zN/00pdXwj4U28wj6n3nA4KK1ewncgcNK4bY4KWpCIBGq/qkAUfalFQ1R0VfXz4DoomscuI1kQjNlSxYca1lxd75WkpCzQrK4i8OTMfJDjpUDZe/vOOnXgB/hKcWHa7RvIWt7MW6qEK312n+HAL4G5MvCzFUFABuXvYVeP0yd1PRjIdHneN2RbYHDKvpefmUbFK3J1Hg6bTBgnquH/7L0YpPJO05ONPd221v8x5vWUD3Z0ZtJjr5+0Zj6HK/YbzUdph2rJbJHxcEfXRyLDJDZ0tAmhOzXEEueynjsQ0C987Gk9/Dk3C2gfnK2zF2i81thU81EM/PBVU5eOr4PkouFZOPYXP/xxF1ixG17ZhVRftWsNz4AWMHfKd8QOTnZc55XMhmOViInNMnxG/GGle7n3/wgQDN6S5YljYQcjtJhvbJ2p1qq50OZ4vwAyruq68JKuJs3pSZ2sJvzuOWC4ZTyPcA3+JomB0s2eJsPpg1RrsdsijieX+/eLiLtK02Axgb0RzPerdzDME09TQReECjlTLU/+ctFDV97o+IeZZFKvIF+7G+zW7QppENMoUaxscneSj8QSsAniME7IFKuNYFe2nrFk1ILpy8i0Bln4sfVjp/cexMiNdT7tr8QCPTdNNltVzHbbuPKmnzo905f9X3yaumQpnTy1KUBC5pY3YDA1c+1bUR13GGSkiFbv3/ytGROJh35tIndciyhR/Hjclb0owgsfWAhnmWlO3RZHo2VoqQfb0DxXCx7J+Zz7f2TeUcU7b+A5jdxOT0NcLFe0tvHST94uVRl424R7X52Ou/zebmbvEsOs+RplAHMZxwpR7yesMD8fAL5GRb8EWnqQ87UaZtbRh8GVC4cL3z5qoeuyotycWbuiUyod1V1Usrw0AguV5zSCciNSIhYIWocAdJO/MRRxyw7RsuAJqkNWKDTzz5JJrvy0J4CkwcjwNMu5H32gCtWsjwUZfGqsBwfBfafBawywTJemyWF7dxsd6ZB0UmaYQy4JXU8HqVnAQdJU+q30YYtvQiflnKiEXZSthwHwA71jvrUtMdxCjVoRgtKV2axuYlfVXqbFOSY7UcmCCeGHN0bud/+FoORDTmpmUuhKmpDteJbWwN0zpBSiWM3kKoDo9aqWQ0gyXFNeMW2H3sbDXwdwk7mpga5S3SycrVbOUKlRgZ6i+Z+493zKSvaQ5xGjbBUJzR+dgah99mp3nSFdfCYKomLlswqP3bCq1MKEDWBrKZ6OvNRLTq3hSFCFzanZg+TuSIFrYjyVqHt5dZ4H5sDGqJBTNd+BabeZ5CEIVNQJdnBQzx3qDdT0tqiPWX23V+rH1IRyLOMrw6GUQyXDSOuq88Q/iG5YysX1KzUSftI+JJ5QobWB5hkdtwAr6TWW5mFBeVnBxNwNRPW5ik4cGHgChpVfh3cg2oCrZ4NjBtSfOkSDQpXQ7Eucj3VvGRpvgjvnfAfqscDFtaniIVr/UpxbR3DIjfiTVogKsBrCZ7Oi2AHJzfvHaPHrNVXx0KPHsMa8oS6Nbkk+4I4UdKqXZVYYyv6yiHP1xr/Y6JCzvstX7HR5WMQAjsREi1cH6OJWnWbOaWv3zjgTfaJq3fI2IijYD6DjM9+CJ0nzgnL7BhulbeIP9ZbPRYazVVQRiGzMzH0vlksUMgDkE/+js32xl0lsWvKB1dZUEBIeB21IDU0pjLdqHi+BgjRvpnELxzbvN6kB9ZQwUIsIH/k2zPVqdG8xBNUK41CcnmDfwvfsinr+MEWkANH5bTrEWhLIhxCxbQXz+PEEZtar8rTseJvMWX/nTW4Yuo4Y7iesbQTN39ccTKe8THvMLJaba2c1Vi3rwPBFQ3rRyYTIr//Vh9sJA4qDnHVykQBeprO8b8kx0VzHLiTOZMwJ/l6wtescgUCcV9iQQb2SrcfczAncceeOlmYnhOXGD9MusANpVChTBSr0UQqBzczFWouWcZ9oJOIln6dRzkm6dlGGxTdimwbxC08CjF8DQbcxM1DxUW85y/ZrbFF6YdR44wdAe0w3x/I5t1fxiRXAhdKnd2ADRpS2+jJ4VnVbqN6eQnaS/GyUWWL0OXBwni0quazwXbxhiUxK/JLpFPDRcCwYCNx+ZuS13pOonMeff7w6PxP4eQnDPJ49HpjNELuAYtgFsWsh1Cxxzf7QhBj4YJMl06/cRrlCdNjCrPbZnCQbvRZ63UsuJdxievsgqzPVCzKzWjHMsnoQbDorOUL1fdtqH2jMMgTJawKYrqXxfbOB60uxE1BSF54SqIiymV0Kifp+ItZ66H0AlubA05bKmvxU75UG83JK51U1mTMdAh+E2E7COUhu1QLciChTCRcQecwYTia7v/k8c5X4d9a/eXoc9PGel548At3YgMgt3wPBS4a4wPCtUYmfZw60lo5x0ln1R5ZIN2WsaOri71C5YbFb+cxATziLIXGQFYVu2bAen2Tin4ewJDGtFv69YOx/UrNiExUAQ6ksD42TuMzYV5H1qDxwQS2TNfdwzheymbv7B9/LY9Ao3gLea6Sk0F4kvUmMezP3l1iqr39nSCnabGY3GJiWTXM7qRqvqHFB6sLuU/8kvPfYBbQSHk4tVg6UjMGRgD1W2CSL7AT0VLzScRupoW+hUwHvQv1YW9Eu1ShnYC/B/i3uWu3qAmPzOv90qU1ovsvTWcu6/i3drY49d0TWSdRIC9jjX5sfaWoyU+fn0n7aNVwsUiT/4BaGWaGcJbTMuefXG9EJWsnhrI1XeadS7Stg+Mizk4nXfm7AyLoJ5BqurAYIKTo3E/012v6SvlWWdQsrA45OmJexeh/5kItkZ34qyLkL7k8Dxa5w4TfFC+Kc70UucrVJ6iuyORaKJTRCW6uXzvKTV2dLVmJMorIYl/V8dCPVJh+n7hycYGSOUHsbc+AzJSN6i/nh/f0HKsBGXXFyjFN6NhiGxvculKNyxxfXsfx9GYqHuC12Len9q2iPRoUMnHa9OXMBZzcHhGBiB85fqgl7ddvNB5QdUpXq9vv1/0p9VTaMgV5qYTla5S72B0nkZOqXpRpvbosK8t3vPw/Z0gqT1dqEUSAX/q+uXx136lDfKEefHIWnLDecpwjnNDwSKZxTF9J5dZsSkHYkEenP9fZ2P3iYY5Ri/2EDYvj1CaXAzO68QaPsUtQOpmu01KyDLwEKpP5pqH8UcgQnDqHKBIOGgZsNZPoKIcXU6FF7iU6lseZeh7zGfd7ZdCvaUNTeOMDhHIpeFmoqGywfMw3B6yp/6ApDz/KM0tmt2VlHKNbjqseaxVR0TC/o0VcI+XJd2tPg2mvXde/f4FgYg12wMFOdJx0q0zM5zapzt3/MWPqVfHnXEjOy7tSfAaS7chQDP/Ds9MIjXh4UXXYm/zYDLlqTqymI14p2N3FjiHxxcfqEMJK54B2Eb6O3ql3sGJumZKt0M08Qwi/N2aVSeg173wO9xOnAwp3sC08VRkOk9T5SpiBckXwq1fIwRJh6BrqEnr2TUh6AvV9aB6X5IWSu6ZyQ/IEZSRqQ2yTD4o7Bwf/q9I1UpLwx5ynAv1a+g9P4TZoa9pgl08QTajphP3Zuhrp7nbdHZe4JmnjYzVOe7+0dAhfVm234LgkSeAIMo1irE1r+LJtq2P0VZdSSvbN899jAhkL3cC7CogRi/JLg1W5WIF8q+8w8QgWEBxY4bbE7GHOxtSTu2v+tsCNFklAiBhBoGQngVpLOjURgNZiE8ugj39d14BwjbtBEw2KI/kC5oxXI/Gfyp7td3HxZNDNtXBOGydrY4AAeObcsbXGnjV2raVKMbqtinnodT6oXNC/do/B4Lwf7WK42aO60LioLcyUJHWZuTe6W/Eeh1scEHzrSw6QpvMHxIOxlHpobvBQsATGJdilKosN6ySKhKjtH4SoCSfcFHe8CLbqy2eHbWPZDOzIMxrk+2nef5sCp1W9xkqwgJ0lFJrsymNVbKb2278DaLw5mXXk4iO060E6ogFWC6jUeVAiwXJcESay2965NYeWJihKMEWWE+xUQ85n8C9HN5HRoHFERLzdEjJ/lB3ExYP7qWnNjc1GP1tQ4JybaSkH55qIf2vmFmSyOzlFGvqHFSOwE0UG/lvyvRWmxAXtqedMXe3gmfw8BFRudcMGOL6eKBtC++Ih2+m+hfVEqaXwwh4u6rN2vsVEOo6fUCkjo7xZYi2n0X9BRU7VE42IZlu6wPYXEFYU3oHVRA9vvI49Tr1NZmrTtbUSLGBZNUWBNM4ASaHvXHgJ/S0jonv5wuy2ZTesxANyy7hvZ+puOh9mXPfq70NhulXfZdFrxqevAUTqCs6cR7rDg7P2lIpI+jRJ1jIMiu2graODtKy0JNRtwB3InBBuERg+kMI4e8s8H9c23wu3amhjc1RPrO3kZBgRnVWo/4vz4qm/HGuK1+WTmoTgGr06aJ8YR4I4dZHtSATbkoyh4pzK+V9CjsXeWn+QL4sFDkjl8ZJ5FpeVeoaBDQdZOGhf8MNqIQFciVYIvn3Y4GK8fiziF4nGrn61HFGlJokLekciiHgGTKhnhGUwtNL6ZIpFcIpYBVp8qZWXl4h4uONEPRDkWZ1XkQy+0jWzW8WxkXqu2eGRCN5v4JmHJd0ZpOoY1lFcnXJvPc/P2WGMBafg7vHhcnRUcIWsbD1TMKMWZ5j2W0OLhJl5+AO0RZEbnEUFtfAtyiEOkhlpyqaYsYqsmg/aSYuhlnA3aLSqdJttmIEEON8DffN2EDnYoRXk983dYXEkOkA4QdEWS2tITvJJqdYt7l25HEWZsm3Dmc6e0YYC+itl0ZUUQE7Cvgv+B8WzWglGNUkzhcz2B1pryVlrHqkEnt/Cc7laCZgcDl7zv1kMyhWcUtjyCbGJz8R2/5YD+8YDxD/h5173f/GZNUTpW+dy9kXcbFtpPbFHevQRTb/FU3QBfv3mIOMwJbbBsEABJFe5yULyEJUyqrAXdfa/WxtoGiKmlxxfdwUpLmdyU1aBBSODIR02/3d18HLwrMcsqqWe5Gd+kAuiBj/mQldcQCp3A9ExGslbYaur1sOsO4Y9UwbYzJ6Ly7FKuAS4M29le3SdE50C0eM7sbCTLtoedPwU6AB623Pu1uaOAi5Wthpqktw555pNb1OFn6aLbnzBD8VatmEqrzMceIybUPOXakpZqQi1hYUSVoq/cxImOs3yLi6ahro8qLoUXX+q15cTDLthiE1Jr+tD8TC7Cxd6oocd1KfPaotfb8o47xbTrBQ4YADXv8DZcqhu3eYYzRvM/w6G+SNKZT+sg0L6rr9ezEf2LQ5ZBQtkhRVSxjk1Ei04gmyAbLnYsbyoEv9Tsrl9Mo8aXQmtmwfRF3zuIOVlKfV4Q1erMWR4KvTcAVNuGctaTVr+vfqxVceEyQvhElPsybgeOM9x0/SQOn3FSNdpFQ+qPfwVZjBlT5aRZewlvn3xPSB3X/P0gytaM7K3M3G9fFUzCvXmAH6UVCiAzWxSsxyN79n06HX7dAemhOvS/Aa8CWluNvVUVgF2/PDBH2pSo3ouQpyMBuQaKWblwrRKZDxBGEn1trCftFqPRGJqoLDz4RjOghkt3oJKkGlPnlZsZzcogcG0MJHEKdr3TsX2I/Su9bHblu8vU47ZgwX7KVSY0udU55QgQbg1UM9fD6vXptnWrR0D9T9vG/KK8hCspivPp5U8Qw5xEUpfHUvYFBtEDWoz4QgzIIKaRcOb5WDh42G+AqMfEkXbH6yfhkfWeyM4BQuxqYfe7UWEJI4rL4C60wBmD2OhEC7jxr09tgQKPVR2cPrri2fT40Ru/VALOt71zN/tI12GX9oprLnXZ6xcnaRcdpnwB1kVSjtmq2+4bZZLs7TLKZwEgyTsnX39oe1xGXvX0MUhBpZoZeqtPGnY+2kP628xJD3ZdaOuC2SBJhgAMQ87bubTJRgAhERRsPpRtP7ouYDqku/IcV0uo0qzWokmYfjxnUEQWxP11oEXFoAYg4dzAXJ1Xo4AdhttUAs/LPgfpyLnTXWkXUeFg6jfHvfVJwmKSzYWQeJqiZD2k3gj2IfV5Ue3VkorjuGe7YtO8tyNgnto7+ZiZq6V0gCuTRKe0IA6VMzS9Mmqt6+BX2gd7YG7cO5NyZRS1Lkjum/neJ0oxtXmwGHHYujzrM86Nd/xHl+oHa+g9F9VUhQ7QdYUa1HpqtOyh5g/bh1R3xVTjxcGe0mGNocZzADniSvq2maaosmqvTu9bzopcvjF5Y5OcxTfE/0Z/CD3rGtFNtgLyN3j+Jfklbl/rn/HK5dwePd4iroahJCsB9IrkEJpZjKmKX3nnnDJfnXrqQkeV9BH6GffWGM/c4nkeWhGatPHS//+zRKuuP0wrSqGrudD8JgCNBtyMm/r4zKjFP+Ht4PCKCepyzjDtd5yQ1U78DyI5cr0BWTPTfpPeE4AIdJX2gwpIlkyWTxxO9hzKucZcPj+YAcoFtMMa/u2Vt855323zOl5yPeDWZrMerEvvYAOt9bf9phzJwc+x1NKV0Te454sO3gmiz89G7SMufjTcAhl8SakQNYiqatDiUiat0T/W+b8kSdAWnE0mPEdRU1v5EG9GgfhN95vkqHqb8zIdgBxonERaQ6sGA3mv8Df0JNffYcHlutHHWRRSTGJ4XECcoR07jJZkopvi2skHtjzwZ3i0WR0bb59X7LOARi8t2LU4OESdmyS32qBvpNQ+9VV0zwUhq074Fhup/QO6jChAzaVl5iUwRQmGupj5xNAY56LHkPeNh5IpgwdRb0EJ5kPb2RNLRil6p2sek4pesYKS8YwUBhU9TsdS2jtUA85VtxlJjtwyhuAO2kmTC0M2hizI8/3fQ+BbQuApLyE3xD0SF3C6HzG663eDRsINsiMTOqIfgiTJVnQG/uTxfZKbFrTpwGLHFWPD4BexCr8sJE7P1/kEReQ2dBgtqTjGqAlo7Fmoglty6KLNyEEyGiIttzGrYi4Yf5QCGK6FJUQK/1U7ZU0FFzt7nX4ZcnP8JdlxvF4sAv9pmTIFyc+nmWFbXnyKXwKlmM65KWKOKD01P/t0rLLx3+b7pw1djn839Rh/IavoFTQyNCbwYq4kAeE7QvUSO14aFzSO4a9CI0nwcKpufiP9VvOb8icwMJkwdsHGSdB01+XuPkvWc2aUgh27O90MpZF2lghqO6cmpoJSruRgdzZVnejuQkyJH9FDHsWdDtCu+qPVxfTUcRwtLX/jQaUvtYpIcgUL6gxvkpvor9AzWiQfhB9loaSPvVrL5C2hiJlU3d8dDpieassFx7wjOfZUXZoigUWxWsdDNIqx/e3SSL6fgzKeSOxEViGXhjNSlIoS1/9KyYOHQhZ5fScglE4Ju/WziIV5wrRZ+C9TfTPdNmDLIAFofIbCFrOzlRFpSH0oWKfQjVq4uztSZmHG6EYqcRDToW/xlQgXWTuGONvO6s4+G+IsQK9Tt2iuA7EICKztwf8BNdcE/0A5rKymHVE4TA0ukTLNxqFPUz1a5vcQhAcAwBT7ESkjqqcSETYrC7w56MbqYz3Vj2H5P3d3o/r43ywOy72BSr0yFgAI8SGHVKYlGq9kQhN9dL9wHudW/MUAgVrK+OMmPAMz5K3FUS/Z7ar0BplfOMQklrUnG9myqOicvTSDOzT1IEl+e1im+FXeAP3PksqqCAXAGvgG+jFrKAOYOYgZDfVBd4eVSsUjgS4MqAbqYb/sqYja9a4rNX1LZ531ZTTG9wD245foAQdfBmmIhY7rsS03p35EJCc/ZzHMbg8jqTy50xVqpaCMbfDpWWf3BH5ZE2pdJOuYJODfJ4L4OeC6Pmc0+JJj+pRbWzCjjeMetW1C+iW3ZKvJPTUJ7V14sprNA3rlvigpNNL0HK4+UxaeWViYfDCNJJ26uqAZzt/ArBsxIAx2VQH0Cf3qGssTByR06QHh5EraYTdO0n50kSwNwRjUz2OfHUczt9cXK7oDPuVGrRu0tMIir2LCN84fCRgceslVaVEEO886VorTEWUTMvyUGTJInriVLFnph9+ZqLwrFNCN5OSkYJECDW7oelCj2Rr4QVnMeUBIe+R2ExIaLkY89jRNJCqHyaPyXz7Y+UH2Z3pcB6vzAyEr4L8UckPnakSU+MLbD15xu9/k1ltoco8AIOj6H6leJpRLd6mch34cUkFo9ynD3ui7AWNlInDoRqNo2d38EKfGFgXOeEv+G9lx0MqPZi/RM6Rkg47Kh0NeQ+cdhqUPqp4Z2K5YIvLfb0HHLSKfYf3m5RftgAok7yfuVXyvMpxkV68H67Idgtw6q6XZtFZMcUo9nJCRJjj9+P+AtB1VNW9BGKJWsEe0XG9HJ++ln03B2AvqzBsWbYQ0NHCWIRxfgPglmOTVlGkAMU6WL9YWifHQsYIwXcc0IM+fS0gqa0RYMp07HkGcjZAjB3qarXw9+Q7lrADQ25qbZO1Df2H+F1a/YHhTuZddToZHU28YqX1moS+5j4efvnI6ZqRByOhm/kCBSjrh6O9nZ6l7T1yKpTqDCBf8414jspSZ6UhUhOy3sPDXUVyELBuziSGtpF9HF0UJ5+UUalCuQJ4WkMiOtRaFutjj+RcXRxztgUucwjTh8RSM6WD/2Z7vKdon1OZzpkD8fFil95Sf52YtMXoYHGjX5VWTeRYFgUdK43879ZMVHIwJ8xf3OCqwgJyvd9OIP0T9K1PbPIgr/TWAbEu1iLjnXkXDpyazNhP1mRfLzDPMz9aSpfS0JW9iheGO61F6iutYV4IG8nqhphj7pTdy/ks+3SnGVmZ1YgTzi3JE626Zsbr6puAwhLma3w3zRpNAdkDbG+MI/GMbLvbc/7ggVsnTgsTyoR8Fu94PCww2VbthH1vZuLADXueUugq6AZsgeAg5RYcAzeAyzGJQnYnJSiE83P/PEWG4KRq+cS/WTEmljsLiKv9oWdGD2UJSK7IGQ5tPMcpzV2Fll30XWtFOqBN2DH5X1BO4i1F9Dj6CFhCMWOmZXAxt6aVdeiby2B+QnSV3HplMpA2Z71tqgWyLv6jbNPVhoRXyxXlELuITQaIipUfeZtta94Vo95Jgc8rBmwjZUZb0LMEJ5EKTGBRohBiErHxBaKmYN8MxHswUjY0QJmpeJ3xIc3thO+UI48Ezm/gGoLCPgAgwn/mJFFtHYh+3hSWUCWMLxiDCmQeTCGr+GAGHEqCyQobHrVc9oUsWD/8dkilQ1GbNUk/f7vMom8pMpk7z5NO6udx9XUGE0kA6rB231N5Etje+kk0wg7vN1JvJQT9m+xBaa3FUJPe+6JZcP3iDhUcTWyp3SSNq8XUdKBQRtKltjpXYjTQNDb3s7YYOfOI314A3+H2ARvvDNfIFvxeDvtqc1vd02eLmfV7vg1/ZeEo6o45sbMILcRBooLoPbW8EwJoqSCrNOnvnjaUhRgkBsAHpTCybBqeKBP7Hg+6dTdadkPX63i3YjK4emQ2yzByxlbJnkPi7x2dRN2ueMrL8QcCbd9exns661CBo7Tasr5Oj7FMh1Uhkc2KwR79NMp+Kxz0ep9V5eBzUxQuur8KrClym19CNygqEBDkUi0kzylpZ/28u40SR1CH9lXOIYU0EUhwEivfvRtBmBFHNOWaXK2KImdAcCqZ503dQBwPu9chTx93B/RUCfKvmzeqsSzMfw0anAotZ7jd5VFk4YV4pz9urAcTt7VocwQgNsI7hZjBjalEX7fc7uFqMIsiQycRYzl4QA8hztXKzTjLuhphLhpb+BjWGWokEBKQld0+FZvsZK61Bx+zuv7AWmG5DWr+aalPWmUS6USyn1kEB8Di51DdoehPTvj2cyQ0a7nL1CwXl5NEZhUDYz13Wy9zJVWwVtw11eikenpU6pAZHUlCszWODTpf+JgbyXVLeszLJ1DSTkAWHbzNbF5RVroG1kudtKq9Cxv6tqgRWCjM9FTYWzmmFN0UBJHNo8mXjBiI8Q8o++RM9nqvu7uY9Aay1v6/w+VrsjVqkw77o4K84On8T6uvZrM8DsFK62ev3i4Y0W0pTrY0US0ZCB0RH6F/suw5AfBZ0HRDjnQcy+yQFoNNqp0A76WC0YbWApHeIpsSvB1v22YKGkAxvV/TwoCOMnusHiVksLaoEyieMUKh/No/q+dm+JjXG34BjiZsKNyhZbjgyLivNqAwVa8IkMZ5gDyV4h1g8vqR4l436xRFZqrFIOBg6OZlWa6fCD3y0FDq0w4v1Izxl1RDHzsbnQ16HPD4aI9S9V/qMAAft/mUo990Jx6UE+3u6aAe/dZ0wGCr6Y1QFqRPnfTnTpzOMt1El9esUVSMvZjwQ1sAza1ERsUnErP0bN4Fb43SdAC2nJ7vEn58hcIfAg2HZIGTbVAn7B1XfI2SuJeIFJOFLitFUzdkK42uMGDvBavG1dZxt9FXUr1cbLWuWO+umgwVO8k6YuAQiUv0Gbbo6y+oBkcqV+cMrWfT6m9g9iOXL2+M7E2xaWRehCs6XJ4Qerl2oDQ2l/rJjpJpKIWKgis7uIsPR2H01h2qYLBKeLGGbQgJlATO01W6ivilzq7BNonQC5cqwR+hrexNx5Y0MRa5JNVD0/tWix7M7BqLHY/htH7lT2dN3h1J6YyRDEOiYyj9k81VHU7F/zuts2x2etjK2/vo5eirTZ1qWQ1+5qDhMLmEo9nkLMkefh6hnx0gYpkxm+bMJCn3BurCZOWJNWkIGYyxd2Sz0Fxw1z7YmFTGogTtw5T4LSTwwqaTzV7dP3pqK2HqdrNwhPgThmUgwpb4MrkHHPawDk7g9ai5nCXGj6hXGGtHcWO32MG2IiGLDZ/9t1MwZyC90B9sOIdVBK+C+LWLouDZguzhKMdL/ubDUqy37D4vw4ewTs8Pkm9fehpQ+WRs55OVHnQPHBQrAhH3g12gzJlk/+gHWSXMbzwGfQhseseRdxUKG87jpsKIG0uY+J6tRnWOJ0inCTxGDpdeZTMIWjg5pz6cCZnyHbVGBUwdQG5Gv006zANXDhClnnl0ju70s8z8L+MKMWq1MiuQ073H9BesKPTX3vWHCu8L3gjYrBTnpVs/hpWhyGMjVg2Tce0iuKn3el5VKrYOkMXhRg5D0bifwKB1St9nCE3fzMjj1QPQA5T+YgYIvWOCZu0on7GzZQ11pz0lYJL2FrBZWgO34oWgpm2DUUgFt9hxpWKL2UcJsdx4oMaXaCa8sCMyc3jeORzdbITTKIip44wTvHUsvgNdkO1CiQZdukLWgeY1O6V0zzqolgfoBj1h0ze5mwZIAlIMADGu8jdBE7aUlh4rC72FdnGvdez0LsYDH0tZEFrEI6qab5Dv4DqKUWbIjgixs7gReRtUps8sOrHsRaLrd4u4lwstl6d5r67OzYQQaoGZTrjsIGFg2J9YZXPkhJ2/j0xpAMQtAddc/z84mFQ9TGbCcHnUwoY+9yMW9aVh5rR/J7hHoteaU1l05BAW4nr0Z7Sg8qzisUTC89nf6rQY4fGpwrIv7tDspTX9tGcTQl4SIUxwq11Ljxni3ROTaFju7XxDhH1qS0kBOYmBNfWG76gCO6LENroezDGceIvgo+lcsVB9LfHaRhJ1AW+d9jmK3Ly6DRh6Mta0YOCVBG6WD5JqPVmJ734FxsBvkWDFXSEVadoxyn3HpyZPaxDZPfNbkdhfHLN2YfPm6EOjKRVDppCVW5AjV09Np2pHb0OyEYxMnG3ZxbkVGGzfB7wk/pxzeERJETBhEKMt79vion7Ap9mWVCtbngU1kmwC75kg34XpGEYMeIlnFVZ3O4GOS8N+P4bbSOlSA12AU+EU290/aviZcna3lcJov2ZU/hudcW9F1Tz3Vmd4KXF4BW33f5LGRlbSecYicKBL10ZEnkFrZxnHY3klSjHPjjQORUoKk89XeBe5jg28omDc1b+3E7cQE+fihqRoAM0M6Fdl36jdouLdkQ4emWdtTz5UcyqE/rCuiAStZ51BWGr+2z7U3qQRj+Ax5ZLi6YZP4ZJbIqWmQTciwNucyNj5UjwxdNyRy1aW9BZUtNv95iZoegadNiPXK7Ks/MpXDNORMVyTDZju6bYlD1y/szGhQ6ZAMwVyXaAQu5uK7hkv1sZaNMFMVGF0r2xyGlmljkEfRaKgK+/Y8gOy03Qj/8ZdoabllAzrOkmKUf8LuOYGdLyFlruFoo4MFuQYYkCMNEMqWM8ucMQnCcZnMRRDiGjzwn7L1EZ1YDW06vIVP826KUYyQG2RJ/oraBa0eR2SgQzLmvAJ53FezCr6aUDAJmSrl9Hwe+zod8i3X7eUyVb+yNTc8MTlr0/8fjKPdRwbgifq8p/Hxwl+/BVwlnpK+3BgvnE83U34alkiN7GW0+J0fcF5OCvdi9XTahElAplCmPpF6AakGh7kHW8Dew8uh6EMVgCekRdkwUFYzgA0y5VvxbzrEES3L/TeRmwzZBkH15pKsNB4eQCNPiGg3snjH2uSziLSxcsLRfNly/4I5zdpYjyQXdPq2b996WjLkPf0JZUcgz3IAIEZkwE26wZAMlr/yPlQtydslcwdOna6whjZMwnW1BPxANCep/HXXJLm4Lsft9OCD577AGz/0AZtDKpjO5GkoYZtLYGc5txdPVMLHnJPxDos6Gls5wH2xE4Dm+ntXzFz0s7aYFvqTI3qleBarn5urkEcSs+RsiBgdQA9gSfPrz7Vr7GUEAvi785eTh1SazJevvXumStyOfSsmdIBx3mqkmWLBkFdmcpoS5TXeVtSNy9CbferQV9NMxt7AESCEengdBM7ID74m3YT0rvP1AKJLuA8M6ac+TJtD9gj5jQitJYHbakvF1AzTvfXjliVpWWTdcdigYyfKSDi2PjkapZpeUWtzDODLQDJZyumqxd8Gw9edCpIrIiZV9mgvPIxHnob8VfhjZmplo3MNDHALCfOFvZC6lH8eRvZoUIL7QDFmEBvqLAjjGnWTCVJ6yvH59fydyK2qjXjRk3Hr7P1NHC4ucjwiIuoLk9L2BZFMj/y03IlMNB5NL7n3wa5M/11wRzipGT+gTFZFxm7zyTCNqugXc77LLkc/wKS2oFifizqodB2VnRyrzc0v05DI3ugNUctqFb9KPk7NiV9ieOnEGOEL9pbyXw8WujIzCaysSYYWoq7o4v1XOI8Bql87kk5pswT4SD2D7YOtVYZMJXdSzW+rCYin/8r0U2w5BjaE7gMumqLhG0hTwWwf79nGazVHulWls9XEU2lCwUd59nKWnlT5YXdHqNtZeinCMEYxhZ/JCG17CFgQ5uHKQNKWNKEZ5fcc8rsYWT51YMSpjG+OxDLIN1X/5RJPG98rK2ndxm7v7wGiAX1GSQUph6YDKkHm0whWU/9lD5dKQDFcFvpsBFFdzN2jyJ7UPyvclodqq2E3F15T6KIJ2WdBKQS8vZuP2TOGSJgYFGfg/2IfaLkWUJcIBgJuJAKR4WYSf8MS3yvqTN9hJMZTABr8e1ldXrx9CoekEA2h+LnYUnePa/iLv+d30Ese0wCJnnVSWO3K8njc5I5WAJI1swjCYb7cuMy7C6Whdw6vF6DaXsxL0TPuthlf0NHW1sHXvAD5h0KwkVaObfE+COkQQkR0d7xG6o6GD3ZB2EILNtk1GWmJMNcozFWWi5DXBcz3VrnKFEWhkdmFf4AUxhpGdfCrp011a9YiQkmP6K3edJ+/bU1Q5Fk1T3Wwlec+fJ63M4G0FrDBe2h7xrKXu6rU+bSXkH+UGQ+D0UT+tQ0ORtcg9PwV9WnH7CfMuGy+55TeXa/DWLYV+1WGf78z6DmXQLJ7ECLeSQJeLKvHPLacDfJCH4iqOyS/3TXVB2VHft2SL0ShUZqZGgAdSRaLRDX+FwGDZzLRxgB4H+b75I0rel8wR1BYmGZhnAC82p8W3+c9junS2i5eB4dOpreYiGB896hvgW9qy84/Nm/gcYLlahAfrkf7aBblN4Pqwd5JCWTvQYSkRrTCufiUVmkfbuXQ4ArQN84J6ZLBSWbifWkDB/KJTK7nNBMnFbbCRooSNLiOgB0m0QiQhx9ps4meIdtEbL5fmtqdffQJuEGqwzvrEsAFDaqamj+DsnWbKS6t5Il+HLb24EVfxMPRRtEP6PiIgglSZ5LELTrmGkiuY0Gxy9qPZ2101jC6/0OWr1Jcmed+6nlszz4MS1QbA0jAwTgrnGkm1OE4vuz1BF523LDuepEHpj/20iSV03Xv+6ZG/X5q4FFPnN0mZm6rk9qlYNNIQucE4ieectgjlRNYjyFGRx6B2Zh7dCGRiRziJSXacaRo4Zgj4J5TXIbJeXHutZwTLDDANrG5qZWbDdHwakimg1r9dKbi7x+ZlIoQFih5+wigvlJYAE8inwBanJ8KyYIuaDgj0n52P/zFZpX++FakFJXLpDIJaQBs9PZG4NklsksShO02+cDytCVGg9N2PwBmr2uIx7hfsua6VeVjqyZIOaZ27tRFBA49m3zuZGVVhaewH2LpinAYzc9n8vqnwnpStVk//sv5T9fUgPCYoGIZhlzBY5JBALDsmZHEauo8H0zrywqvPD70KQ2vFuIH15Hhe9hhxZzRyN69hxS9zaOYvvXArvyJs7aF37VD3bn7b1XjVcSwxqIrggFDD8wcqxifj3mgxcz2IMuDiD16RFVEsMa4i4qwEx0IQhXEUpvFZlwjNOctbq39bpPMksQzQklWRxZNNpywpBVxnp9zHn8hsEgoWUwCn4Wk1eFiPEpPVq2Oyrg2EDQOae1exw9hhM6EqErdo4Y0x87Xjrd78VfUoEpX+gZg6tx+X4V55BR6Ti2dYiNqs9d5kDVjEX5HTsFunQ6LYwQdUazJ2WnBnzQDCgDWEHwTLafN0EjYejRgYzFiEnMI3K0RIVIR+/ckjEzTXSv8LK1IyrqCLqD7rRnL00CpMwivEZ/vByyXoif5dPRSDzwx8pK1hEUQwoJS++9+q66NRuC22Dg86SYS64NYrYbJsk7HY7ZEuxlxTuqfjqFusJ4B8AITXTL02tU3ttGLBjsvJL6ZyQC1N+70rZePZq2wl7JVRS3feNzm8kwprQjgbeiOkpKQ6mjNRHYtX3mo+IGEIpJKYADVqEGTQ2grS+acp6VaNusYaeT3GzNvsKHFmL5ODgLUw6FyUo+35ht2y4p/8ujQoHblT/YUuJu37mMCAo2YwjHxEQBIxBW6/PM+iVibPn67CKfXvrApMs0BXBwWNzzUK596Uu1L1WZngMylxNPq/KIYL1igbgg11IwMXdlX3GEpdbIJDsEuxWZpvht+pjTqimaVSPMXBN2qbA8T6c4xCy6qP0Uc3FIQnY+6zIBdH61CHokWugSbtRoDp0ae+7KQg0A2rh3MozJ/QW+aVEv7S1Z8WXw3m1vO69U2rYwT/JbNFJFeMWfOZBHG1NfN4r7U5w85v1krsu7aS/paLwrXkcKJ3HiCpJ6ljdx8oB6UuuZm97SzhoYN95F+n7dA2RUfquinYcu6jV5O7KjqwAVXZ0A3RzW4N7411Fc9dFhK0+8o4tXp+grocSHGX68m0N6vNTOHfgh9aEX9n30vHEBdmYsobboUjjGF6x14bt3H4l/f91GEajLg8CNt/cOlO++e+THr4GE0P9HFn0h5J5qlITdSzDogZqGduAIkzV+DCTkY5tzwFG6VIummCyLENzrT8XpwJm1X6aw4EpNEc4prpz7gOytg2Rtglms+Tv556iwQ6PRrEog3bKe+NvPwIRbSPqFLd4fUwn2XTIOT9+fEPu6hZPRd91X18Jy9jV1LjDGHbNPyL+F7qTwdWz3h3T3dhh+lxMI2fufrhF5HgIL1dWC4f3Bble/x1SvdMHqDNcMobht+lnx3i+eAU0j+pwPyq6oCqdqsbeL+OtX5wER4A3wABstxk7RjjWyyk7xTzMtSz5gV4rFPGp/fU1pWz55xHzlZRz74j1AjGq0rVXskAYc4aTv2wYE1xv+kqaFcReNMfV+xqulF/viKtYYrpHAhnJU3yd73cOeTWth0cxR3BvqI7Msrij+3C4aZYFOZnvpnQ2EUFOEekX1hTKTosmEXumbfEbesMPjN15+YejMxfCWpMGmr0EwlmGa8PjQiM0TSgAxKEYgPHI2MmMKpXOiW0A7Bf6/PuOEtBXyMIXj4pXnkjEjNJocjG+o4zVvKg0uCD83PEmxSU0amBbenkWPsZkJy9JhIPJBD1RewmJtTTb0gOz7KJdf0Fc0gg74my+WRa1uzVq7LGxe540HWG1x3SD2UiHa0+RCn3IgM2R6l1ZOdewKVEHv6zlyi8poGR3XPLsopFFjv4/gWC9r2J8Fq5ADI745LXKhnP31eUW+MunL1Hm2bcmDh2a0GyKTES47p7sOdKLIei9dz5Ea0FmOcpx8+Iwt26yd/wfUVq/h4Q36wVJK4pcBAjoF6g3fYcVyhrgI+msRz4hlwh+FprOF3K0cqCUuIqLimZ5/AYDAK46f7f44j4uSkit+RwBaysxQK2HV3aEG27ZHE/XWVjUckjbunb2OE6OJLdhjew4BkIDjguj/KRHRGUA9Evisoq90pr1uvmPbv41CUeAc58QZdH3wGRkY5RwJ5O1QPODS94Iv9uVZt4teD8RWxTY3YI1XtFCQSb97bA4NfVqKGpnMnmu/UJ+DqaTK0R47p5Gq8zhnrLqcByTGuEc8pyxijxnTYlvibMblGXvMGhgFPv8T34LnrhCBImUrPO+z7oh5LypvMCFL0XiKYZTIE+NBQUUUaDNWAxjGk/htRUxZ8+6rHb/oCehqCP/tzF9wZoPVV4Q7cmbi+sJABvtJsAen6YKdNF5qrj4baHUpAs0VVMsa1Pp5mwKbn3hG7tpFaiJpjscgEIGlIqJY5XjD+tBAwI+aOhc1NBisagtxMAqWlseAgzNEjo+dQ/npbQugjOcQPQxQa5zToxrQBgzvIGKMV6/FBvK6xpZvXZ2qev50y5ExQzMCfOO7LPomvV918YYWdqzsZWKxirGTLyffLV1u0nO/awNji31MXyGkICPGVMd5U8d75i3OuBWyT+5KMOOKjUgRrb6fEAM21+/BdZUoHX2DPfNYQkC/miBZZup57/KeiqXYM4qH2N7nq6NzHIjzWo3FfJY6gAkmQ2Y0U8YjiZni0ytdGSpSmy3U0E9ZZcqG/ybWbq+UDHRwu98b4px2PynkK0F/Oia2Xn1V5fpgO038O32haa5z5e+U/UbzdTgKApB7s4QwZ//I30jIxTe7tu38YDR86uofL1HS2cjvBJzp4aaj30Xlx0mikJ29N1DkS2GCsKDylkgtDojWdD8QfsbQRKUILMtFXxEV387B9WCp4X9I3EM2I42tl+6bAbaPtjTV6sI5Nd08RvLQibq0krtjitHnv7iuiaeZG5MoVAddWPSa0w/X9dPvKpD9KMtHpWicmxKvYcQXahxDv0cU/ws=]]></content>
      <categories>
        <category>weaver</category>
      </categories>
      <tags>
        <tag>weaver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令大全]]></title>
    <url>%2F2018%2F12%2F22%2FGit%2Fgit-command%2F</url>
    <content type="text"><![CDATA[前言:本文记录的是常见的Git命令及其作用 增删改查、找回，重置修改文件123456789101112131415git help # 显示command的helpgit show # 显示某次提交的内容 git show $idgit co – # 抛弃工作区修改git co . # 抛弃工作区修改git add # 将工作文件修改提交到本地暂存区git add . # 将所有修改过的工作文件提交暂存区git rm # 从版本库中删除文件git rm –cached # 从版本库中删除文件，但不删除git文件git reset # 从暂存区恢复到工作文件git reset – . # 从暂存区恢复到工作文件git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改git ci git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做git ci -am “some comments”git ci –amend # 修改最后一次提交记录git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象git revert HEAD # 恢复最后一次提交的状态 查看文件diff123456git diff # 比较当前文件和暂存区文件差异 git diffgit diff # 比较两次提交之间的差异git diff .. # 在两个分支之间比较git diff –staged # 比较暂存区和版本库差异git diff –cached # 比较暂存区和版本库差异git diff –stat # 仅仅比较统计信息 查看提交记录123456git log git log # 查看该文件每次提交记录git log -p # 查看每次详细修改内容的diffgit log -p -2 # 查看最近两次详细修改内容的diffgit log –stat #查看提交统计信息tigMac上可以使用tig代替diff和log，brew install tig 查看、切换、创建和删除分支123456789101112git br -r # 查看远程分支git br &lt;new_branch&gt; # 创建新的分支git br -v # 查看各个分支最后提交信息git br –merged # 查看已经被合并到当前分支的分支git br –no-merged # 查看尚未被合并到当前分支的分支git co # 切换到某个分支git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去git co -b &lt;new_branch&gt; # 基于branch创建新的new_branchgit co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支git br -d # 删除某个分支git br -D # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) 分支合并和rebase123git merge # 将branch分支合并到当前分支git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交git rebase master # 将master rebase到branch，相当于： git co &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge Git补丁管理(方便在多台机器上开发同步时用)123git diff &gt; ../sync.patch # 生成补丁git apply ../sync.patch # 打补丁git apply –check ../sync.patch #测试补丁能否成功 Git暂存管理1234git stash # 暂存git stash list # 列所有stashgit stash apply # 恢复暂存的内容git stash drop # 删除暂存区 Git补丁管理(方便在多台机器上开发同步时用)123git diff &gt; ../sync.patch # 生成补丁git apply ../sync.patch # 打补丁git apply –check ../sync.patch #测试补丁能否成功 Git远程分支管理123456789101112git pull # 抓取远程仓库所有分支更新并合并到本地git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并git fetch origin # 抓取远程仓库更新git merge origin/master # 将远程主分支合并到本地当前分支git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上git push # push所有分支git push origin master # 将本地主分支推到远程主分支git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d )，然后再push删除远程分支 Git远程仓库管理12345GitHubgit remote -v # 查看远程服务器地址和仓库名称git remote show origin # 查看远程服务器仓库状态git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库 创建远程仓库123456789git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址git push -u origin master # 客户端首次提交git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且trackgit remote set-head origin master # 设置远程仓库的HEAD指向master分支,也可以命令设置跟踪远程库和本地库git branch –set-upstream master origin/mastergit branch –set-upstream develop origin/develop git init在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹. git clone获取一个url对应的远程Git repo, 创建一个local copy.一般的格式是git clone [url].clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定. git status查询repo的状态. 1git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言. git logshow commit history of a branch(查看历史提交信息). 123456789101112git log –oneline –number #每条log只显示一行,显示number条.git log –oneline –graph #可以图形化地表示出分支合并历史.git log branchname #可以显示特定分支的log.git log –oneline branch1 ^branch2 #可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).git log –decorate #会显示出tag信息.git log –author=[author name] #可以指定作者的提交历史.git log –since –before –until –after #根据提交时间筛选log.–no-merges #可以将merge的commits排除在外.git log –grep #根据commit信息过滤log: git log –grep=keywords，默认情况下, git log –grep –author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上–all-match的option.git log -S #filter by introduced diff，比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).git log -p #show patch introduced at each commit.每一个提交都是一个快照(snapshot)Git会把每次提交的diff计算出来,作为一个patch显示给你看.另一种方法是git show [SHA].git log –stat #show diffstat of changes introduced at each commit.同样是用来看改动的相对信息的,–stat比-p的输出更简单一些. git add查询repo的状态. 12在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging area中的改动,而不是我们disk上的改动.git add . #会递归地添加当前工作目录中的所有文件. git diff12345678910111213141516171819show diff of unstaged changes #此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:git diff --cached 命令.show diff of staged changes.(Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的).git diff HEADshow diff of all staged or unstated changes.也即比较woking directory和上次提交之间所有的改动.如果想看自从某个版本之后都改动了什么,可以用:git diff [version tag]跟log命令一样,diff也可以加上--stat参数来简化输出.git diff [branchA] [branchB]可以用来比较两个分支.它实际上会返回一个由A到B的patch,不是我们想要的结果.一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:git diff [branchA]…[branchB]给出的.实际上它是:git diff $(git merge-base [branchA] [branchB]) [branchB]的结果. git commit1234提交已经被add进来的改动.git commit -m “the commit message”git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下.git commit –amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消. git reset(1) 概述 1234567891011undo changes and commits.这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.git reset HEAD: unstage files from index and reset pointer to HEAD这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加.git reset –softmove HEAD to specific commit reference, index and staging are untouched.git reset –hardunstage files AND undo any changes in the working directory since last commit.使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.这里的HEAD可以被写成任何一次提交的SHA-1.不带soft和hard参数的git reset,实际上带的是默认参数mixed. (2) 总结 12345git reset --mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.git reset --soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.git reset --hard id.是将git的HEAD变了,文件也变了.按改动范围排序如下:soft (commit) &lt; mixed (commit + add) &lt; hard (commit + add + local working) git revert反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了. 12git revert HEAD: 撤销最近的一个提交.git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交. git rm123git rm file: 从staging区移除文件,同时也移除出工作目录.git rm –cached: 从staging区移除文件,但留在工作目录中.git rm –cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树. git clean123git clean是从工作目录中移除没有track的文件.通常的参数是git clean -df:-d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行. git mv1git rm - - cached orig; mv orig new; git add new git stash12345678910把当前的改动压入一个栈.git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处.git stash list会显示这个栈的list.git stash apply:取出stash中的上一个项目(stash@&#123;0&#125;),并且应用于当前的工作目录.也可以指定别的项目,比如git stash apply stash@&#123;1&#125;.如果你在应用stash中项目的同时想要删除它,可以用git stash pop删除stash中的项目:git stash drop: 删除上一个,也可指定参数删除指定的一个项目.git stash clear: 删除所有项目. git branch12345678910git branch可以用来列出分支,创建分支和删除分支.git branch -v可以看见每一个分支的最后一次提交.git branch: 列出本地所有分支,当前分支会被星号标示出.git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的).git branch -d (branchname): 删除一个分支.删除remote的分支:git push (remote-name) :(branch-name): delete a remote branch.这个是因为完整的命令形式是:git push remote-name local-branch:remote-branch而这里local-branch的部分为空,就意味着删除了remote-branch git checkout1234567git checkout (branchname) #切换到一个分支.git checkout -b (branchname) #创建并切换到新的分支.这个命令是将git branch newbranch和git checkout newbranch合在一起的结果.checkout还有另一个作用:替换本地改动:git checkout –此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响.注意:git checkout filename会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的. git merge把一个分支merge进当前的分支. 123git merge [alias]/[branch] #把远程分支merge到当前分支.如果出现冲突,需要手动修改,可以用git mergetool.解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved. git tag12345tag a point in history as import.会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加tag.比如: git tag v1.0git tag -a v1.0, -a参数会允许你添加一些信息,即make an annotated tag.当你运行git tag -a命令的时候,Git会打开一个编辑器让你输入tag信息. git remote1234567git remote #列出remote aliases.如果你clone一个project,Git会自动将原来的url添加进来,别名就叫做:origin.git remote -v #可以看见每一个别名对应的实际url.git remote add [alias] [url] #添加一个新的remote repo.git remote rm [alias] #删除一个存在的remote alias.git remote rename [old-alias] [new-alias] #重命名.git remote set-url [alias] [url] #更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址. git fetch123download new branches and data from a remote repository.可以git fetch [alias]取某一个远程repo,也可以git fetch –all取到全部repofetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,log等,也可以merge到其他分支),但是Git不允许你checkout到它们. git pull1234fetch from a remote repo and try to merge into the current branch.pull == fetch + merge FETCH_HEADgit pull会首先执行git fetch,然后执行git merge,把取来的分支的head merge到当前分支.这个merge操作会产生一个新的commit.如果使用–rebase参数,它会执行git rebase来取代原来的git merge. git rebase1234–rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:git rebase –continue就会继续打余下的补丁.git rebase –abort将会终止rebase,当前分支将会回到rebase之前的状态. git push123git push [alias] [branch]将会把当前分支merge到alias上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支.如果有多个人向同一个remote repo push代码, Git会首先在你试图push的分支上运行git log,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的push,让你先fetch,merge,之后再push,这样就保证了所有人的改动都会被考虑进来. git reflog1234git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.当git reflog不指定引用的时候,默认列出HEAD的reflog.HEAD@&#123;0&#125;代表HEAD当前的值,HEAD@&#123;3&#125;代表HEAD在3次变化之前的值.git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中. 特殊符号12^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^1.~相当于连续的个^.]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批量修改文件名称与格式]]></title>
    <url>%2F2018%2F12%2F06%2Fpython%2Frename-file%2F</url>
    <content type="text"><![CDATA[前言:主要介绍一下如何利用Python脚本实现给指定的文件数据集按照一定的格式批量重命名，文件不单指图片，其他格式的也可以，此处以图片转换为例，希望能够帮到您(^_−)☆ Python脚本(1) 写的是python脚本，需要安装python环境，安装教程可自行百度(2) 桌面新建test1.txt文档后将其改为test1.py,打开文档，将以下内容粘贴进去 12345678910111213141516171819202122232425262728293031# -*- coding:utf8 -*- import osclass BatchRename(): ''' 批量重命名文件夹中的图片文件 ''' def __init__(self): self.path = 'E:\Pictures\' #存放图片的文件夹路径 def rename(self): filelist = os.listdir(self.path) total_num = len(filelist) i = 1 for item in filelist: if item.endswith('.jpg'): #指定选取的图片格式为jpg src = os.path.join(os.path.abspath(self.path), item) # 2018-11-20_bqb00 2018-11-20_hzw00 dst = os.path.join(os.path.abspath(self.path), '2018-11-20_00' + str(i) + '.png') #设置新的图片名称 try: os.rename(src, dst) print ("转换图片 %s 成为 %s ..." % (src, dst)) i = i + 1 except: continue print ("共 %d 张图片重命名和转换成 %d jpgs" % (total_num, i-1))if __name__ == '__main__': demo = BatchRename() demo.rename() (3) 只要按自己的需求修改脚本中的中文注释部分即可，上述脚本的功能是：将E:\Pictures\目录下的jpg格式的图片批量重命名为2018-11-20_00形式的png图片(4) 在桌面按住shift+鼠标右键，打开打开PowerShell窗口，执行python test1.py命令,出现如下结果： 懒人专用 上面的脚本还有手动输入命令执行，我不想输命令怎么办呢？(1) 在test1.py同级目录(此处为桌面)新建一个test2.txt文档，打开文档，将以下内容粘贴进去： 12# 执行批量修改图片脚本python test1.py (2) 保存之后将test2.txt改为test2.bat，然后双击就能自动执行上述python脚本文件 注：test2.bat一定要和test2.py在同一目录 参考链接：https://blog.csdn.net/u014797226/article/details/80028459]]></content>
      <categories>
        <category>Python</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM性能分析常用的命令]]></title>
    <url>%2F2018%2F12%2F04%2Fjava%2FJVM%2Fjvm01%2F</url>
    <content type="text"><![CDATA[前言:JVM性能分析常用的命令，包括jstack(查看jvm线程运行状态)、jps(显示本地的java进程及对应进程号)、jstat(监视VM内存工具)、jinfo(输出并修改运行时的java进程的opts)、jmap(查看堆内存使用状况)、jconsole(java GUI监视工具)、jvisualvm(JVM运行监控工具)注意：在使用这些工具前，先用JPS命令获取当前的每个JVM进程号[pid]，然后选择要查看的JVM jstack功能查看jvm线程运行状态，是否有死锁现象等等信息. 常用命令123jstack pid :thread dump //查看对应进程的jstack的相关语法jstack –l pid //查看对应的线程信息jstack –l pid &gt;E:\luxiong.txt //上述结果打印到指定文档 jps功能与unix上的ps类似，用来显示本地的java进程，可以查看本地运行着几个java程序，并显示他们的进程号. 常用命令1用法命令行(cmd)里打 jps就行了 jstat功能jstat工具特别强大，有众多的可选项，详细查看堆内各个部分的使用量，以及加载类的数量。使用时，需加上查看进程的进程id，和所选参数. 常用命令1234567891011121314151617//单个参数jstat -class pid //显示加载class的数量，及所占空间等信息.jstat -compiler pid //显示VM实时编译的数量等信息.jstat -gc pid //可以显示gc的信息，查看gc的次数，及时间。其中最后五项，分别是young gc的次数，young gc的时间，full gc的次数，full gc的时间，gc的总时间.jstat -gccapacity pid //可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小，如：PGCMN显示的是最小perm的内存使用量，PGCMX显示的是perm的内存最大使用量，PGC是当前新生成的perm内存占用量，PC是但前perm内存占用量。其他的可以根据这个类推， OC是old内纯的占用量.jstat -gcnew pid //new对象的信息.jstat -gcnewcapacity pid //new对象的信息及其占用量.jstat -gcold pid //old对象的信息.jstat -gcoldcapacity pid //old对象的信息及其占用量.jstat -gcpermcapacity pid //perm对象的信息及其占用量.jstat -util pid //统计gc信息统计.jstat -printcompilation pid //当前VM执行的信息.//多个参数jstat -class pid 250 6 //每250毫秒打印一次，一共打印6次.jstat -class -h2 pid 250 6 //上述基础上增加每2行显示一下标题.jstack -gcutil pid 1000 100 //每1000ms统计一次gc情况统计100次jstat -gcutil pid 2000 &gt;E:luxiong.txt //将上述结果生成指定文件. jinfo功能可以输出并修改运行时的java进程的运行参数(opts). 常用命令12jinfo -opt pid //用法示例(opt表示对应参数,如下示例)jinfo -flag MaxPermSize pid //查看进程pid的MaxPerm大小 jmap功能jmap是一个可以输出所有内存中对象的工具，甚至可以将VM 中的heap，以二进制输出成文本. 常用命令1234jmap -dump:format=b,file=E:\luxiong.bin pid //file-保存路径及文件名 pid-进程编号 jmap -dump:file=E:\luxiong.dump pid //file-保存路径及文件名 pid-进程编号 jmap -histo:live pid //堆中活动的对象以及大小jmap -heap pid //查看堆的使用状况信息 jconsole功能用java写的GUI程序，用来监控VM，并可监控远程的VM，非常易用，而且功能非常强. 常用命令1用法命令行(cmd)里打 jconsole，选则相应的进程就行了 jvisualvm功能用来监控JVM的运行情况，可以用它来查看和浏览Heap、Dump、ThreadDump、内存对象实例情况、GC执行情况、CPU消耗以及类的装载情况。该工具位于JDK根目录的bin文件夹下面，无需安装，正常装完jdk吼直接在bin目录下运行jvisual.exe即可. 常用命令1用法命令行(cmd)里打 jvisualvm，选则相应的进程就可以(功能远比jconsole强大) 解析（1）概述：显示当前服务器(resin)的整体运行状况 （2）监视：可实时动态显示cpu、堆栈、类、线程的相关信息(类似于jconsole的升级版) （3）线程：可实时动态的现实进程的使用状况点击[==线程Dump==]按钮 可以显示具体的进程的内容，可从此页面查看到进程的具体信息以及报错信息(类似于jstack命令的查看结果) （4）：显示当前服务器(resin)的整体运行状况 参考文档1.https://blog.csdn.net/u012550080/article/details/816051892.http://www.51testing.com/html/38/n-3724238.html3.https://blog.51cto.com/zero01/2141942]]></content>
      <categories>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java线程的七种状态]]></title>
    <url>%2F2018%2F11%2F04%2Fjava%2Fjava-thread%2F</url>
    <content type="text"><![CDATA[前言:本文简单介绍一下Java线程的七种状态 Java线程有7种状态，分别是:1. 新建状态(new)（1）使用new操作符新创建的一个线程对象，例如new Thread();（2）处于新建状态的线程，内部的任务代码还没开始运行. 2. 可执行/就绪状态(Runnable)（1）新创建的线程并不自动开始运行，要执行线程，必须调用线程的start()方法。当调用了线程对象的start()方法即启动了线程，此时线程就处于就绪状态;（2）处于就绪状态的线程并不一定立即运行run()方法，线程还必须==同其他就绪线程竞争CPU==，只有==获得CPU使用权才可以运行线程==;（3）线程阻塞状态(Blocked)结束后也可以变成就绪状态，或从运行状态(Running)变化到就绪状态. 3. 运行状态(Running)（1）线程获取到CPU使用权进行执行;（2）需要注意的是，==线程只能从就绪状态进入到运行状态==,真正开始执行run()方法的内容. 4. 阻塞状态(Blocked)（1）线程在获取锁失败时(因为锁被其它线程抢占)，它会被加入锁的同步阻塞队列，然后线程进入阻塞状态(Blocked);（2）待其它线程释放锁之后，阻塞状态(Blocked)的线程将在次参与锁的竞争，如果==竞争锁成功==，==线程将进入就绪状态==(Runnable),之后才有机会转到运行状态(Running). 5. 等待状态(Waiting)（1）线程执行wait()方法，JVM会把该线程放入等待队列(waitting queue)中,进入等待状态;（2）处于等待状态的线程将不会被CPU执行，除非线程的运行条件得到满足后，其==可被其他线程唤醒==，进入阻塞状态(Blocked);（3）调用不带超时的Thread.join()方法也会进入等待状态. 6. 睡眠(Sleep)（1）睡眠是等待状态的一种特例，在调用Thread.sleep()方法，带有超时设定的Object.wait()方法，带有超时设定的Thread.join()方法等，线程会进入睡眠状态(Sleep);（2）睡眠状态进程达到设置时间的等待时间后，睡眠线程将==自动唤醒进入阻塞状态==(Blocked)或就绪状态(Runnable). 7. 死亡(Dead)（1）线程执行完了或者因异常退出了run()方法，该线程结束生命周期,死亡的线程==不可再次复生==. 参考文档1.https://baijiahao.baidu.com/s?id=1626410873162104506&amp;wfr=spider&amp;for=pc]]></content>
      <categories>
        <category>Java</category>
        <category>Thread</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2018%2F09%2F23%2Fmarkdown%2Fmarkdown01%2F</url>
    <content type="text"><![CDATA[简单介绍一下Markdown的基本语法(未完善，待补充…) 标题在想要设置为标题的文字前面加#来表示注：标准语法一般在#后跟个空格再写文字（1）示例： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 （2）效果：由于标题演示效果会影响目录结构，故不展示效果 字体（1）简介 加粗要加粗的文字左右分别用两个*号包起来 斜体要加粗的文字左右分别用一个*号包起来 斜体加粗要倾斜和加粗的文字左右分别用三个*号包起来 删除线要加删除线的文字左右分别用两个~~号包起来 （2）示例： 1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ （3）效果：这是加粗的文字这是倾斜的文字这是斜体加粗的文字这是加删除线的文字 引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;等等 （1）示例： 123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 （2）效果： 这是引用的内容 这是引用的内容 这是引用的内容 分割线三个或者三个以上的 - 或者 * 都可以 （1）示例： 1234-------******** （2）效果： 图片（1）简介基本语法：![图片alt](图片URL&quot;图片title&quot;&quot;)图片alt:显示在图片下面的文字，相当于对图片内容的解释;图片URL:图片的链接URL图片title:当鼠标移到图片上时显示的内,title可加可不加(==URL和title之间有个空格==) （2）示例： 1![这是一张示例图片](https://ibb.co/album/kshZBF ''海贼王'') （3）效果： 图片必须配合链接使用，所以必须有一个好的图床工具： 七牛云：https://www.qiniu.com/ ImgBB：https://imgbb.com/ 聚合图床：https://www.superbed.cn/百度直接搜索关键字“免费图床”，可以搜到一堆 超链接初级链接（1）基本语法：[超链接名](超链接URL &quot;超链接title&quot;)title可加可不加,语法参照图片 （2）示例： 12[简书](http://jianshu.com)[百度](http://baidu.com) （3）效果：简书百度 高级链接（1）示例 1234567链接也可以用变量来代替，文档末尾附带变量地址：这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [runoob]: http://www.runoob.com/ （2）效果百度简书 注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替。例如： 12示例&lt;a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank"&gt;简书&lt;/a&gt; 列表列表分为无序列表和有序列表 无序列表无序列表用 - + * 任何一种都可以 （1）示例： 12345- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 （2）效果： 列表内容 列表内容 列表内容 有序列表数字加点 （1）示例： 123451. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格 （2）效果： 列表内容 列表内容 列表内容 注意：序号跟内容之间要有空格 列表嵌套 一级无序列表 二级无序列表 二级无序列表 一级无序列表 二级有序列表 二级有序列表 表格（1）语法： 1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 （2）示例： 12345姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 （3）效果：姓名|技能|排行–|:–:|–:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 代码单行代码代码之间分别用一个反引号包起来（1）示例： 1`create database hero;` （2）效果：create database hero; 多行代码代码之间分别用三个反引号包起来，且两边的反引号单独占一行示例及效果： 1234function fun()&#123; echo "这是一句非常牛逼的代码";&#125;fun(); 流程图公式流程图时序图甘特图 待办事项- [x]：表示已完成- [ ]：表示未完成（1）示例： 123456- [x] 已完成项目1 - [x] 已完成事项1 - [x] 已完成事项2- [ ] 待完成项目1 - [ ] 待完成事项1 - [ ] 待完成事项2 （2）效果： 已完成项目1 已完成事项1 已完成事项2 待完成项目1 待完成事项1 待完成事项2 高级技巧支持的 HTML 元素（1）简介目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等（2）示例 123456&lt;b&gt;test&lt;/b&gt; &lt;i&gt;test&lt;/i&gt; &lt;em&gt;test&lt;/em&gt; &lt;sup&gt;test&lt;/sup&gt; &lt;sub&gt;test&lt;/sub&gt; &lt;br&gt;test&lt;/br&gt; （3）效果testtesttesttesttesttest 转义（1）简介Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符（2）示例 12**文本加粗** \*\* 正常显示星号 \*\* （3）效果文本加粗** 正常显示星号 ** 参考文档：1.有道云笔记Markdown指南2.菜鸟教程]]></content>
      <categories>
        <category>实用技术</category>
        <category>Markdown教程</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客插件、展望]]></title>
    <url>%2F2018%2F09%2F04%2Fhexo%2Fhexo-blog04%2F</url>
    <content type="text"><![CDATA[前言:介绍博客的一些用法、功能以及相关插件… 相关插件Hexo相关初始化配置1npm install -g hexo-cli 安装自动部署发布工具1npm install hexo-deployer-git --save 分页插件1234npm install --save hexo-generator-indexnpm install --save hexo-generator-archivenpm install --save hexo-generator-tagnpm install --save hexo-generator-category 文章字数与阅读时长 wordcount 插件1npm install hexo-wordcount --save RSS订阅功能1npm install hexo-generator-feed --save 站内搜索1npm install --save hexo-generator-searchdb Gitment评论1npm i --save gitment 文章加密1npm install --save hexo-blog-encrypt 图片上传相册 git连接远程Blog_Album 此小块所有命令均在Blog_Album目录下打开终端执行(1) 执行git remote add origin https://github.com/luxiong-github/Blog_Album.git为本地仓库添加一个远程仓库如果此处出现fatal: remote origin already exists.错误，说明远程起源已经存在，则先执行git remote rm origin再执行上述命令(2) 拉取远程仓库代码：git pull --rebase origin master(远程仓库被更新本地没更新才需要执行)git pull --rebase origin master 上传照片(1) 将照片放到Blog_Album\photos目录中，命名格式：yyyy-MM-dd_des.jpg/jpeg/gif/png.(脚本解析jpg有问题，最好使用png)(2) 终端切换到Blog_Album目录下(或者直接在Blog_Album目录下shift+鼠标右键打开PowerShell窗口),执行python tool.py命令 如果出现error: failed to push some refs to错误，说明本地没有update到最新版本的项目（git上有README.md文件没下载下来）,执行此处命令(3) 如果上述命令执行无误，则可进入自己GitHub的Blog_Album仓库中进行查看(4) hexo g &amp;&amp; hexo s进入博客查看 参考：https://malizhi.cn/HexoAlbum/ 源码提交gitee(1) my-blog目录下打开终端，输入命令初始化创建一个空的本地仓库： 1git init (2) 将本地库与远程仓库(gitee)进行链接： 1git remote add origin https://gitee.com/luxiong-gitee/blog-code.git (3) 将项目的所有文件添加到缓存中： 1git add . (4) 将缓存中的文件Commit到git库： 1git commit -m "项目源码上传" (5) 上传代码之前最好先pull一下(拉取远程仓库最新代码)： 1git pull origin master (6) 代码提交到远程库： 1git push origin master 待优化项目 Fork me on GitHub 123&lt;a href="https://github.com/luxiong-github"&gt; &lt;img width="149" height="149" src="https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149" class="attachment-full size-full" alt="Fork me on GitHub" data-recalc-dims="1"&gt;&lt;/a&gt; 流程图 相册 https://malizhi.cn/HexoAlbum/ https://www.jianshu.com/p/7f6425b3ffb2 URL优化 站点提交百度、Google https://malizhi.cn/nextTutorial/#more]]></content>
      <categories>
        <category>Hexo个人博客搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建-加强]]></title>
    <url>%2F2018%2F09%2F02%2Fhexo%2Fhexo-blog03%2F</url>
    <content type="text"><![CDATA[前言:给博客增加一些更高级的功能，例如分页、站内搜索、评论… Hexo文章加密简介(1) 尝试着想一下，你写了一篇博客，但是，出于某种原因，不太希望每一个人都可以看到他。所以你常常会为这种文章设置一个密码，其他人需要输入密码才可以访问这篇博客。所以Hexo-Blog-Encrypt 因为这个需求而诞生了(2) 一旦你输入了正确的密码，你可以在接下来的 30 分钟内，无需密码访问该网页 安装(1) 命令： 123npm install --save hexo-blog-encrypt # npm安装yarn add hexo-blog-encrypt # yarn安装 (2) 在站点配置文件_config.yml中添加插件配置： 123456# Securityencrypt: # hexo-blog-encrypt enable: true tags: # 配置标签加密 - &#123;name: test, password: test&#125; - &#123;name: diary, password: diary&#125; (3) 文章头部添加对应字段，如password, abstract, message： 1234567---title: Hello Worlddate: 2016-03-30 21:18:02password: mikemessi # 该博客加密使用的密码abstract: Something was encrypted, please enter password to read. #该博客的摘要，会显示在博客的列表页message: Welcome to my blog, please enter password to read. #博客查看时，密码输入框上面的描述性文字--- (4) hexo clean &amp;&amp; hexo g &amp;&amp; hexo s，来查看效果 注意事项(1) 文章设置的password优先级最高，其次是设置标签加密，文章多标签加密密码优先级跟文章标签先后顺序有关(2) 密码的有效时间是30分钟(3) 插件还可以对TOC进行加密以及修改加密模板，详情见参考链接(4) 加密后的文章可能会有不显示文章目录的bug，解决方案：将next/layout/_macro/sidebar.swig替换为这个博客中的文件 参考链接：https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md Valine评论安装使用Next主题，本身就已经集成了valine，因此正常情况下只需要配置一下就行了，不用安装，需要安装的可以使用以下命令： 1234# Install leancloud's js-sdknpm install leancloud-storage --save# Install valinenpm install valine --save Leancloud配置(1) 之前的文章次数统计已经配置过了，这里只需要进入Leancloud获取对应的APP ID和APP KEY就行了(2) 修改主题配置文件hexo\themes\next\_config.yml，修改以下参数： 12345678910valine: enable: true //打开valine评论功能 appid: 你的leancloud appid appkey: 你的leancloud appkey notify: false //邮件提醒 verify: true //评论时是否有验证码，需要在Leancloud 设置-&gt;安全中心 中打开 placeholder: 说点什么吧！ //评论框默认显示 avatar: monsterid //评论者的头像 guest_info: nick # custom comment header pageSize: 10 # pagination size (3) 评论者头像avatar取值与显示效果如下： 相册 注：Next主题默认是不含有相册页面的,如果想添加此页面需自行编写 相册和视频导航栏LTAIC4oDgY9ZCa0n0nEgVvA7KLV7QUfV1vMgjF4U4JvxM2 其他配置博客相册页面图片的处理 小功能集合文章链接唯一化hexo默认提供的文章链接方案是使用年/月/日/标题，也许你会数次更改文章题目或者变更文章发布时间，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择(1) 安装插件 1npm install hexo-abbrlink --save (2) 在站点配置文件中查找代码permalink，将其更改为: 1permalink: posts/:abbrlink/ # “posts/” 可自行更换 参考(1) https://malizhi.cn/HexoAlbum/(2) https://www.jianshu.com/p/7f6425b3ffb2]]></content>
      <categories>
        <category>Hexo个人博客搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建-完善]]></title>
    <url>%2F2018%2F08%2F31%2Fhexo%2Fhexo_blog02%2F</url>
    <content type="text"><![CDATA[前言:给博客增加一些更高级的功能，例如分页、站内搜索、评论… 细节完善分页(1) 插件安装(按需安装) 123npm install --save hexo-generator-index # 首页分页配置# npm install --save hexo-generator-archive # 归档分页配置# npm install --save hexo-generator-tag # 标签分页配置 (2) 站点配置文件： 1234567891011index_generator: path: '' per_page: 5 order_by: -date#archive_generator:# per_page: 20# yearly: true# monthly: true#tag_generator:# per_page: 10 (3) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，查看效果 文章相关 详情请参考：https://tianbozhang.coding.me/personal-blog-custom.html 分页(1) 插件安装(按需安装) 123npm install --save hexo-generator-index # 首页分页配置# npm install --save hexo-generator-archive # 归档分页配置# npm install --save hexo-generator-tag # 标签分页配置 (2) 站点配置文件： 1234567891011index_generator: path: '' per_page: 5 order_by: -date#archive_generator:# per_page: 20# yearly: true# monthly: true#tag_generator:# per_page: 10 (3) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，查看效果 博文置顶(1) 修改hexo-generator-index插件将node_modules/hexo-generator-index/lib/generator.js文件替换为：generator.js(2)在文章Front-matter中添加top值，数值越大文章越靠前，如： 12345678---title: Naruto 图集categories: [图片]tags: [picture,naruto]date: 2016-09-02 14:36:04keywords: picture,narutotop: 10--- 头像圆形旋转介绍一下实现头像圆形，鼠标经过旋转或者一直让旋转效果，主要是修改hexo目录下\themes\next\source\css\_common\components\sidebar\sidebar-author.styl文件(1) 头像圆形修改修改sidebar-author.styl文件中.site-author-imageCSS 样式如下： 12345678910111213.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /*头像圆形*/ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px;&#125; (2) 鼠标经过旋转修改修改sidebar-author.styl文件，添加 CSS 样式img:hover如下代码： 123456img:hover &#123; /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125; 修改sidebar-author.styl文件中.site-author-imageCSS 样式如下： 12345678910111213141516171819.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.5s ease-out; -moz-transition: -moz-transform 1.5s ease-out; transition: transform 1.5s ease-out;&#125; (3) 鼠标经过旋转修改修改sidebar-author.styl文件，添加如下代码： 12345678910111213141516171819202122232425/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(360deg); &#125;&#125; 修改sidebar-author.styl文件中.site-author-imageCSS 样式如下： 12345678910111213141516171819202122232425.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画：animation:动画名称 动画播放时长单位秒或微秒 动画播放的速度曲线linear为匀速 动画播放次数infinite为循环播放; */ -webkit-animation: play 3s linear infinite; -moz-animation: play 3s linear infinite; animation: play 3s linear infinite; /* 鼠标经过头像旋转360度 -webkit-transition: -webkit-transform 1.5s ease-out; -moz-transition: -moz-transform 1.5s ease-out; transition: transform 1.5s ease-out;*/&#125; 鼠标经过停止头像旋转：修改sidebar-author.styl文件，添加 CSS 样式img:hover如下代码： 12345678910img:hover &#123; /* 鼠标经过停止头像旋转 */ -webkit-animation-play-state:paused; animation-play-state:paused; /* 鼠标经过头像旋转360度 -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);*/&#125; 页面点击小红心(1) 在/themes/next/source/js/src下新建文件clicklove.js，接着把该链接下的代码拷贝粘贴到clicklove.js文件中。代码如下： 12// 页面点击爱心效果!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); (2) 在\themes\next\layout\_layout.swig文件末尾添加： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt; (3) 清缓存hexo clean，重新生成hexo g，启动服务hexo s检验效果 动态title崩溃欺骗(1) \themes\next\source\js\src，新建custom-title.js 12345678910111213141516&lt;!--崩溃欺骗--&gt;var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="icon"]').attr('href', "/img/TEP.ico"); document.title = ' 页面崩溃啦 ~ ！'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "/favicon.ico"); document.title = ' 噫又好了~ ' + OriginTitile; titleTime = setTimeout(function () &#123; document.title = OriginTitile;&#125;, 2000); &#125;&#125;); (2) 更改\themes\next\layout_layout.swig,在文件末尾添加： 12&lt;!--动态title崩溃欺骗,卖萌专用--&gt;&lt;script type="text/javascript" src="/js/src/custom-title.js"&gt;&lt;/script&gt; (3) 清缓存hexo clean，重新生成hexo g，启动服务hexo s检验效果 High一下(1) header位置更改themes\next\layout_custom\header.swig,在文件末尾添加：sidebar位置更改themes\next\layout_custom\sidebar.swig(2) 添加以下内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150&lt;li&gt; &lt;a title="把这个链接拖到你的Chrome收藏夹工具栏中" href='javascript:(function() &#123; function c() &#123; var e = document.createElement("link"); e.setAttribute("type", "text/css"); e.setAttribute("rel", "stylesheet"); e.setAttribute("href", f); e.setAttribute("class", l); document.body.appendChild(e) &#125; function h() &#123; var e = document.getElementsByClassName(l); for (var t = 0; t &lt; e.length; t++) &#123; document.body.removeChild(e[t]) &#125; &#125; function p() &#123; var e = document.createElement("div"); e.setAttribute("class", a); document.body.appendChild(e); setTimeout(function() &#123; document.body.removeChild(e) &#125;, 100) &#125; function d(e) &#123; return &#123; height : e.offsetHeight, width : e.offsetWidth &#125; &#125; function v(i) &#123; var s = d(i); return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r &#125; function m(e) &#123; var t = e; var n = 0; while (!!t) &#123; n += t.offsetTop; t = t.offsetParent &#125; return n &#125; function g() &#123; var e = document.documentElement; if (!!window.innerWidth) &#123; return window.innerHeight &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123; return e.clientHeight &#125; return 0 &#125; function y() &#123; if (window.pageYOffset) &#123; return window.pageYOffset &#125; return Math.max(document.documentElement.scrollTop, document.body.scrollTop) &#125; function E(e) &#123; var t = m(e); return t &gt;= w &amp;&amp; t &lt;= b + w &#125; function S() &#123; var e = document.createElement("audio"); e.setAttribute("class", l); e.src = i; e.loop = false; e.addEventListener("canplay", function() &#123; setTimeout(function() &#123; x(k) &#125;, 500); setTimeout(function() &#123; N(); p(); for (var e = 0; e &lt; O.length; e++) &#123; T(O[e]) &#125; &#125;, 15500) &#125;, true); e.addEventListener("ended", function() &#123; N(); h() &#125;, true); e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;"; document.body.appendChild(e); e.play() &#125; function x(e) &#123; e.className += " " + s + " " + o &#125; function T(e) &#123; e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)] &#125; function N() &#123; var e = document.getElementsByClassName(s); var t = new RegExp("\\b" + s + "\\b"); for (var n = 0; n &lt; e.length; ) &#123; e[n].className = e[n].className.replace(t, "") &#125; &#125; var e = 30; var t = 30; var n = 350; var r = 350; var i = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3"; var s = "mw-harlem_shake_me"; var o = "im_first"; var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"]; var a = "mw-strobe_light"; var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css"; var l = "mw_added_css"; var b = g(); var w = y(); var C = document.getElementsByTagName("*"); var k = null; for (var L = 0; L &lt; C.length; L++) &#123; var A = C[L]; if (v(A)) &#123; if (E(A)) &#123; k = A; break &#125; &#125; &#125; if (A === null) &#123; console.warn("Could not find a node of the right size. Please try a different page."); return &#125; c(); S(); var O = []; for (var L = 0; L &lt; C.length; L++) &#123; var A = C[L]; if (v(A)) &#123; O.push(A) &#125; &#125;&#125;)() '&gt;High一下&lt;/a&gt; &lt;/li&gt; (3) 代码块的内容不需要再做任何修改,清缓存hexo clean，重新生成hexo g，启动服务hexo s查看效果 底部增加运行时间(1) 修改themes/next/layout/_partials/footer.swig，增加如下代码： 123456789101112131415161718&lt;!-- 在网页底部添加网站运行时间 --&gt;&lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt;&lt;script&gt; var now = new Date(); function createtime() &#123; var grt= new Date("07/21/2018 00:00:00");//此处修改你的建站时间或者网站上线时间 now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125; seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; document.getElementById("timeDate").innerHTML = "Run for "+dnum+" Days "; document.getElementById("times").innerHTML = hnum + " Hours " + mnum + " m " + snum + " s"; &#125;setInterval("createtime()",250);&lt;/script&gt; (2) 运行效果： 当前所在菜单下划线显示(1) 打开themes\next\layout\ _partials目录下的header.swig文件(2) 在底部添加以下代码： 123456789101112131415&lt;script&gt; window.onload = function()&#123; var path = 'https://malizhi.cn'; //这里要改成你博客的地址 var localhostItem = String(window.location).split(path)[1]; var LiNode = document.querySelectorAll('#menu &gt; li &gt; a') for(var i = 0; i&lt; LiNode.length;i++)&#123; var item = String(LiNode[i].href).split(path)[1]; if(item == localhostItem &amp;&amp; item != undefined)&#123; LiNode[i].setAttribute('style','border-bottom:1px solid black'); &#125; &#125; &#125;;&lt;/script&gt; (3) hexo clean &amp;&amp; hexo g &amp;&amp; hexo s后完成效果： 底部跳动图标实现(1) 在next\layout_partials下的footer.swig文件中，在你所需要调动的图标所对应的span中增加对应的ID(2) 在主题的css文件next\source\css\_variables\custom.styl ，增加以下代码即可： 123456789101112131415//底部爱心小图标跳动keyframes heartAnimate &#123; 0%,100%&#123;transform:scale(1);&#125; 10%,30%&#123;transform:scale(0.9);&#125; 20%,40%,60%,80%&#123;transform:scale(1.1);&#125; 50%,70%&#123;transform:scale(1.1);&#125;&#125;//图标所对应的span中的ID#heart &#123; animation: heartAnimate 1.33s ease-in-out infinite;&#125;.with-love &#123; color: rgb(255, 113, 113);&#125; (3) hexo clean &amp;&amp; hexo g &amp;&amp; hexo s后完成效果： 第三方服务集成站内搜索NexT 支持集成 Swiftype、 微搜索、Local Search 和 Algolia。在这里我使用的是Local Search，下面将介绍如何使用:(1) 添加百度/谷歌/本地 自定义站点内容搜索，安装hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-searchdb --save (2) 编辑站点配置文件_config.yml，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 (3) 编辑主题配置文件_config.yml，启用本地搜索功能： 123# Local searchlocal_search: enable: true 注：其他搜索方式请查看站内搜索 (4) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，效果如下： 数据统计分析NexT 支持集成 不蒜子统计、百度统计等多种数据统计方式。此处使用不蒜子统计，下面将介绍如何使用: 此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后 (1) 全局配置：编辑主题配置文件_config.yml中的busuanzi_count的配置项。当enable: true时，代表开启全局开关。若 site_uv 、site_pv 、 page_pv 的值均为 false 时，不蒜子仅作记录而不会在页面上显示(2) 站点UV配置：当site_uv: true时，代表在页面底部显示站点的UV值。site_uv_header和site_uv_footer为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的font-awesome。如下： 1234# 效果：本站访客数12345人次site_uv: truesite_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; 本站访客数site_uv_footer: 人次 (3) 站点PV配置：当site_pv: true时，代表在页面底部显示站点的PV值。site_pv_header和site_pv_footer为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的font-awesome。如下： 1234# 效果：本站总访问量12345次site_pv: truesite_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; 本站总访问量site_pv_footer: 次 注：其他统计方式请查看数据统计分析 (4) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，效果如下： (5) 不蒜子统计不生效，浏览器控制台报错原因：由于 busuanzi(不蒜子) 的域名更新，导致了使用 Hexo Next 主题时统计数据失效解决方法： 到 hexo 的 themes 文件夹下, 打开\themes\next\layout_third-party\analytics\busuanzi-counter.swig文件 将src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;修改为src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot; 内容分享服务NexT 支持集成 jiathis、baidushare 和 AddThis内容分享服务。在这里我使用的是baidushare，下面将介绍如何使用:(1) 编辑站点配置文件_config.yml，新增以下内容到任意位置： 1baidushare: true #百度分享功能 (2) 编辑主题配置文件_config.yml，设置其展现方式： 12baidushare: type: button #百度分享展示的方式button|slide 注：其他内容分享方式请查看内容分享服务 (4) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，效果如下： 文章阅读次数统计(1) 在LeanCloud进行对应的配置详细配置参考文章：配置LeanCloud(2) 注Class名称必须为Counter Gitment评论(1) Gitment评论搭建参考：https://sjq597.github.io/2018/05/18/Hexo-使用Gitment评论功能/(2) 踩过的坑： Error: Validation Failed原因：issue的Label有长度限制,对于中文博客来说,中文标题很容易就超过长度限制方案：修改themes/next/layout/_third-party/comments/gitment.swig中的id部分如下: 1234var gitment = new &#123;&#123;CommentsClass&#125;&#125;(&#123; id: '&#123;&#123; page.date &#125;&#125;', owner: '&#123;&#123; theme.gitment.github_user &#125;&#125;', repo: '&#123;&#123; theme.gitment.github_repo &#125;&#125;', object ProgressEvent原因：作者的default.css和gitment.browser.js域名用的别人的，现在过期了方案：修改themes/next/layout/_third-party/comments/gitment.swig中对应部分如下: 1234&lt;!-- &lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt; --&gt;&lt;!-- &lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js"&gt;&lt;/script&gt; --&gt;&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/default.css"&gt;&lt;script src="https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/gitment.browser.js"&gt;&lt;/script&gt; 注释部分是原来的地址，过期了的，下面的是引用的其他有效地址(3) 汉化：修改themes/next/layout/_third-party/comments/gitment.swig中对应部分如下: 12&lt;link rel="stylesheet" href="https://billts.site/extra_css/gitment.css"&gt;&lt;script src="https://billts.site/js/gitment.js"&gt;&lt;/script&gt; (4) 清缓存hexo clean，重新生成hexo g，部署hexo d，然后访问username.github.io查看效果(5) 每篇文章都需要登录GitHub账号然后点击初始化 来必力评论(1) 登陆来必力获取你的livere_uid 没有账号需要注册一个注册完点击安装，然后填上博客的相应信息，如图data-uid就是所需要的livere_uid(2) 编辑主题配置文件， 编辑livere_uid字段，设置如下: 1livere_uid: #your livere_uid 参考(1) https://cloud.tencent.com/developer/article/1482021(2) https://tianbozhang.coding.me/personal-blog-custom.html(3) https://ehlxr.me/categories/Hexo/(4) https://malizhi.cn/nextTutorial/#more]]></content>
      <categories>
        <category>Hexo个人博客搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建-入坑]]></title>
    <url>%2F2018%2F08%2F30%2Fhexo%2Fhexo_blog01%2F</url>
    <content type="text"><![CDATA[前言:使用Node.js+Hexo+Next+Git+GitHub，让你几分钟就能创建一个博客 基本配置(1) Node.js(2) Git(3) GitHub账号及仓库 注：上述条件安装完成后执行后续操作 配置GitHub仓库创建仓库(1) 新建一个名为username.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库(2) 每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库 1.注册的邮箱一定要验证，否则不会成功2.仓库名字必须是：username.github.io，其中username是你的用户名 配置SSH key(1) 提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题(2) 检查本机已存在的ssh密钥：cd ~/. ssh，如果提示No such file or directory说明你是第一次使用Git(3) 生成密钥：ssh-keygen -t rsa -C &quot;邮件地址&quot;，然后三次回车(4) 打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容(5) 打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，将刚复制的内容粘贴到key那里，title随便填，保存: 测试是否成功(1) 输入命令：ssh -T git@github.com(2) 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes(3) 看到以下信息说明SSH已配置成功： Hi luxiong-github! You’ve successfully authenticated, but GitHub does not provide shell access. 配置Git用户名邮箱(非必须)(1) 执行以下命令： 12git config --global user.name "luxiong-github"// 你的github用户名，非昵称git config --global user.email "xxx@qq.com"// 填写你的github注册邮箱 (2) 配置详情参考：https://blog.csdn.net/sjt19910311/article/details/83685616 创建hexo项目建议使用文本编辑工具管理项目，推荐使用：VSCode、sublime等，我使用的是VSCode 安装Hexo(1) 打开Git Bash，是一个命令输入终端，后序所有命令操作都在此进行(2) 输入命令：npm install -g hexo-cli(3) 如下图: 创建项目文件夹(1) 在Git Bash中切换到博客目录：cd E:React/my-blog/(2) 新建项目目录：hexo init(3) 如下图是在E:\React\my-blog\目录下新建了一个hexo目录 安装依赖包(1) 切换到hexo目录：cd hexo/(2) 安装依赖包：npm install(3) 安装完成后目录结构如下图： 目录结构介绍请看官方API：https://hexo.io/zh-cn/docs/setup 站点配置网站配置1234567title: 卢雄的博客 #网站标题subtitle: Live and learn. #网站副标题description: 要做的事情总找得出时间和机会；不愿意做的事情也总能找得出借口... #网站描述keywords: Blog,Hexo,Github #网站的关键词。使用半角逗号 , 分隔多个关键词author: luxiong #作者language: zh-Hans #语言 en:英文 zh-Hans:简体中文timezone: #网站时区,默认使用电脑的时区 部署配置1234deploy: #部署相关的配置 type: git #使用Git提交 repo: git@github.com:username/username.github.io.git #仓库地址，username替换为Github的username branch: master #分支名称。如果不指定，则默认值为 master 其他详细配置参考文档：https://hexo.io/zh-cn/docs/configuration 预览(1) 生成文件在终端输入命令：hexo g或者hexo generate，作用是将source下面的资源文件在public下生成对应的HTML文件，这些文件将来都是要提交到github去的(2) 启动服务在终端输入命令：hexo s或者hexo server，作用是开启本地预览服务，打开浏览器访问 localhost:4000 即可看到内容，默认的已经写好了一篇名为Hello World的文章(3) 如果浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考：http://blog.liuxianan.com/windows-port-bind.html 其他配置上述只是完成了最基本的博客搭建，还有许多配置仍需完善… 分类(1) 输入命令：hexo new page &quot;categories&quot;(2) 此命令会在source目录下面创建一个categories目录，内含一个index.md文档，打开进行编辑(3) 增加页面类型，结果如下： 123title: categoriesdate: 2019-08-31 13:47:02type: "categories" #将页面的类型设置为categories 标签(1) 输入命令：hexo new page &quot;tags&quot;(2) 此命令会在source目录下面创建一个tags目录，内含一个index.md文档，打开进行编辑(3) 设置页面类型，结果如下： 123title: tagsdate: 2019-08-31 13:47:02type: "tags" #将页面的类型设置为tags about自我介绍页面(1) 输入命令：hexo new page &quot;about&quot;(2) 此命令会在source目录下面创建一个about目录，内含一个index.md文档，打开进行编辑(3) 设置页面类型，结果如下： 123title: aboutdate: 2018-08-31 16:47:02type: "about" # 将页面的类型设置为about 404页面(1) 在source目录下创建一个404.html文件(2) 打开文件，将内容修改为以下内容： 1234567891011121314151617181920&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;" /&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow" /&gt; &lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="回到我的主页"&gt; &lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; (3) 此404页面为腾讯公益404页面，也可自定义404页面内容 主题修改(1) 在themes目录下存放的是博客的主题，默认的主题是landscape，可以修改其他主题，推荐使用next主题(2) 将终端切换到hexo目录，执行以下命令： 1git clone https://github.com/iissnan/hexo-theme-next themes/next (3) 修改_config.yml中的theme: landscape改为theme: next，然后重新执行hexo g来重新生成 启用配置(1) 分类、标签、404页面等配置是跟随主题来配置的，所以每次更换主题后都需要启用对应配置才能生效(2) 打开themes -&gt; next目录下的主题配置文件_config.yml，开启以下配置： 123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th #archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap commonweal: /404/ || heartbeat (3) 分别执行以下命令，浏览器访问4000端口进行验证： 123hexo clean # 清除原先生成的public下的文件hexo g # 生成public下的文件hexo s # 启动服务 next主题详细配置参考：http://theme-next.iissnan.com/theme-settings.html 发布文章测试(1) 新建一篇文章：hexo new &quot;测试文章&quot;或者直接在source_posts\目录下面新建测试文章.md文件(2) 打开md文件，按格式书写文章内容： 12345678910---title: 测试标题 # 这是标题tags: # 这里写的标签会自动汇集到 tags 页面上- 测试标签1 # 可配置多个标签，注意格式- 测试标签2category: # 这里写的分类会自动汇集到 categories 页面上，分类可以多级- 测试一级分类 # 一级分类- 测试二级分类 # 二级分类---测试文章内容 (3) 预览： 123hexo clean # 清除原先生成的public下的文件hexo g # 生成public下的文件hexo s # 启动服务 1.修改内容一旦预览与修改不一致，则需要clean2.已发布的文章发生修改， 可直接预览，即 不执行上述3个命令,刷新浏览器即可3.若对md文档语法不熟悉，可参考此文章 上传到GitHub(1) 在之前已经将ssh key和_config.yml关于deploy部分的配置已经完善,不再叙述(2) 直接执行hexo d一般会报如下错误： 1Deployer not found: github 或者 Deployer not found: git 解决方案是安装自动部署发布工具： 1npm install hexo-deployer-git --save (3) 输入命令hexo d将代码上传到GitHub，完成查看GitHub如下：(4) 浏览器访问：yourname.github.io，如果出现博客的内容，说明代码上传成功 总结Hexo相关命令总结(1) 常用命令 1234567891011hexo clean #清除缓存hexo g #生成静态页面至public目录，完整写法为：hexo generatehexo s #启动本地服务，完整写法为：hexo serverhexo d #发布到远程(GitHub)，完整写法为：hexo deployhexo new page "xxx" #新建xxx页面hexo new "xxx" #新建xxx文章hexo help #查看帮助hexo version #查看Hexo的版本hexo init #生成站点npm install --save xxx #安装插件npm unstall xxx #卸载插件 (2) 组合命令 12hexo s -g #生成并本地预览hexo d -g #生成并上传 命令尽量手写少复制粘贴，便于熟悉和理解 问题总结(1) 发布的文章都是md文档，可以先了解一下Markdown语法(2) FATAL Cannot read property ‘replace’ of null问题原因：url不能为空解决：修改站点配置文件_config.yml 1url: http://luxiong-blog.com (3) 静态资源图片设置：\themes\next\source\images\用来存放图片遇到某些地方需要用到图片时(主题配置文件中的avatar、wechatpay、alipay等)，直接使用相对路径引用： 123avatar: /images/avatar.jpg #头像wechatpay: /images/wechatpay.jpg #微信打赏码alipay: /images/alipay.jpg #支付宝打赏码 (4) 阅读全文：生成的博文目录会显示全部的文章内容，在合适的位置加上&lt;!--more--&gt;即可隐藏内容，例如： 12345678910111213# 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等； 完成效果：(5) 建站问题及错误，遇到问题不要慌，大胆猜测小心验证，百度搜索问题关键字基本都有解决方案 参考(1) https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html(2) https://tianbozhang.coding.me/personal-blog-start.html]]></content>
      <categories>
        <category>Hexo个人博客搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
