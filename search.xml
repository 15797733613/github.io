<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[QC问题流程梳理]]></title>
    <url>%2F2019%2F09%2F04%2Fweaver%2Fquestion-tidy%2F</url>
    <content type="text"><![CDATA[这篇文章是私人的哦，输下密码吧(*๓´╰╯`๓) Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>weaver</category>
      </categories>
      <tags>
        <tag>weaver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于索引的sql语句优化之降龙十八掌]]></title>
    <url>%2F2019%2F04%2F18%2Fdatabase%2Fdb-index%2F</url>
    <content type="text"><![CDATA[前言:本文主要介绍了基于索引的SQL语句优化的降龙十八掌 前言在规模比较大的局点，往往因为一个小的SQL语句不够优化，导致数据库性能急剧下降，小型机idle所剩无几，应用服务器断连、超时，严重影响业务的正常运行。因此，称低效的SQL语句为业务的‘恶龙’并不过分。数据库的优化方法有很多种，在应用层来说，主要是基于索引的优化。本次秘笈根据实际的工作经验，在研发原来已有的方法的基础上，进行了一些扩充，总结了基于索引的SQL语句优化的降龙十八掌，希望有一天你能用其中一掌来驯服业务中横行的‘恶龙’。 总纲——建立必要的索引降龙十八掌，总纲只有一句话：建立必要的索引，这就是后面降龙十八掌的内功基础。这一点看似容易实际却很难。难就难在如何判断哪些索引是必要的，哪些又是不必要的。判断的最终标准是看这些索引是否对我们的数据库性能有所帮助。具体到方法上，就必须熟悉数据库应用程序中的所有SQL语句，从中统计出常用的可能对性能有影响的部分SQL，分析、归纳出作为Where条件子句的字段及其组合方式；在这一基础上可以初步判断出哪些表的哪些字段应该建立索引。其次，必须熟悉应用程序。必须了解哪些表是数据操作频繁的表；哪些表经常与其他表进行连接；哪些表中的数据量可能很大；对于数据量大的表，其中各个字段的数据分布情况如何；等等。对于满足以上条件的这些表，必须重点关注，因为在这些表上的索引，将对SQL语句的性能产生举足轻重的影响。不过下面还是总结了一下降龙十八掌内功的入门基础，建立索引常用的规则如下：(1) 表的主键、外键必须有索引；(2) 数据量超过300的表应该有索引；(3) 经常与其他表进行连接的表，在连接字段上应该建立索引；(4) 经常出现在where子句中的字段，特别是大表的字段，应该建立索引；(5) 索引应该建在选择性高的字段上；(6) 索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；(7) 复合索引的建立需要进行仔细分析；尽量考虑用单字段索引代替： 正确选择复合索引中的主列字段，一般是选择性较好的字段； 复合索引的几个字段是否经常同时以AND方式出现在where子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引； 如果复合索引中包含的字段经常单独出现在where子句中，则分解为多个单字段索引； 如果复合索引所包含的字段超过3个，那么仔细考虑其必要性，考虑减少复合的字段； 如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引； (8) 频繁进行数据操作的表，不要建立太多的索引；(9) 删除无用的索引，避免对执行计划造成负面影响； 以上是一些普遍的建立索引时的判断依据。一言以蔽之，索引的建立必须慎重，对每个索引的必要性都应该经过仔细分析，要有建立的依据。因为太多的索引与不充分、不正确的索引对性能都毫无益处：在表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也会增加处理上的开销。另外，过多的复合索引，在有单字段索引的情况下，一般都是没有存在价值的；相反，还会降低数据增加删除时的性能，特别是对频繁更新的表来说，负面影响更大。 降龙十八掌第一掌 避免对列的操作任何对列的操作都可能导致全表扫描，这里所谓的操作包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等式的右边，甚至去掉函数。例1：下列SQL条件语句中的列都建有恰当的索引，但 30万行数据情况下执行速度却非常慢： 123select * from record where substrb(CardNo,1,4)='5378'(13秒) select * from record where amount/30&lt; 1000（11秒） select * from record where to_char(ActionTime,'yyyymmdd')='19991201'（10秒） 由于where子句中对列的任何操作结果都是在SQL运行时逐行计算得到的，因此它不得不进行表扫描，而没有使用该列上面的索引；如果这些结果在查询编译时就能得到，那么就可以被SQL优化器优化，使用索引，避免表扫描，因此将SQL重写如下： 1234select * from record where CardNo like '5378%'（&lt; 1秒） select * from record where amount &lt; 1000*30（&lt; 1秒） select * from record where ActionTime= to_date ('19991201' ,'yyyymmdd')（&lt; 1秒） 差别是很明显的！ 第二掌 避免不必要的类型转换需要注意的是，尽量避免潜在的数据类型转换。如将字符型数据与数值型数据比较，ORACLE会自动将字符型用to_number()函数进行转换，从而导致全表扫描。例2：表tab1中的列col1是字符型(char)，则以下语句存在类型转换： 1select col1,col2 from tab1 where col1&gt;10 应该写为： 1select col1,col2 from tab1 where col1&gt;'10' 第三掌 增加查询的范围限制增加查询的范围限制，避免全范围的搜索。例3：以下查询表record中时间ActionTime小于2001年3月1日的数据： 1select * from record where ActionTime &lt; to_date ('20010301' ,'yyyymm') 查询计划表明，上面的查询对表进行全表扫描，如果我们知道表中的最早的数据为2001年1月1日，那么，可以增加一个最小时间，使查询在一个完整的范围之内。修改如下： 1select * from record where ActionTime &lt; to_date ('20010301' ,'yyyymm') and ActionTime &gt; to_date ('20010101' ,'yyyymm') 后一种SQL语句将利用上ActionTime字段上的索引，从而提高查询效率。把20010301换成一个变量，根据取值的机率，可以有一半以上的机会提高效率。同理，对于大于某个值的查询，如果知道当前可能的最大值，也可以在Where子句中加上“AND 列名&lt; MAX(最大值)”。 第四掌 尽量去掉”IN”、”OR”含有”IN“、”OR“的where子句常会使用工作表，使索引失效；如果不产生大量重复值，可以考虑把子句拆开；拆开的子句中应该包含索引。例4： 1select count(*) from stuff where id_no in('0','1')（23秒） 可以考虑将or子句分开： 12select count(*) from stuff where id_no='0' select count(*) from stuff where id_no='1' 然后再做一个简单的加法，与原来的SQL语句相比，查询速度更快。 第五掌 尽量去掉 “&lt;&gt;”尽量去掉 “&lt;&gt;“，避免全表扫描，如果数据是枚举值，且取值范围固定，则修改为”OR“方式。例5： 1UPDATE SERVICEINFO SET STATE=0 WHERE STATE&lt;&gt;0; 以上语句由于其中包含了”&lt;&gt;“，执行计划中用了全表扫描(TABLE ACCESS FULL)，没有用到state字段上的索引。实际应用中，由于业务逻辑的限制，字段state为枚举值，只能等于0，1或2，而且，值等于=1，2的很少，因此可以去掉”&lt;&gt;“，利用索引来提高效率。 修改为： 1UPDATE SERVICEINFO SET STATE=0 WHERE STATE = 1 OR STATE = 2; 进一步的修改可以参考第4种方法。 第六掌 去掉Where子句中的IS NULL和IS NOT NULLwhere子句中的IS NULL和IS NOT NULL将不会使用索引而是进行全表搜索，因此需要通过改变查询方式，分情况讨论等方法，去掉where子句中的IS NULL和IS NOT NULL。 第七掌 索引提高数据分布不均匀时查询效率索引的选择性低，但数据的值分布差异很大时，仍然可以利用索引提高效率。A、数据分布不均匀的特殊情况下，选择性不高的索引也要创建。表ServiceInfo中数据量很大，假设有一百万行，其中有一个字段DisposalCourseFlag，取值范围为枚举值：[0，1，2，3，4，5，6，7]按照前面说的索引建立的规则，“选择性不高的字段不应该建立索引，该字段只有8种取值，索引值的重复率很高，索引选择性明显很低，因此不建索引。然而，由于该字段上数据值的分布情况非常特殊，具体如下表：取值范围:1~5 6 7 占总数据量的百分比:1% 98% 1%而且，常用的查询中，查询DisposalCourseFlag&lt;6的情况既多又频繁，毫无疑问，如果能够建立索引，并且被应用，那么将大大提高这种情况的查询效率。因此，我们需要在该字段上建立索引。 第八掌 利用HINT强制指定索引在ORACLE优化器无法用上合理索引的情况下，利用HINT强制指定索引。继续上面7的例子，ORACLE缺省认定，表中列的值是在所有数据行中均匀分布的，也就是说，在一百万数据量下，每种DisposalCourseFlag值各有12.5万数据行与之对应。假设SQL搜索条件DisposalCourseFlag=2，利用DisposalCourseFlag列上的索引进行数据搜索效率，往往不比全表扫描的高，ORACLE因此对索引“视而不见”，从而在查询路径的选择中，用其他字段上的索引甚至全表扫描。根据我们上面的分析，数据值的分布很特殊，严重的不均匀。为了利用索引提高效率，此时，一方面可以单独对该字段或该表用analyze语句进行分析，对该列搜集足够的统计数据，使ORACLE在查询选择性较高的值时能用上索引；另一方面，可以利用HINT提示，在SELECT关键字后面，加上“/*+ INDEX(表名称，索引名称）*/”的方式，强制ORACLE优化器用上该索引。 比如： 1select * from serviceinfo where DisposalCourseFlag=1 ; 上面的语句，实际执行中ORACLE用了全表扫描，加上蓝色提示部分后，用到索引查询。如下： 1select /*+ INDEX(SERVICEINFO,IX_S_DISPOSALCOURSEFLAG) */ * from serviceinfo where DisposalCourseFlag=1; 请注意，这种方法会加大代码维护的难度，而且该字段上索引的名称被改变之后，必须要同步所有指定索引的HINT代码，否则HINT提示将被ORACLE忽略掉。]]></content>
      <categories>
        <category>Database</category>
        <category>index</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>SQL</tag>
        <tag>index</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome浏览器中F12功能的简单介绍]]></title>
    <url>%2F2019%2F03%2F18%2Fstudy%2Fchrome-F12%2F</url>
    <content type="text"><![CDATA[前言:Chrome浏览器F12开发者工具开发人员的利器,查看了一些博客和资料，简单总结一下~ 常用页面Chrome开发者工具中，调试时使用最多的三个功能页面是：元素（ELements）、控制台（Console）、源代码（Sources），此外还有网络（Network）等 元素（Elements）：用于查看或修改HTML元素的属性、CSS属性、监听事件、断点等。 控制台（Console）：控制台一般用于执行一次性代码，查看JavaScript对象，查看调试日志信息或异常信息。 源代码（Sources）：该页面用于查看页面的HTML文件源代码、JavaScript源代码、CSS源代码，此外最重要的是可以调试JavaScript源代码，可以给JS代码添加断点等。 网络（Network）：网络页面主要用于查看header等与网络连接相关的信息。 元素（Elements） 查看元素代码：点击如图箭头（或用者用快捷键Ctrl+Shift+C）进入选择元素模式，然后从页面中选择需要查看的元素，然后可以在开发者工具元素（Elements）一栏中定位到该元素源代码的具体位置： 查看元素属性：可从被定位的源码中查看部分，如class、src，也可在右边的侧栏中查看全部的属性，如下图位置查看： 修改元素的代码与属性：可直接双击想要修改的部分，然后就进行修改，或者选中要修改部分后点击右键进行修改，如下图： 注意：这个修改也仅对当前的页面渲染生效，不会修改服务器的源代码，故而这个功能也是作为调试页面效果而使用 右边的侧栏个功能的介绍:如下图所示 控制台（Console） 查看JS对象的及其属性 执行JS语句 查看控制台日志：当网页的JS代码中使用了console.log()函数时，该函数输出的日志信息会在控制台中显示。日志信息一般在开发调试时启用，而当正式上线后，一般会将该函数去掉。 源代码（Sources）其主要功能如下介绍: 网络（Network） 主要功能如下： 请求文件具体说明： 分为四个模块： Header：面板列出资源的请求url、HTTP方法、响应状态码、请求头和响应头及它们各自的值、请求参数等等 Preview：预览面板，用于资源的预览。 Response：响应信息面板包含资源还未进行格式处理的内容 Timing：资源请求的详细信息花费时间 小技巧只分析异步请求资源【Network】下面点击“XHR”，这样就只会显示XHR异步请求资源，以便于快速分析请求Headers和Response 快速查找并定位文件 查看源代码，鼠标移到开发工具窗口，按ctrl+p，输入链接地址的前几个字母，会自动联想显示所有符合条件的地址，点击打开即可。（有时第一次打开是空白内容，可再点击一次链接） 打开之后，如果是js内容，就可以直接在上面打断点调试，另外可以点击内容框的左下角大括号图标“{ }”(pretty print)，对代码进行排版美化。 参考文档： https://blog.csdn.net/m0_37724356/article/details/79884006]]></content>
      <categories>
        <category>实用技术</category>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome浏览器F12 Network中Timing参数含义]]></title>
    <url>%2F2019%2F03%2F17%2Fstudy%2Fchrome-timing%2F</url>
    <content type="text"><![CDATA[前言:Chrome浏览器开发者工具Network窗口下，Timing中显示资源在整个请求生命周期过程中各部分花费的时间 参数示例 参数详解Queueing请求文件顺序的排序。浏览器是有线程限制的，发请求也不能所有的请求同时发送，会将请求加入队列中（Chrome的最大并发连接数是6）。此参数表示从添加到待处理队列，到实际开始处理的时间间隔标示。 Stalled（阻塞）(1) 简介浏览器得到要发出这个请求的指令，到请求可以发出的等待时间，一般是代理协商、以及等待可复用的TCP连接释放的时间，不包括DNS查询、建立TCP连接等时间等。浏览器对同一个主机域名的并发连接数有限制，因此如果当前的连接数已经超过上限，那么其余请求就会被阻塞，等待新的可用连接；此外脚本也会阻塞其他组件的下载； (2) 优化措施 将资源合理分布到多台主机上，可以提高并发数，但是增加并行下载数量也会增大开销，这取决于带宽和CPU速度，过多的并行下载会降低性能； 脚本置于页面底部； DNS Lookup(1) 简介请求某域名下的资源，浏览器需要先通过DNS解析器得到该域名服务器的IP地址。在DNS查找完成之前，浏览器不能从主机名那里下载到任何东西。DNS查询的时间，当本地DNS缓存没有的时候，这个时间可能是有一段长度的，但是比如你一旦在host中设置了DNS，或者第二次访问，由于浏览器的DNS缓存还在，这个时间就为0了。 (2) 优化措施 利用DNS缓存（设置TTL时间）； 利用Connection:keep-alive特性建立持久连接，可以在当前连接上进行多个请求，无需再进行域名解析； Initial connection建立TCP连接的时间，就相当于客户端从发请求开始到TCP握手结束这一段，包括DNS查询+Proxy时间+TCP握手时间。 SSL（包含于HTTPS连接中）http是超文本传输协议，以明文方式发送内容，不提供任何方式的数据加密，如果被不法分子截取浏览器和服务器之间的传输报文，会获取其中的信息。https 是安全套接字层超文本传输协议，就是在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。因此建立HTTPS连接的时间相当于三次握手的时间+SSL时间。 Request sent（发送请求）(1) 简介发送HTTP请求的时间（从第一个字节发出前到最后一个字节发出后的时间） (2) 优化措施 减少HTTP请求，可以使用CSS Sprites、内联图片、合并脚本和样式表等； 对不常变化的组件添加长久的Expires头（相当于设置久远的过期时间），在后续的页面浏览中可以避免不必要的HTTP请求； Waiting(TTFB)(1) 简介请求发出后，到收到响应的第一个字节所花费的时间(Time To First Byte)，发送请求完毕到接收请求开始的时间；通常是耗费时间最长的。从发送请求到收到服务器响应的第一字节之间的时间，受到线路、服务器距离等因素的影响。 注意：网页重定向越多，TTFB越高，所以要减少重定向 (2) 优化措施使用CDN，将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求，提高响应速度； Content Download（下载）(1) 简介收到响应的第一个字节，到接受完最后一个字节的时间，就是下载时间。 (2) 优化措施 通过条件Get请求，对比If-Modified-Since和Last-Modified时间，确定是否使用缓存中的组件，服务器会返回“304 Not Modified”状态码，减小响应的大小； 移除重复脚本，精简和压缩代码，如借助自动化构建工具grunt、gulp等； 压缩响应内容，服务器端启用gzip压缩，可以减少下载时间； 参考文档：https://blog.csdn.net/lhz_333/article/details/93544313]]></content>
      <categories>
        <category>实用技术</category>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Note</tag>
        <tag>Timing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令大全]]></title>
    <url>%2F2018%2F12%2F22%2FGit%2Fgit-command%2F</url>
    <content type="text"><![CDATA[前言:本文记录的是常见的Git命令及其作用 增删改查、找回，重置修改文件123456789101112131415git help # 显示command的helpgit show # 显示某次提交的内容 git show $idgit co – # 抛弃工作区修改git co . # 抛弃工作区修改git add # 将工作文件修改提交到本地暂存区git add . # 将所有修改过的工作文件提交暂存区git rm # 从版本库中删除文件git rm –cached # 从版本库中删除文件，但不删除git文件git reset # 从暂存区恢复到工作文件git reset – . # 从暂存区恢复到工作文件git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改git ci git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做git ci -am “some comments”git ci –amend # 修改最后一次提交记录git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象git revert HEAD # 恢复最后一次提交的状态 查看文件diff123456git diff # 比较当前文件和暂存区文件差异 git diffgit diff # 比较两次提交之间的差异git diff .. # 在两个分支之间比较git diff –staged # 比较暂存区和版本库差异git diff –cached # 比较暂存区和版本库差异git diff –stat # 仅仅比较统计信息 查看提交记录123456git log git log # 查看该文件每次提交记录git log -p # 查看每次详细修改内容的diffgit log -p -2 # 查看最近两次详细修改内容的diffgit log –stat #查看提交统计信息tigMac上可以使用tig代替diff和log，brew install tig 查看、切换、创建和删除分支123456789101112git br -r # 查看远程分支git br &lt;new_branch&gt; # 创建新的分支git br -v # 查看各个分支最后提交信息git br –merged # 查看已经被合并到当前分支的分支git br –no-merged # 查看尚未被合并到当前分支的分支git co # 切换到某个分支git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去git co -b &lt;new_branch&gt; # 基于branch创建新的new_branchgit co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支git br -d # 删除某个分支git br -D # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) 分支合并和rebase123git merge # 将branch分支合并到当前分支git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交git rebase master # 将master rebase到branch，相当于： git co &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge Git补丁管理(方便在多台机器上开发同步时用)123git diff &gt; ../sync.patch # 生成补丁git apply ../sync.patch # 打补丁git apply –check ../sync.patch #测试补丁能否成功 Git暂存管理1234git stash # 暂存git stash list # 列所有stashgit stash apply # 恢复暂存的内容git stash drop # 删除暂存区 Git补丁管理(方便在多台机器上开发同步时用)123git diff &gt; ../sync.patch # 生成补丁git apply ../sync.patch # 打补丁git apply –check ../sync.patch #测试补丁能否成功 Git远程分支管理123456789101112git pull # 抓取远程仓库所有分支更新并合并到本地git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并git fetch origin # 抓取远程仓库更新git merge origin/master # 将远程主分支合并到本地当前分支git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上git push # push所有分支git push origin master # 将本地主分支推到远程主分支git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d )，然后再push删除远程分支 Git远程仓库管理12345GitHubgit remote -v # 查看远程服务器地址和仓库名称git remote show origin # 查看远程服务器仓库状态git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库 创建远程仓库123456789git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址git push -u origin master # 客户端首次提交git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且trackgit remote set-head origin master # 设置远程仓库的HEAD指向master分支,也可以命令设置跟踪远程库和本地库git branch –set-upstream master origin/mastergit branch –set-upstream develop origin/develop git init在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹. git clone获取一个url对应的远程Git repo, 创建一个local copy.一般的格式是git clone [url].clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定. git status查询repo的状态. 1git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言. git logshow commit history of a branch(查看历史提交信息). 123456789101112git log –oneline –number #每条log只显示一行,显示number条.git log –oneline –graph #可以图形化地表示出分支合并历史.git log branchname #可以显示特定分支的log.git log –oneline branch1 ^branch2 #可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).git log –decorate #会显示出tag信息.git log –author=[author name] #可以指定作者的提交历史.git log –since –before –until –after #根据提交时间筛选log.–no-merges #可以将merge的commits排除在外.git log –grep #根据commit信息过滤log: git log –grep=keywords，默认情况下, git log –grep –author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上–all-match的option.git log -S #filter by introduced diff，比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).git log -p #show patch introduced at each commit.每一个提交都是一个快照(snapshot)Git会把每次提交的diff计算出来,作为一个patch显示给你看.另一种方法是git show [SHA].git log –stat #show diffstat of changes introduced at each commit.同样是用来看改动的相对信息的,–stat比-p的输出更简单一些. git add查询repo的状态. 12在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging area中的改动,而不是我们disk上的改动.git add . #会递归地添加当前工作目录中的所有文件. git diff12345678910111213141516171819show diff of unstaged changes #此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:git diff --cached 命令.show diff of staged changes.(Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的).git diff HEADshow diff of all staged or unstated changes.也即比较woking directory和上次提交之间所有的改动.如果想看自从某个版本之后都改动了什么,可以用:git diff [version tag]跟log命令一样,diff也可以加上--stat参数来简化输出.git diff [branchA] [branchB]可以用来比较两个分支.它实际上会返回一个由A到B的patch,不是我们想要的结果.一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:git diff [branchA]…[branchB]给出的.实际上它是:git diff $(git merge-base [branchA] [branchB]) [branchB]的结果. git commit1234提交已经被add进来的改动.git commit -m “the commit message”git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下.git commit –amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消. git reset(1) 概述 1234567891011undo changes and commits.这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.git reset HEAD: unstage files from index and reset pointer to HEAD这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加.git reset –softmove HEAD to specific commit reference, index and staging are untouched.git reset –hardunstage files AND undo any changes in the working directory since last commit.使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.这里的HEAD可以被写成任何一次提交的SHA-1.不带soft和hard参数的git reset,实际上带的是默认参数mixed. (2) 总结 12345git reset --mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.git reset --soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.git reset --hard id.是将git的HEAD变了,文件也变了.按改动范围排序如下:soft (commit) &lt; mixed (commit + add) &lt; hard (commit + add + local working) git revert反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了. 12git revert HEAD: 撤销最近的一个提交.git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交. git rm123git rm file: 从staging区移除文件,同时也移除出工作目录.git rm –cached: 从staging区移除文件,但留在工作目录中.git rm –cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树. git clean123git clean是从工作目录中移除没有track的文件.通常的参数是git clean -df:-d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行. git mv1git rm - - cached orig; mv orig new; git add new git stash12345678910把当前的改动压入一个栈.git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处.git stash list会显示这个栈的list.git stash apply:取出stash中的上一个项目(stash@&#123;0&#125;),并且应用于当前的工作目录.也可以指定别的项目,比如git stash apply stash@&#123;1&#125;.如果你在应用stash中项目的同时想要删除它,可以用git stash pop删除stash中的项目:git stash drop: 删除上一个,也可指定参数删除指定的一个项目.git stash clear: 删除所有项目. git branch12345678910git branch可以用来列出分支,创建分支和删除分支.git branch -v可以看见每一个分支的最后一次提交.git branch: 列出本地所有分支,当前分支会被星号标示出.git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的).git branch -d (branchname): 删除一个分支.删除remote的分支:git push (remote-name) :(branch-name): delete a remote branch.这个是因为完整的命令形式是:git push remote-name local-branch:remote-branch而这里local-branch的部分为空,就意味着删除了remote-branch git checkout1234567git checkout (branchname) #切换到一个分支.git checkout -b (branchname) #创建并切换到新的分支.这个命令是将git branch newbranch和git checkout newbranch合在一起的结果.checkout还有另一个作用:替换本地改动:git checkout –此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响.注意:git checkout filename会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的. git merge把一个分支merge进当前的分支. 123git merge [alias]/[branch] #把远程分支merge到当前分支.如果出现冲突,需要手动修改,可以用git mergetool.解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved. git tag12345tag a point in history as import.会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加tag.比如: git tag v1.0git tag -a v1.0, -a参数会允许你添加一些信息,即make an annotated tag.当你运行git tag -a命令的时候,Git会打开一个编辑器让你输入tag信息. git remote1234567git remote #列出remote aliases.如果你clone一个project,Git会自动将原来的url添加进来,别名就叫做:origin.git remote -v #可以看见每一个别名对应的实际url.git remote add [alias] [url] #添加一个新的remote repo.git remote rm [alias] #删除一个存在的remote alias.git remote rename [old-alias] [new-alias] #重命名.git remote set-url [alias] [url] #更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址. git fetch123download new branches and data from a remote repository.可以git fetch [alias]取某一个远程repo,也可以git fetch –all取到全部repofetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,log等,也可以merge到其他分支),但是Git不允许你checkout到它们. git pull1234fetch from a remote repo and try to merge into the current branch.pull == fetch + merge FETCH_HEADgit pull会首先执行git fetch,然后执行git merge,把取来的分支的head merge到当前分支.这个merge操作会产生一个新的commit.如果使用–rebase参数,它会执行git rebase来取代原来的git merge. git rebase1234–rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:git rebase –continue就会继续打余下的补丁.git rebase –abort将会终止rebase,当前分支将会回到rebase之前的状态. git push123git push [alias] [branch]将会把当前分支merge到alias上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支.如果有多个人向同一个remote repo push代码, Git会首先在你试图push的分支上运行git log,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的push,让你先fetch,merge,之后再push,这样就保证了所有人的改动都会被考虑进来. git reflog1234git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.当git reflog不指定引用的时候,默认列出HEAD的reflog.HEAD@&#123;0&#125;代表HEAD当前的值,HEAD@&#123;3&#125;代表HEAD在3次变化之前的值.git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中. 特殊符号12^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^1.~相当于连续的个^.]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批量修改文件名称与格式]]></title>
    <url>%2F2018%2F12%2F06%2Fpython%2Frename-file%2F</url>
    <content type="text"><![CDATA[前言:主要介绍一下如何利用Python脚本实现给指定的文件数据集按照一定的格式批量重命名，文件不单指图片，其他格式的也可以，此处以图片转换为例，希望能够帮到您(^_−)☆ Python脚本(1) 写的是python脚本，需要安装python环境，安装教程可自行百度(2) 桌面新建test1.txt文档后将其改为test1.py,打开文档，将以下内容粘贴进去 12345678910111213141516171819202122232425262728293031# -*- coding:utf8 -*- import osclass BatchRename(): ''' 批量重命名文件夹中的图片文件 ''' def __init__(self): self.path = 'E:\Pictures\' #存放图片的文件夹路径，注意转义字符(\b、\t等) def rename(self): filelist = os.listdir(self.path) total_num = len(filelist) i = 1 for item in filelist: if item.endswith('.jpg'): #指定选取的图片格式为jpg src = os.path.join(os.path.abspath(self.path), item) # 2018-11-20_bqb00 2018-11-20_hzw00 dst = os.path.join(os.path.abspath(self.path), '2018-11-20_00' + str(i) + '.png') #设置新的图片名称 try: os.rename(src, dst) print ("转换图片 %s 成为 %s ..." % (src, dst)) i = i + 1 except: continue print ("共 %d 张图片重命名和转换成 %d jpgs" % (total_num, i-1))if __name__ == '__main__': demo = BatchRename() demo.rename() (3) 只要按自己的需求修改脚本中的中文注释部分即可，上述脚本的功能是：将E:\Pictures\目录下的jpg格式的图片批量重命名为2018-11-20_00形式的png图片 注意路径中的转义字符，例如F:\picture\blog要写成F:\picture\\blog(4) 在桌面按住shift+鼠标右键，打开打开PowerShell窗口，执行python test1.py命令,出现如下结果： 懒人专用 上面的脚本还有手动输入命令执行，我不想输命令怎么办呢？(1) 在test1.py同级目录(此处为桌面)新建一个test2.txt文档，打开文档，将以下内容粘贴进去： 12# 执行批量修改图片脚本python test1.py (2) 保存之后将test2.txt改为test2.bat，然后双击就能自动执行上述python脚本文件 注：test2.bat一定要和test2.py在同一目录 参考链接：https://blog.csdn.net/u014797226/article/details/80028459]]></content>
      <categories>
        <category>Python</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM性能分析常用的命令]]></title>
    <url>%2F2018%2F12%2F04%2Fjava%2FJVM%2Fjvm01%2F</url>
    <content type="text"><![CDATA[前言:JVM性能分析常用的命令，包括jstack(查看jvm线程运行状态)、jps(显示本地的java进程及对应进程号)、jstat(监视VM内存工具)、jinfo(输出并修改运行时的java进程的opts)、jmap(查看堆内存使用状况)、jconsole(java GUI监视工具)、jvisualvm(JVM运行监控工具)注意：在使用这些工具前，先用JPS命令获取当前的每个JVM进程号[pid]，然后选择要查看的JVM jstack功能查看jvm线程运行状态，是否有死锁现象等等信息. 常用命令123jstack pid :thread dump //查看对应进程的jstack的相关语法jstack –l pid //查看对应的线程信息jstack –l pid &gt;E:\luxiong.txt //上述结果打印到指定文档 jps功能与unix上的ps类似，用来显示本地的java进程，可以查看本地运行着几个java程序，并显示他们的进程号. 常用命令1用法命令行(cmd)里打 jps就行了 jstat功能jstat工具特别强大，有众多的可选项，详细查看堆内各个部分的使用量，以及加载类的数量。使用时，需加上查看进程的进程id，和所选参数. 常用命令1234567891011121314151617//单个参数jstat -class pid //显示加载class的数量，及所占空间等信息.jstat -compiler pid //显示VM实时编译的数量等信息.jstat -gc pid //可以显示gc的信息，查看gc的次数，及时间。其中最后五项，分别是young gc的次数，young gc的时间，full gc的次数，full gc的时间，gc的总时间.jstat -gccapacity pid //可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小，如：PGCMN显示的是最小perm的内存使用量，PGCMX显示的是perm的内存最大使用量，PGC是当前新生成的perm内存占用量，PC是但前perm内存占用量。其他的可以根据这个类推， OC是old内纯的占用量.jstat -gcnew pid //new对象的信息.jstat -gcnewcapacity pid //new对象的信息及其占用量.jstat -gcold pid //old对象的信息.jstat -gcoldcapacity pid //old对象的信息及其占用量.jstat -gcpermcapacity pid //perm对象的信息及其占用量.jstat -util pid //统计gc信息统计.jstat -printcompilation pid //当前VM执行的信息.//多个参数jstat -class pid 250 6 //每250毫秒打印一次，一共打印6次.jstat -class -h2 pid 250 6 //上述基础上增加每2行显示一下标题.jstack -gcutil pid 1000 100 //每1000ms统计一次gc情况统计100次jstat -gcutil pid 2000 &gt;E:luxiong.txt //将上述结果生成指定文件. jinfo功能可以输出并修改运行时的java进程的运行参数(opts). 常用命令12jinfo -opt pid //用法示例(opt表示对应参数,如下示例)jinfo -flag MaxPermSize pid //查看进程pid的MaxPerm大小 jmap功能jmap是一个可以输出所有内存中对象的工具，甚至可以将VM 中的heap，以二进制输出成文本. 常用命令1234jmap -dump:format=b,file=E:\luxiong.bin pid //file-保存路径及文件名 pid-进程编号 jmap -dump:file=E:\luxiong.dump pid //file-保存路径及文件名 pid-进程编号 jmap -histo:live pid //堆中活动的对象以及大小jmap -heap pid //查看堆的使用状况信息 jconsole功能用java写的GUI程序，用来监控VM，并可监控远程的VM，非常易用，而且功能非常强. 常用命令1用法命令行(cmd)里打 jconsole，选则相应的进程就行了 jvisualvm功能用来监控JVM的运行情况，可以用它来查看和浏览Heap、Dump、ThreadDump、内存对象实例情况、GC执行情况、CPU消耗以及类的装载情况。该工具位于JDK根目录的bin文件夹下面，无需安装，正常装完jdk吼直接在bin目录下运行jvisual.exe即可. 常用命令1用法命令行(cmd)里打 jvisualvm，选则相应的进程就可以(功能远比jconsole强大) 解析（1）概述：显示当前服务器(resin)的整体运行状况 （2）监视：可实时动态显示cpu、堆栈、类、线程的相关信息(类似于jconsole的升级版) （3）线程：可实时动态的现实进程的使用状况点击[==线程Dump==]按钮 可以显示具体的进程的内容，可从此页面查看到进程的具体信息以及报错信息(类似于jstack命令的查看结果) （4）：显示当前服务器(resin)的整体运行状况 参考文档1.https://blog.csdn.net/u012550080/article/details/816051892.http://www.51testing.com/html/38/n-3724238.html3.https://blog.51cto.com/zero01/2141942]]></content>
      <categories>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java线程的七种状态]]></title>
    <url>%2F2018%2F11%2F04%2Fjava%2Fjava-thread%2F</url>
    <content type="text"><![CDATA[前言:本文简单介绍一下Java线程的七种状态 Java线程有7种状态，分别是:1. 新建状态(new)（1）使用new操作符新创建的一个线程对象，例如new Thread();（2）处于新建状态的线程，内部的任务代码还没开始运行. 2. 可执行/就绪状态(Runnable)（1）新创建的线程并不自动开始运行，要执行线程，必须调用线程的start()方法。当调用了线程对象的start()方法即启动了线程，此时线程就处于就绪状态;（2）处于就绪状态的线程并不一定立即运行run()方法，线程还必须==同其他就绪线程竞争CPU==，只有==获得CPU使用权才可以运行线程==;（3）线程阻塞状态(Blocked)结束后也可以变成就绪状态，或从运行状态(Running)变化到就绪状态. 3. 运行状态(Running)（1）线程获取到CPU使用权进行执行;（2）需要注意的是，==线程只能从就绪状态进入到运行状态==,真正开始执行run()方法的内容. 4. 阻塞状态(Blocked)（1）线程在获取锁失败时(因为锁被其它线程抢占)，它会被加入锁的同步阻塞队列，然后线程进入阻塞状态(Blocked);（2）待其它线程释放锁之后，阻塞状态(Blocked)的线程将在次参与锁的竞争，如果==竞争锁成功==，==线程将进入就绪状态==(Runnable),之后才有机会转到运行状态(Running). 5. 等待状态(Waiting)（1）线程执行wait()方法，JVM会把该线程放入等待队列(waitting queue)中,进入等待状态;（2）处于等待状态的线程将不会被CPU执行，除非线程的运行条件得到满足后，其==可被其他线程唤醒==，进入阻塞状态(Blocked);（3）调用不带超时的Thread.join()方法也会进入等待状态. 6. 睡眠(Sleep)（1）睡眠是等待状态的一种特例，在调用Thread.sleep()方法，带有超时设定的Object.wait()方法，带有超时设定的Thread.join()方法等，线程会进入睡眠状态(Sleep);（2）睡眠状态进程达到设置时间的等待时间后，睡眠线程将==自动唤醒进入阻塞状态==(Blocked)或就绪状态(Runnable). 7. 死亡(Dead)（1）线程执行完了或者因异常退出了run()方法，该线程结束生命周期,死亡的线程==不可再次复生==. 参考文档1.https://baijiahao.baidu.com/s?id=1626410873162104506&amp;wfr=spider&amp;for=pc]]></content>
      <categories>
        <category>Java</category>
        <category>Thread</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2018%2F09%2F23%2Fstudy%2Fmarkdown01%2F</url>
    <content type="text"><![CDATA[简单介绍一下Markdown的基本语法(未完善，待补充…) 标题在想要设置为标题的文字前面加#来表示注：标准语法一般在#后跟个空格再写文字（1）示例： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 （2）效果：由于标题演示效果会影响目录结构，故不展示效果 字体（1）简介 加粗要加粗的文字左右分别用两个*号包起来 斜体要加粗的文字左右分别用一个*号包起来 斜体加粗要倾斜和加粗的文字左右分别用三个*号包起来 删除线要加删除线的文字左右分别用两个~~号包起来 （2）示例： 1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ （3）效果：这是加粗的文字这是倾斜的文字这是斜体加粗的文字这是加删除线的文字 引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;等等 （1）示例： 123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 （2）效果： 这是引用的内容 这是引用的内容 这是引用的内容 分割线三个或者三个以上的 - 或者 * 都可以 （1）示例： 1234-------******** （2）效果： 图片（1）简介基本语法：![图片alt](图片URL&quot;图片title&quot;&quot;)图片alt:显示在图片下面的文字，相当于对图片内容的解释;图片URL:图片的链接URL图片title:当鼠标移到图片上时显示的内,title可加可不加(==URL和title之间有个空格==) （2）示例： 1![这是一张示例图片](https://ibb.co/album/kshZBF ''海贼王'') （3）效果： 图片必须配合链接使用，所以必须有一个好的图床工具： 七牛云：https://www.qiniu.com/ ImgBB：https://imgbb.com/ 聚合图床：https://www.superbed.cn/百度直接搜索关键字“免费图床”，可以搜到一堆 超链接初级链接（1）基本语法：[超链接名](超链接URL &quot;超链接title&quot;)title可加可不加,语法参照图片 （2）示例： 12[简书](http://jianshu.com)[百度](http://baidu.com) （3）效果：简书百度 高级链接（1）示例 1234567链接也可以用变量来代替，文档末尾附带变量地址：这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [runoob]: http://www.runoob.com/ （2）效果百度简书 注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替。例如： 12示例&lt;a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank"&gt;简书&lt;/a&gt; 列表列表分为无序列表和有序列表 无序列表无序列表用 - + * 任何一种都可以 （1）示例： 12345- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 （2）效果： 列表内容 列表内容 列表内容 有序列表数字加点 （1）示例： 123451. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格 （2）效果： 列表内容 列表内容 列表内容 注意：序号跟内容之间要有空格 列表嵌套 一级无序列表 二级无序列表 二级无序列表 一级无序列表 二级有序列表 二级有序列表 表格（1）语法： 1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 （2）示例： 12345姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 （3）效果：姓名|技能|排行–|:–:|–:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 代码单行代码代码之间分别用一个反引号包起来（1）示例： 1`create database hero;` （2）效果：create database hero; 多行代码代码之间分别用三个反引号包起来，且两边的反引号单独占一行示例及效果： 1234function fun()&#123; echo "这是一句非常牛逼的代码";&#125;fun(); 流程图公式流程图时序图甘特图 待办事项- [x]：表示已完成- [ ]：表示未完成（1）示例： 123456- [x] 已完成项目1 - [x] 已完成事项1 - [x] 已完成事项2- [ ] 待完成项目1 - [ ] 待完成事项1 - [ ] 待完成事项2 （2）效果： 已完成项目1 已完成事项1 已完成事项2 待完成项目1 待完成事项1 待完成事项2 高级技巧支持的 HTML 元素（1）简介目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等（2）示例 123456&lt;b&gt;test&lt;/b&gt; &lt;i&gt;test&lt;/i&gt; &lt;em&gt;test&lt;/em&gt; &lt;sup&gt;test&lt;/sup&gt; &lt;sub&gt;test&lt;/sub&gt; &lt;br&gt;test&lt;/br&gt; （3）效果testtesttesttesttesttest 转义（1）简介Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符（2）示例 12**文本加粗** \*\* 正常显示星号 \*\* （3）效果文本加粗** 正常显示星号 ** 参考文档：1.有道云笔记Markdown指南2.菜鸟教程]]></content>
      <categories>
        <category>实用技术</category>
        <category>Markdown教程</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客插件、展望]]></title>
    <url>%2F2018%2F09%2F04%2Fhexo%2Fhexo-blog04%2F</url>
    <content type="text"><![CDATA[前言:介绍博客的一些用法、功能以及相关插件… 相关插件Hexo相关初始化配置1npm install -g hexo-cli 安装自动部署发布工具1npm install hexo-deployer-git --save 分页插件1234npm install --save hexo-generator-indexnpm install --save hexo-generator-archivenpm install --save hexo-generator-tagnpm install --save hexo-generator-category 文章字数与阅读时长 wordcount 插件1npm install hexo-wordcount --save RSS订阅功能1npm install hexo-generator-feed --save 站内搜索1npm install --save hexo-generator-searchdb Gitment评论1npm i --save gitment 文章加密1npm install --save hexo-blog-encrypt 图片上传相册 git连接远程Blog_Album 此小块所有命令均在Blog_Album目录下打开终端执行(1) 执行git remote add origin https://github.com/luxiong-github/Blog_Album.git为本地仓库添加一个远程仓库如果此处出现fatal: remote origin already exists.错误，说明远程起源已经存在，则先执行git remote rm origin再执行上述命令(2) 拉取远程仓库代码：git pull --rebase origin master(远程仓库被更新本地没更新才需要执行)git pull --rebase origin master 上传照片(1) 将照片放到Blog_Album\photos目录中，命名格式：yyyy-MM-dd_des.jpg/jpeg/gif/png.(脚本解析jpg有问题，最好使用png)(2) 终端切换到Blog_Album目录下(或者直接在Blog_Album目录下shift+鼠标右键打开PowerShell窗口),执行python tool.py命令 如果出现error: failed to push some refs to错误，说明本地没有update到最新版本的项目（git上有README.md文件没下载下来）,执行此处命令(3) 如果上述命令执行无误，则可进入自己GitHub的Blog_Album仓库中进行查看(4) hexo g &amp;&amp; hexo s进入博客查看 参考：https://malizhi.cn/HexoAlbum/ 源码提交gitee(1) my-blog目录下打开终端，输入命令初始化创建一个空的本地仓库： 1git init (2) 将本地库与远程仓库(gitee)进行链接： 1git remote add origin https://gitee.com/luxiong-gitee/blog-code.git (3) 将项目的所有文件添加到缓存中： 1git add . (4) 将缓存中的文件Commit到git库： 1git commit -m "项目源码上传" (5) 上传代码之前最好先pull一下(拉取远程仓库最新代码)： 1git pull origin master (6) 代码提交到远程库： 1git push origin master 待优化项目 Fork me on GitHub 123&lt;a href="https://github.com/luxiong-github"&gt; &lt;img width="149" height="149" src="https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149" class="attachment-full size-full" alt="Fork me on GitHub" data-recalc-dims="1"&gt;&lt;/a&gt; 流程图 相册 https://malizhi.cn/HexoAlbum/ https://www.jianshu.com/p/7f6425b3ffb2 URL优化 站点提交百度、Google https://malizhi.cn/nextTutorial/#more]]></content>
      <categories>
        <category>Hexo个人博客搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建-加强]]></title>
    <url>%2F2018%2F09%2F02%2Fhexo%2Fhexo-blog03%2F</url>
    <content type="text"><![CDATA[前言:给博客增加一些更高级的功能，例如分页、站内搜索、评论… Hexo文章加密简介(1) 尝试着想一下，你写了一篇博客，但是，出于某种原因，不太希望每一个人都可以看到他。所以你常常会为这种文章设置一个密码，其他人需要输入密码才可以访问这篇博客。所以Hexo-Blog-Encrypt 因为这个需求而诞生了(2) 一旦你输入了正确的密码，你可以在接下来的 30 分钟内，无需密码访问该网页 安装(1) 命令： 123npm install --save hexo-blog-encrypt # npm安装yarn add hexo-blog-encrypt # yarn安装 (2) 在站点配置文件_config.yml中添加插件配置： 123456# Securityencrypt: # hexo-blog-encrypt enable: true tags: # 配置标签加密 - &#123;name: test, password: test&#125; - &#123;name: diary, password: diary&#125; (3) 文章头部添加对应字段，如password, abstract, message： 1234567---title: Hello Worlddate: 2016-03-30 21:18:02password: mikemessi # 该博客加密使用的密码abstract: Something was encrypted, please enter password to read. #该博客的摘要，会显示在博客的列表页message: Welcome to my blog, please enter password to read. #博客查看时，密码输入框上面的描述性文字--- (4) hexo clean &amp;&amp; hexo g &amp;&amp; hexo s，来查看效果 注意事项(1) 文章设置的password优先级最高，其次是设置标签加密，文章多标签加密密码优先级跟文章标签先后顺序有关(2) 密码的有效时间是30分钟(3) 插件还可以对TOC进行加密以及修改加密模板，详情见参考链接(4) 加密后的文章可能会有不显示文章目录的bug，解决方案：将next/layout/_macro/sidebar.swig替换为这个博客中的文件 参考链接：https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md Valine评论安装使用Next主题，本身就已经集成了valine，因此正常情况下只需要配置一下就行了，不用安装，需要安装的可以使用以下命令： 1234# Install leancloud's js-sdknpm install leancloud-storage --save# Install valinenpm install valine --save Leancloud配置(1) 之前的文章次数统计已经配置过了，这里只需要进入Leancloud获取对应的APP ID和APP KEY就行了(2) 修改主题配置文件hexo\themes\next\_config.yml，修改以下参数： 12345678910valine: enable: true //打开valine评论功能 appid: 你的leancloud appid appkey: 你的leancloud appkey notify: false //邮件提醒 verify: true //评论时是否有验证码，需要在Leancloud 设置-&gt;安全中心 中打开 placeholder: 说点什么吧！ //评论框默认显示 avatar: monsterid //评论者的头像 guest_info: nick # custom comment header pageSize: 10 # pagination size (3) 评论者头像avatar取值与显示效果如下： 相册 注：Next主题默认是不含有相册页面的,如果想添加此页面需自行编写 相册和视频导航栏LTAIC4oDgY9ZCa0n0nEgVvA7KLV7QUfV1vMgjF4U4JvxM2 其他配置博客相册页面图片的处理 小功能集合文章链接唯一化hexo默认提供的文章链接方案是使用年/月/日/标题，也许你会数次更改文章题目或者变更文章发布时间，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择(1) 安装插件 1npm install hexo-abbrlink --save (2) 在站点配置文件中查找代码permalink，将其更改为: 1permalink: posts/:abbrlink/ # “posts/” 可自行更换 参考(1) https://malizhi.cn/HexoAlbum/(2) https://www.jianshu.com/p/7f6425b3ffb2]]></content>
      <categories>
        <category>Hexo个人博客搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建-完善]]></title>
    <url>%2F2018%2F08%2F31%2Fhexo%2Fhexo_blog02%2F</url>
    <content type="text"><![CDATA[前言:给博客增加一些更高级的功能，例如分页、站内搜索、评论… 细节完善分页(1) 插件安装(按需安装) 123npm install --save hexo-generator-index # 首页分页配置# npm install --save hexo-generator-archive # 归档分页配置# npm install --save hexo-generator-tag # 标签分页配置 (2) 站点配置文件： 1234567891011index_generator: path: '' per_page: 5 order_by: -date#archive_generator:# per_page: 20# yearly: true# monthly: true#tag_generator:# per_page: 10 (3) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，查看效果 文章相关 详情请参考：https://tianbozhang.coding.me/personal-blog-custom.html 分页(1) 插件安装(按需安装) 123npm install --save hexo-generator-index # 首页分页配置# npm install --save hexo-generator-archive # 归档分页配置# npm install --save hexo-generator-tag # 标签分页配置 (2) 站点配置文件： 1234567891011index_generator: path: '' per_page: 5 order_by: -date#archive_generator:# per_page: 20# yearly: true# monthly: true#tag_generator:# per_page: 10 (3) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，查看效果 博文置顶(1) 修改hexo-generator-index插件将node_modules/hexo-generator-index/lib/generator.js文件替换为：generator.js(2)在文章Front-matter中添加top值，数值越大文章越靠前，如： 12345678---title: Naruto 图集categories: [图片]tags: [picture,naruto]date: 2016-09-02 14:36:04keywords: picture,narutotop: 10--- 头像圆形旋转介绍一下实现头像圆形，鼠标经过旋转或者一直让旋转效果，主要是修改hexo目录下\themes\next\source\css\_common\components\sidebar\sidebar-author.styl文件(1) 头像圆形修改修改sidebar-author.styl文件中.site-author-imageCSS 样式如下： 12345678910111213.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /*头像圆形*/ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px;&#125; (2) 鼠标经过旋转修改修改sidebar-author.styl文件，添加 CSS 样式img:hover如下代码： 123456img:hover &#123; /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125; 修改sidebar-author.styl文件中.site-author-imageCSS 样式如下： 12345678910111213141516171819.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.5s ease-out; -moz-transition: -moz-transform 1.5s ease-out; transition: transform 1.5s ease-out;&#125; (3) 鼠标经过旋转修改修改sidebar-author.styl文件，添加如下代码： 12345678910111213141516171819202122232425/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(360deg); &#125;&#125; 修改sidebar-author.styl文件中.site-author-imageCSS 样式如下： 12345678910111213141516171819202122232425.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画：animation:动画名称 动画播放时长单位秒或微秒 动画播放的速度曲线linear为匀速 动画播放次数infinite为循环播放; */ -webkit-animation: play 3s linear infinite; -moz-animation: play 3s linear infinite; animation: play 3s linear infinite; /* 鼠标经过头像旋转360度 -webkit-transition: -webkit-transform 1.5s ease-out; -moz-transition: -moz-transform 1.5s ease-out; transition: transform 1.5s ease-out;*/&#125; 鼠标经过停止头像旋转：修改sidebar-author.styl文件，添加 CSS 样式img:hover如下代码： 12345678910img:hover &#123; /* 鼠标经过停止头像旋转 */ -webkit-animation-play-state:paused; animation-play-state:paused; /* 鼠标经过头像旋转360度 -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);*/&#125; 页面点击小红心(1) 在/themes/next/source/js/src下新建文件clicklove.js，接着把该链接下的代码拷贝粘贴到clicklove.js文件中。代码如下： 12// 页面点击爱心效果!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); (2) 在\themes\next\layout\_layout.swig文件末尾添加： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt; (3) 清缓存hexo clean，重新生成hexo g，启动服务hexo s检验效果 动态title崩溃欺骗(1) \themes\next\source\js\src，新建custom-title.js 12345678910111213141516&lt;!--崩溃欺骗--&gt;var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="icon"]').attr('href', "/img/TEP.ico"); document.title = ' 页面崩溃啦 ~ ！'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "/favicon.ico"); document.title = ' 噫又好了~ ' + OriginTitile; titleTime = setTimeout(function () &#123; document.title = OriginTitile;&#125;, 2000); &#125;&#125;); (2) 更改\themes\next\layout_layout.swig,在文件末尾添加： 12&lt;!--动态title崩溃欺骗,卖萌专用--&gt;&lt;script type="text/javascript" src="/js/src/custom-title.js"&gt;&lt;/script&gt; (3) 清缓存hexo clean，重新生成hexo g，启动服务hexo s检验效果 High一下(1) header位置更改themes\next\layout_custom\header.swig,在文件末尾添加：sidebar位置更改themes\next\layout_custom\sidebar.swig(2) 添加以下内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150&lt;li&gt; &lt;a title="把这个链接拖到你的Chrome收藏夹工具栏中" href='javascript:(function() &#123; function c() &#123; var e = document.createElement("link"); e.setAttribute("type", "text/css"); e.setAttribute("rel", "stylesheet"); e.setAttribute("href", f); e.setAttribute("class", l); document.body.appendChild(e) &#125; function h() &#123; var e = document.getElementsByClassName(l); for (var t = 0; t &lt; e.length; t++) &#123; document.body.removeChild(e[t]) &#125; &#125; function p() &#123; var e = document.createElement("div"); e.setAttribute("class", a); document.body.appendChild(e); setTimeout(function() &#123; document.body.removeChild(e) &#125;, 100) &#125; function d(e) &#123; return &#123; height : e.offsetHeight, width : e.offsetWidth &#125; &#125; function v(i) &#123; var s = d(i); return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r &#125; function m(e) &#123; var t = e; var n = 0; while (!!t) &#123; n += t.offsetTop; t = t.offsetParent &#125; return n &#125; function g() &#123; var e = document.documentElement; if (!!window.innerWidth) &#123; return window.innerHeight &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123; return e.clientHeight &#125; return 0 &#125; function y() &#123; if (window.pageYOffset) &#123; return window.pageYOffset &#125; return Math.max(document.documentElement.scrollTop, document.body.scrollTop) &#125; function E(e) &#123; var t = m(e); return t &gt;= w &amp;&amp; t &lt;= b + w &#125; function S() &#123; var e = document.createElement("audio"); e.setAttribute("class", l); e.src = i; e.loop = false; e.addEventListener("canplay", function() &#123; setTimeout(function() &#123; x(k) &#125;, 500); setTimeout(function() &#123; N(); p(); for (var e = 0; e &lt; O.length; e++) &#123; T(O[e]) &#125; &#125;, 15500) &#125;, true); e.addEventListener("ended", function() &#123; N(); h() &#125;, true); e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;"; document.body.appendChild(e); e.play() &#125; function x(e) &#123; e.className += " " + s + " " + o &#125; function T(e) &#123; e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)] &#125; function N() &#123; var e = document.getElementsByClassName(s); var t = new RegExp("\\b" + s + "\\b"); for (var n = 0; n &lt; e.length; ) &#123; e[n].className = e[n].className.replace(t, "") &#125; &#125; var e = 30; var t = 30; var n = 350; var r = 350; var i = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3"; var s = "mw-harlem_shake_me"; var o = "im_first"; var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"]; var a = "mw-strobe_light"; var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css"; var l = "mw_added_css"; var b = g(); var w = y(); var C = document.getElementsByTagName("*"); var k = null; for (var L = 0; L &lt; C.length; L++) &#123; var A = C[L]; if (v(A)) &#123; if (E(A)) &#123; k = A; break &#125; &#125; &#125; if (A === null) &#123; console.warn("Could not find a node of the right size. Please try a different page."); return &#125; c(); S(); var O = []; for (var L = 0; L &lt; C.length; L++) &#123; var A = C[L]; if (v(A)) &#123; O.push(A) &#125; &#125;&#125;)() '&gt;High一下&lt;/a&gt; &lt;/li&gt; (3) 代码块的内容不需要再做任何修改,清缓存hexo clean，重新生成hexo g，启动服务hexo s查看效果 底部增加运行时间(1) 修改themes/next/layout/_partials/footer.swig，增加如下代码： 123456789101112131415161718&lt;!-- 在网页底部添加网站运行时间 --&gt;&lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt;&lt;script&gt; var now = new Date(); function createtime() &#123; var grt= new Date("07/21/2018 00:00:00");//此处修改你的建站时间或者网站上线时间 now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125; seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; document.getElementById("timeDate").innerHTML = "Run for "+dnum+" Days "; document.getElementById("times").innerHTML = hnum + " Hours " + mnum + " m " + snum + " s"; &#125;setInterval("createtime()",250);&lt;/script&gt; (2) 运行效果： 当前所在菜单下划线显示(1) 打开themes\next\layout\ _partials目录下的header.swig文件(2) 在底部添加以下代码： 123456789101112131415&lt;script&gt; window.onload = function()&#123; var path = 'https://malizhi.cn'; //这里要改成你博客的地址 var localhostItem = String(window.location).split(path)[1]; var LiNode = document.querySelectorAll('#menu &gt; li &gt; a') for(var i = 0; i&lt; LiNode.length;i++)&#123; var item = String(LiNode[i].href).split(path)[1]; if(item == localhostItem &amp;&amp; item != undefined)&#123; LiNode[i].setAttribute('style','border-bottom:1px solid black'); &#125; &#125; &#125;;&lt;/script&gt; (3) hexo clean &amp;&amp; hexo g &amp;&amp; hexo s后完成效果： 底部跳动图标实现(1) 在next\layout_partials下的footer.swig文件中，在你所需要调动的图标所对应的span中增加对应的ID(2) 在主题的css文件next\source\css\_variables\custom.styl ，增加以下代码即可： 123456789101112131415//底部爱心小图标跳动keyframes heartAnimate &#123; 0%,100%&#123;transform:scale(1);&#125; 10%,30%&#123;transform:scale(0.9);&#125; 20%,40%,60%,80%&#123;transform:scale(1.1);&#125; 50%,70%&#123;transform:scale(1.1);&#125;&#125;//图标所对应的span中的ID#heart &#123; animation: heartAnimate 1.33s ease-in-out infinite;&#125;.with-love &#123; color: rgb(255, 113, 113);&#125; (3) hexo clean &amp;&amp; hexo g &amp;&amp; hexo s后完成效果： 第三方服务集成站内搜索NexT 支持集成 Swiftype、 微搜索、Local Search 和 Algolia。在这里我使用的是Local Search，下面将介绍如何使用:(1) 添加百度/谷歌/本地 自定义站点内容搜索，安装hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-searchdb --save (2) 编辑站点配置文件_config.yml，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 (3) 编辑主题配置文件_config.yml，启用本地搜索功能： 123# Local searchlocal_search: enable: true 注：其他搜索方式请查看站内搜索 (4) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，效果如下： 数据统计分析NexT 支持集成 不蒜子统计、百度统计等多种数据统计方式。此处使用不蒜子统计，下面将介绍如何使用: 此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后 (1) 全局配置：编辑主题配置文件_config.yml中的busuanzi_count的配置项。当enable: true时，代表开启全局开关。若 site_uv 、site_pv 、 page_pv 的值均为 false 时，不蒜子仅作记录而不会在页面上显示(2) 站点UV配置：当site_uv: true时，代表在页面底部显示站点的UV值。site_uv_header和site_uv_footer为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的font-awesome。如下： 1234# 效果：本站访客数12345人次site_uv: truesite_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; 本站访客数site_uv_footer: 人次 (3) 站点PV配置：当site_pv: true时，代表在页面底部显示站点的PV值。site_pv_header和site_pv_footer为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的font-awesome。如下： 1234# 效果：本站总访问量12345次site_pv: truesite_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; 本站总访问量site_pv_footer: 次 注：其他统计方式请查看数据统计分析 (4) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，效果如下： (5) 不蒜子统计不生效，浏览器控制台报错原因：由于 busuanzi(不蒜子) 的域名更新，导致了使用 Hexo Next 主题时统计数据失效解决方法： 到 hexo 的 themes 文件夹下, 打开\themes\next\layout_third-party\analytics\busuanzi-counter.swig文件 将src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;修改为src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot; 内容分享服务NexT 支持集成 jiathis、baidushare 和 AddThis内容分享服务。在这里我使用的是baidushare，下面将介绍如何使用:(1) 编辑站点配置文件_config.yml，新增以下内容到任意位置： 1baidushare: true #百度分享功能 (2) 编辑主题配置文件_config.yml，设置其展现方式： 12baidushare: type: button #百度分享展示的方式button|slide 注：其他内容分享方式请查看内容分享服务 (4) 清缓存hexo clean，重新生成hexo g，启动服务hexo s，效果如下： 文章阅读次数统计(1) 在LeanCloud进行对应的配置详细配置参考文章：配置LeanCloud(2) 注Class名称必须为Counter Gitment评论(1) Gitment评论搭建参考：https://sjq597.github.io/2018/05/18/Hexo-使用Gitment评论功能/(2) 踩过的坑： Error: Validation Failed原因：issue的Label有长度限制,对于中文博客来说,中文标题很容易就超过长度限制方案：修改themes/next/layout/_third-party/comments/gitment.swig中的id部分如下: 1234var gitment = new &#123;&#123;CommentsClass&#125;&#125;(&#123; id: '&#123;&#123; page.date &#125;&#125;', owner: '&#123;&#123; theme.gitment.github_user &#125;&#125;', repo: '&#123;&#123; theme.gitment.github_repo &#125;&#125;', object ProgressEvent原因：作者的default.css和gitment.browser.js域名用的别人的，现在过期了方案：修改themes/next/layout/_third-party/comments/gitment.swig中对应部分如下: 1234&lt;!-- &lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt; --&gt;&lt;!-- &lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js"&gt;&lt;/script&gt; --&gt;&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/default.css"&gt;&lt;script src="https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/gitment.browser.js"&gt;&lt;/script&gt; 注释部分是原来的地址，过期了的，下面的是引用的其他有效地址(3) 汉化：修改themes/next/layout/_third-party/comments/gitment.swig中对应部分如下: 12&lt;link rel="stylesheet" href="https://billts.site/extra_css/gitment.css"&gt;&lt;script src="https://billts.site/js/gitment.js"&gt;&lt;/script&gt; (4) 清缓存hexo clean，重新生成hexo g，部署hexo d，然后访问username.github.io查看效果(5) 每篇文章都需要登录GitHub账号然后点击初始化 来必力评论(1) 登陆来必力获取你的livere_uid 没有账号需要注册一个注册完点击安装，然后填上博客的相应信息，如图data-uid就是所需要的livere_uid(2) 编辑主题配置文件， 编辑livere_uid字段，设置如下: 1livere_uid: #your livere_uid 参考(1) https://cloud.tencent.com/developer/article/1482021(2) https://tianbozhang.coding.me/personal-blog-custom.html(3) https://ehlxr.me/categories/Hexo/(4) https://malizhi.cn/nextTutorial/#more]]></content>
      <categories>
        <category>Hexo个人博客搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建-入坑]]></title>
    <url>%2F2018%2F08%2F30%2Fhexo%2Fhexo_blog01%2F</url>
    <content type="text"><![CDATA[前言:使用Node.js+Hexo+Next+Git+GitHub，让你几分钟就能创建一个博客 基本配置(1) Node.js(2) Git(3) GitHub账号及仓库 注：上述条件安装完成后执行后续操作 配置GitHub仓库创建仓库(1) 新建一个名为username.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库(2) 每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库 1.注册的邮箱一定要验证，否则不会成功2.仓库名字必须是：username.github.io，其中username是你的用户名 配置SSH key(1) 提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题(2) 检查本机已存在的ssh密钥：cd ~/. ssh，如果提示No such file or directory说明你是第一次使用Git(3) 生成密钥：ssh-keygen -t rsa -C &quot;邮件地址&quot;，然后三次回车(4) 打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容(5) 打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，将刚复制的内容粘贴到key那里，title随便填，保存: 测试是否成功(1) 输入命令：ssh -T git@github.com(2) 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes(3) 看到以下信息说明SSH已配置成功： Hi luxiong-github! You’ve successfully authenticated, but GitHub does not provide shell access. 配置Git用户名邮箱(非必须)(1) 执行以下命令： 12git config --global user.name "luxiong-github"// 你的github用户名，非昵称git config --global user.email "xxx@qq.com"// 填写你的github注册邮箱 (2) 配置详情参考：https://blog.csdn.net/sjt19910311/article/details/83685616 创建hexo项目建议使用文本编辑工具管理项目，推荐使用：VSCode、sublime等，我使用的是VSCode 安装Hexo(1) 打开Git Bash，是一个命令输入终端，后序所有命令操作都在此进行(2) 输入命令：npm install -g hexo-cli(3) 如下图: 创建项目文件夹(1) 在Git Bash中切换到博客目录：cd E:React/my-blog/(2) 新建项目目录：hexo init(3) 如下图是在E:\React\my-blog\目录下新建了一个hexo目录 安装依赖包(1) 切换到hexo目录：cd hexo/(2) 安装依赖包：npm install(3) 安装完成后目录结构如下图： 目录结构介绍请看官方API：https://hexo.io/zh-cn/docs/setup 站点配置网站配置1234567title: 卢雄的博客 #网站标题subtitle: Live and learn. #网站副标题description: 要做的事情总找得出时间和机会；不愿意做的事情也总能找得出借口... #网站描述keywords: Blog,Hexo,Github #网站的关键词。使用半角逗号 , 分隔多个关键词author: luxiong #作者language: zh-Hans #语言 en:英文 zh-Hans:简体中文timezone: #网站时区,默认使用电脑的时区 部署配置1234deploy: #部署相关的配置 type: git #使用Git提交 repo: git@github.com:username/username.github.io.git #仓库地址，username替换为Github的username branch: master #分支名称。如果不指定，则默认值为 master 其他详细配置参考文档：https://hexo.io/zh-cn/docs/configuration 预览(1) 生成文件在终端输入命令：hexo g或者hexo generate，作用是将source下面的资源文件在public下生成对应的HTML文件，这些文件将来都是要提交到github去的(2) 启动服务在终端输入命令：hexo s或者hexo server，作用是开启本地预览服务，打开浏览器访问 localhost:4000 即可看到内容，默认的已经写好了一篇名为Hello World的文章(3) 如果浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考：http://blog.liuxianan.com/windows-port-bind.html 其他配置上述只是完成了最基本的博客搭建，还有许多配置仍需完善… 分类(1) 输入命令：hexo new page &quot;categories&quot;(2) 此命令会在source目录下面创建一个categories目录，内含一个index.md文档，打开进行编辑(3) 增加页面类型，结果如下： 123title: categoriesdate: 2019-08-31 13:47:02type: "categories" #将页面的类型设置为categories 标签(1) 输入命令：hexo new page &quot;tags&quot;(2) 此命令会在source目录下面创建一个tags目录，内含一个index.md文档，打开进行编辑(3) 设置页面类型，结果如下： 123title: tagsdate: 2019-08-31 13:47:02type: "tags" #将页面的类型设置为tags about自我介绍页面(1) 输入命令：hexo new page &quot;about&quot;(2) 此命令会在source目录下面创建一个about目录，内含一个index.md文档，打开进行编辑(3) 设置页面类型，结果如下： 123title: aboutdate: 2018-08-31 16:47:02type: "about" # 将页面的类型设置为about 404页面(1) 在source目录下创建一个404.html文件(2) 打开文件，将内容修改为以下内容： 1234567891011121314151617181920&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;" /&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow" /&gt; &lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="回到我的主页"&gt; &lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; (3) 此404页面为腾讯公益404页面，也可自定义404页面内容 主题修改(1) 在themes目录下存放的是博客的主题，默认的主题是landscape，可以修改其他主题，推荐使用next主题(2) 将终端切换到hexo目录，执行以下命令： 1git clone https://github.com/iissnan/hexo-theme-next themes/next (3) 修改_config.yml中的theme: landscape改为theme: next，然后重新执行hexo g来重新生成 启用配置(1) 分类、标签、404页面等配置是跟随主题来配置的，所以每次更换主题后都需要启用对应配置才能生效(2) 打开themes -&gt; next目录下的主题配置文件_config.yml，开启以下配置： 123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th #archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap commonweal: /404/ || heartbeat (3) 分别执行以下命令，浏览器访问4000端口进行验证： 123hexo clean # 清除原先生成的public下的文件hexo g # 生成public下的文件hexo s # 启动服务 next主题详细配置参考：http://theme-next.iissnan.com/theme-settings.html 发布文章测试(1) 新建一篇文章：hexo new &quot;测试文章&quot;或者直接在source_posts\目录下面新建测试文章.md文件(2) 打开md文件，按格式书写文章内容： 12345678910---title: 测试标题 # 这是标题tags: # 这里写的标签会自动汇集到 tags 页面上- 测试标签1 # 可配置多个标签，注意格式- 测试标签2category: # 这里写的分类会自动汇集到 categories 页面上，分类可以多级- 测试一级分类 # 一级分类- 测试二级分类 # 二级分类---测试文章内容 (3) 预览： 123hexo clean # 清除原先生成的public下的文件hexo g # 生成public下的文件hexo s # 启动服务 1.修改内容一旦预览与修改不一致，则需要clean2.已发布的文章发生修改， 可直接预览，即 不执行上述3个命令,刷新浏览器即可3.若对md文档语法不熟悉，可参考此文章 上传到GitHub(1) 在之前已经将ssh key和_config.yml关于deploy部分的配置已经完善,不再叙述(2) 直接执行hexo d一般会报如下错误： 1Deployer not found: github 或者 Deployer not found: git 解决方案是安装自动部署发布工具： 1npm install hexo-deployer-git --save (3) 输入命令hexo d将代码上传到GitHub，完成查看GitHub如下：(4) 浏览器访问：yourname.github.io，如果出现博客的内容，说明代码上传成功 总结Hexo相关命令总结(1) 常用命令 1234567891011hexo clean #清除缓存hexo g #生成静态页面至public目录，完整写法为：hexo generatehexo s #启动本地服务，完整写法为：hexo serverhexo d #发布到远程(GitHub)，完整写法为：hexo deployhexo new page "xxx" #新建xxx页面hexo new "xxx" #新建xxx文章hexo help #查看帮助hexo version #查看Hexo的版本hexo init #生成站点npm install --save xxx #安装插件npm unstall xxx #卸载插件 (2) 组合命令 12hexo s -g #生成并本地预览hexo d -g #生成并上传 命令尽量手写少复制粘贴，便于熟悉和理解 问题总结(1) 发布的文章都是md文档，可以先了解一下Markdown语法(2) FATAL Cannot read property ‘replace’ of null问题原因：url不能为空解决：修改站点配置文件_config.yml 1url: http://luxiong-blog.com (3) 静态资源图片设置：\themes\next\source\images\用来存放图片遇到某些地方需要用到图片时(主题配置文件中的avatar、wechatpay、alipay等)，直接使用相对路径引用： 123avatar: /images/avatar.jpg #头像wechatpay: /images/wechatpay.jpg #微信打赏码alipay: /images/alipay.jpg #支付宝打赏码 (4) 阅读全文：生成的博文目录会显示全部的文章内容，在合适的位置加上&lt;!--more--&gt;即可隐藏内容，例如： 12345678910111213# 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等； 完成效果：(5) 建站问题及错误，遇到问题不要慌，大胆猜测小心验证，百度搜索问题关键字基本都有解决方案 参考(1) https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html(2) https://tianbozhang.coding.me/personal-blog-start.html]]></content>
      <categories>
        <category>Hexo个人博客搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
